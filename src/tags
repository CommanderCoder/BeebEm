!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AAA	Master512CoPro.cc	/^	AAA, AAS, AAM, AAD,                             \/\/ ARITHMETIC ADJUSTS$/;"	e	enum:__anon26	file:
AAD	Master512CoPro.cc	/^	AAA, AAS, AAM, AAD,                             \/\/ ARITHMETIC ADJUSTS$/;"	e	enum:__anon26	file:
AAM	Master512CoPro.cc	/^	AAA, AAS, AAM, AAD,                             \/\/ ARITHMETIC ADJUSTS$/;"	e	enum:__anon26	file:
AAS	Master512CoPro.cc	/^	AAA, AAS, AAM, AAD,                             \/\/ ARITHMETIC ADJUSTS$/;"	e	enum:__anon26	file:
ABS	debug.cc	/^#define ABS /;"	d	file:
ABS	debug_org.cc	/^#define ABS /;"	d	file:
ABX	debug.cc	/^#define ABX /;"	d	file:
ABX	debug_org.cc	/^#define ABX /;"	d	file:
ABY	debug.cc	/^#define ABY /;"	d	file:
ABY	debug_org.cc	/^#define ABY /;"	d	file:
ACC	debug.cc	/^#define ACC /;"	d	file:
ACC	debug_org.cc	/^#define ACC /;"	d	file:
ACCCON	beebmem.cc	/^unsigned char ACCCON; \/\/ ACCess CONtrol register$/;"	v
ACIA_Control	serial.cc	/^unsigned char ACIA_Status,ACIA_Control; \/\/ 6850 ACIA Status.& Control$/;"	v
ACIA_Status	serial.cc	/^unsigned char ACIA_Status,ACIA_Control; \/\/ 6850 ACIA Status.& Control$/;"	v
ADCInstrHandler	6502core.cc	/^INLINE static void ADCInstrHandler(int16 operand) {$/;"	f	file:
ADCInstrHandler	tube.cc	/^INLINE static void ADCInstrHandler(int16 operand) {$/;"	f	file:
ADDB	Master512CoPro.cc	/^inline uint32_t Master512CoPro::ADDB()$/;"	f	class:Master512CoPro
ADDRESS_EXCEPTION_VECTOR	Arm.h	/^#define ADDRESS_EXCEPTION_VECTOR	/;"	d
ADDX	Master512CoPro.cc	/^inline uint32_t Master512CoPro::ADDX()$/;"	f	class:Master512CoPro
ADFS	disctype.h	/^	ADFS = 2,$/;"	m	class:DiscType
ADJ4	Master512CoPro.cc	/^void Master512CoPro::ADJ4(int8_t param1, int8_t param2)$/;"	f	class:Master512CoPro
ADJB	Master512CoPro.cc	/^inline void Master512CoPro::ADJB(int8_t param1, int8_t param2)$/;"	f	class:Master512CoPro
ADLC	econet.cc	/^volatile MC6854 ADLC;$/;"	m	class:AUNType::FourWayStage	file:
ADLCtemp	econet.cc	/^static MC6854 ADLCtemp;$/;"	m	class:AUNType::FourWayStage	file:
ADRMASK	debug.cc	/^#define ADRMASK /;"	d	file:
ADRMASK	debug_org.cc	/^#define ADRMASK /;"	d	file:
AF	Master512CoPro.cc	/^#define AF /;"	d	file:
AH	Master512CoPro.h	/^			AH = NATIVE_ENDIAN_VALUE_LE_BE(0x1, 0x0),$/;"	e	enum:Master512CoPro::BREGS
AL	Master512CoPro.h	/^			AL = NATIVE_ENDIAN_VALUE_LE_BE(0x0, 0x1),$/;"	e	enum:Master512CoPro::BREGS
ALU_M16I8	Master512CoPro.cc	/^	ALU_R16I8, ALU_M16I8, ALU_M16I8_RO,             \/\/ alu OPS, 16-BIT W\/8-BIT IMMEDIATE$/;"	e	enum:__anon26	file:
ALU_M16I8_RO	Master512CoPro.cc	/^	ALU_R16I8, ALU_M16I8, ALU_M16I8_RO,             \/\/ alu OPS, 16-BIT W\/8-BIT IMMEDIATE$/;"	e	enum:__anon26	file:
ALU_MI16	Master512CoPro.cc	/^	ALU_RI16, ALU_MI16, ALU_MI16_RO,                \/\/ alu OPS, 16-BIT IMMEDIATE$/;"	e	enum:__anon26	file:
ALU_MI16_RO	Master512CoPro.cc	/^	ALU_RI16, ALU_MI16, ALU_MI16_RO,                \/\/ alu OPS, 16-BIT IMMEDIATE$/;"	e	enum:__anon26	file:
ALU_MI8	Master512CoPro.cc	/^	ALU_RI8, ALU_MI8, ALU_MI8_RO,                   \/\/ alu OPS, 8-BIT IMMEDIATE$/;"	e	enum:__anon26	file:
ALU_MI8_RO	Master512CoPro.cc	/^	ALU_RI8, ALU_MI8, ALU_MI8_RO,                   \/\/ alu OPS, 8-BIT IMMEDIATE$/;"	e	enum:__anon26	file:
ALU_MR16	Master512CoPro.cc	/^	ALU_RR16, ALU_RM16, ALU_MR16,                   \/\/ alu OPS, 16-BIT$/;"	e	enum:__anon26	file:
ALU_MR8	Master512CoPro.cc	/^	ALU_RR8, ALU_RM8, ALU_MR8,                      \/\/ alu OPS, 8-BIT$/;"	e	enum:__anon26	file:
ALU_R16I8	Master512CoPro.cc	/^	ALU_R16I8, ALU_M16I8, ALU_M16I8_RO,             \/\/ alu OPS, 16-BIT W\/8-BIT IMMEDIATE$/;"	e	enum:__anon26	file:
ALU_RI16	Master512CoPro.cc	/^	ALU_RI16, ALU_MI16, ALU_MI16_RO,                \/\/ alu OPS, 16-BIT IMMEDIATE$/;"	e	enum:__anon26	file:
ALU_RI8	Master512CoPro.cc	/^	ALU_RI8, ALU_MI8, ALU_MI8_RO,                   \/\/ alu OPS, 8-BIT IMMEDIATE$/;"	e	enum:__anon26	file:
ALU_RM16	Master512CoPro.cc	/^	ALU_RR16, ALU_RM16, ALU_MR16,                   \/\/ alu OPS, 16-BIT$/;"	e	enum:__anon26	file:
ALU_RM8	Master512CoPro.cc	/^	ALU_RR8, ALU_RM8, ALU_MR8,                      \/\/ alu OPS, 8-BIT$/;"	e	enum:__anon26	file:
ALU_RR16	Master512CoPro.cc	/^	ALU_RR16, ALU_RM16, ALU_MR16,                   \/\/ alu OPS, 16-BIT$/;"	e	enum:__anon26	file:
ALU_RR8	Master512CoPro.cc	/^	ALU_RR8, ALU_RM8, ALU_MR8,                      \/\/ alu OPS, 8-BIT$/;"	e	enum:__anon26	file:
AMASK	Master512CoPro.cc	/^const uint32_t AMASK = 0xfffff;$/;"	v
AMBER	beebwin.h	/^	enum PaletteType { RGB, BW, AMBER, GREEN } palette_type;$/;"	e	enum:BeebWin::PaletteType
AMXButtons	uservia.cc	/^int AMXButtons = 0;$/;"	v
AMXCurrentX	uservia.cc	/^int AMXCurrentX = 0;$/;"	v
AMXCurrentY	uservia.cc	/^int AMXCurrentY = 0;$/;"	v
AMXDeltaX	uservia.cc	/^int AMXDeltaX = 0;$/;"	v
AMXDeltaY	uservia.cc	/^int AMXDeltaY = 0;$/;"	v
AMXLRForMiddle	uservia.cc	/^bool AMXLRForMiddle = false;$/;"	v
AMXMouseEnabled	uservia.cc	/^bool AMXMouseEnabled = false;$/;"	v
AMXMouseMovement	uservia.cc	/^void AMXMouseMovement()$/;"	f
AMXTargetX	uservia.cc	/^int AMXTargetX = 0;$/;"	v
AMXTargetY	uservia.cc	/^int AMXTargetY = 0;$/;"	v
AMXTrigger	uservia.cc	/^int AMXTrigger = 0;$/;"	v
AMX_LEFT_BUTTON	uservia.h	/^#define AMX_LEFT_BUTTON /;"	d
AMX_MIDDLE_BUTTON	uservia.h	/^#define AMX_MIDDLE_BUTTON /;"	d
AMX_RIGHT_BUTTON	uservia.h	/^#define AMX_RIGHT_BUTTON /;"	d
AMX_TRIGGER	uservia.h	/^#define AMX_TRIGGER /;"	d
ANDB	Master512CoPro.cc	/^inline void Master512CoPro::ANDB()$/;"	f	class:Master512CoPro
ANDInstrHandler	6502core.cc	/^INLINE static void ANDInstrHandler(int16 operand) {$/;"	f	file:
ANDInstrHandler	tube.cc	/^INLINE static void ANDInstrHandler(int16 operand) {$/;"	f	file:
ANDX	Master512CoPro.cc	/^inline void Master512CoPro::ANDX()$/;"	f	class:Master512CoPro
ASLInstrHandler	6502core.cc	/^INLINE static void ASLInstrHandler(int16 address) {$/;"	f	file:
ASLInstrHandler	tube.cc	/^INLINE static void ASLInstrHandler(int16 address) {$/;"	f	file:
ASLInstrHandler_Acc	6502core.cc	/^INLINE static void ASLInstrHandler_Acc(void) {$/;"	f	file:
ASLInstrHandler_Acc	tube.cc	/^INLINE static void ASLInstrHandler_Acc(void) {$/;"	f	file:
ASR	Arm.h	/^#define ASR	/;"	d
ASSERT_LINE1	Master512CoPro.cc	/^	ASSERT_LINE1, \/\/ assert an interrupt immediately$/;"	e	enum:__anon25	file:
ASSERT_LINE4	Master512CoPro.cc	/^	ASSERT_LINE4, \/\/ assert an interrupt immediately$/;"	e	enum:__anon25	file:
ATODCONV_HEADER	atodconv.h	/^#define ATODCONV_HEADER$/;"	d
ATrack	disc1770.cc	/^static unsigned char ATrack = 0;$/;"	v	file:
AUNHeader	econet.cc	/^struct AUNHeader$/;"	s	class:AUNType	file:
AUNTAB	econet.cc	/^struct AUNTAB {$/;"	s	class:AUNType::FourWayStage	file:
AUNType	econet.cc	/^enum class AUNType : unsigned char {$/;"	c	file:
AUN_TABLE_LENGTH	econet.cc	/^const int AUN_TABLE_LENGTH = 128; \/\/ number of disparate network in AUNMap$/;"	m	class:AUNType::FourWayStage	file:
AX	Master512CoPro.h	/^		enum WREGS { AX = 0, CX, DX, BX, SP, BP, SI, DI };$/;"	e	enum:Master512CoPro::WREGS
AbsAddrModeHandler_Address	6502core.cc	/^INLINE static int16 AbsAddrModeHandler_Address(void) {$/;"	f	file:
AbsAddrModeHandler_Address	tube.cc	/^INLINE static int16 AbsAddrModeHandler_Address(void) {$/;"	f	file:
AbsAddrModeHandler_Data	6502core.cc	/^INLINE static int16 AbsAddrModeHandler_Data(void) {$/;"	f	file:
AbsAddrModeHandler_Data	tube.cc	/^INLINE static int16 AbsAddrModeHandler_Data(void) {$/;"	f	file:
AbsXAddrModeHandler_Address	6502core.cc	/^INLINE static int16 AbsXAddrModeHandler_Address(void) {$/;"	f	file:
AbsXAddrModeHandler_Address	tube.cc	/^INLINE static int16 AbsXAddrModeHandler_Address(void) {$/;"	f	file:
AbsXAddrModeHandler_Data	6502core.cc	/^INLINE static int16 AbsXAddrModeHandler_Data(void) {$/;"	f	file:
AbsXAddrModeHandler_Data	tube.cc	/^INLINE static int16 AbsXAddrModeHandler_Data(void) {$/;"	f	file:
AbsYAddrModeHandler_Address	6502core.cc	/^INLINE static int16 AbsYAddrModeHandler_Address(void) {$/;"	f	file:
AbsYAddrModeHandler_Address	tube.cc	/^INLINE static int16 AbsYAddrModeHandler_Address(void) {$/;"	f	file:
AbsYAddrModeHandler_Data	6502core.cc	/^INLINE static int16 AbsYAddrModeHandler_Data(void) {$/;"	f	file:
AbsYAddrModeHandler_Data	tube.cc	/^INLINE static int16 AbsYAddrModeHandler_Data(void) {$/;"	f	file:
Accumulator	6502core.cc	/^static int Accumulator,XReg,YReg;$/;"	v	file:
Accumulator	tube.cc	/^static int Accumulator,XReg,YReg;$/;"	v	file:
Ack	econet.cc	/^    Ack = 3,$/;"	m	class:AUNType	file:
Acorn65C02	tube.h	/^    Acorn65C02,$/;"	m	class:Tube
AcornArm	tube.h	/^    AcornArm,$/;"	m	class:Tube
AcornZ80	tube.cc	/^unsigned char TubeEnabled,Tube186Enabled,AcornZ80,EnableTube;$/;"	v
AcornZ80	tube.h	/^    AcornZ80,$/;"	m	class:Tube
ActControl	serialdevices.cc	/^void ActControl(OSType box)$/;"	f
ActiveChannel	beebsound.cc	/^static int ActiveChannel[4]={FALSE,FALSE,FALSE,FALSE}; \/* Those channels with non-0 voolume *\/$/;"	v	file:
ActualScreenWidth	video.cc	/^unsigned int ActualScreenWidth=640;$/;"	v
AddDictNum	plist.cc	/^void AddDictNum(CFMutableDictionaryRef dict, CFStringRef key, int value)$/;"	f
AddDictString	plist.cc	/^void AddDictString(CFMutableDictionaryRef dict, CFStringRef key, char *value)$/;"	f
Addr	video.cc	/^  int Addr;       \/* Address of start of next visible character line in beeb memory  - raw *\/$/;"	m	struct:__anon4	file:
AddrModeHandlerFuncType	6502core.cc	/^typedef int16 (*AddrModeHandlerFuncType)(int WantsAddr);$/;"	t	file:
AddrModeHandlerFuncType	tube.cc	/^typedef int16 (*AddrModeHandlerFuncType)(int WantsAddr);$/;"	t	file:
Address	beebmem.h	/^	unsigned char Address;$/;"	m	struct:CMOSType
AdjustForIORead	6502core.cc	/^void AdjustForIORead(void)$/;"	f
AdjustForIOWrite	6502core.cc	/^void AdjustForIOWrite(void)$/;"	f
AdjustSpeed	beebwin.cc	/^void BeebWin::AdjustSpeed(bool up)$/;"	f	class:BeebWin
AdjustTrigger	6502core.h	/^#define AdjustTrigger(/;"	d
AdjustVideo	video.cc	/^void AdjustVideo() {$/;"	f
AdvanceCyclesForMemRead	6502core.cc	/^void AdvanceCyclesForMemRead(void)$/;"	f
AdvanceCyclesForMemWrite	6502core.cc	/^void AdvanceCyclesForMemWrite(void)$/;"	f
ArmTube	Arm.cc	/^int ArmTube = 0;$/;"	v
Arm_disassemble	ArmDisassembler.cc	/^char *Arm_disassemble(uint32 address, uint32 instruction, char *buff)$/;"	f
AtoDDisable	atodconv.cc	/^void AtoDDisable(void)$/;"	f
AtoDEnable	atodconv.cc	/^void AtoDEnable(void)$/;"	f
AtoDInit	atodconv.cc	/^void AtoDInit(void)$/;"	f
AtoDRead	atodconv.cc	/^unsigned char AtoDRead(int Address)$/;"	f
AtoDState	atodconv.cc	/^AtoDStateT AtoDState;$/;"	v
AtoDStateT	atodconv.cc	/^typedef struct AtoDStateT {$/;"	s	file:
AtoDStateT	atodconv.cc	/^} AtoDStateT;$/;"	t	typeref:struct:AtoDStateT	file:
AtoDTrigger	atodconv.cc	/^int AtoDTrigger;  \/* For next A to D conversion completion *\/$/;"	v
AtoDWrite	atodconv.cc	/^void AtoDWrite(int Address, int Value)$/;"	f
AtoD_poll	atodconv.h	/^#define AtoD_poll(/;"	d
AtoD_poll_real	atodconv.cc	/^void AtoD_poll_real(void)$/;"	f
AudioType	beebsound.h	/^struct AudioType {$/;"	s
AutoRunFromPath	main.cc	/^void AutoRunFromPath()$/;"	f
AutoRunPath	main.cc	/^char AutoRunPath[512]="";$/;"	v
B	model.h	/^	B,         \/\/ 0: BBC B$/;"	m	class:Model
BBCCol	userkybd.cc	/^int		BBCCol;			\/\/ for a key press from the User.$/;"	v
BBCRow	userkybd.cc	/^int		BBCRow;			\/\/ Used to store the Row and Col values while we wait $/;"	v
BCCInstrHandler	6502core.cc	/^INLINE static void BCCInstrHandler(void) {$/;"	f	file:
BCCInstrHandler	tube.cc	/^INLINE static void BCCInstrHandler(void) {$/;"	f	file:
BCD	sysvia.cc	/^unsigned char BCD(unsigned char nonBCD) {$/;"	f
BCDToBin	sysvia.cc	/^unsigned char BCDToBin(unsigned char BCD) {$/;"	f
BCSInstrHandler	6502core.cc	/^INLINE static void BCSInstrHandler(void) {$/;"	f	file:
BCSInstrHandler	tube.cc	/^INLINE static void BCSInstrHandler(void) {$/;"	f	file:
BEEBMEM_HEADER	beebmem.h	/^#define BEEBMEM_HEADER$/;"	d
BEEBREADMEM_FAST	beebmem.h	/^#define BEEBREADMEM_FAST(/;"	d
BEEBREADMEM_FASTINC	beebmem.h	/^#define BEEBREADMEM_FASTINC(/;"	d
BEEBWIN_HEADER	beebwin.h	/^#define BEEBWIN_HEADER$/;"	d
BEEBWRITEMEM_DIRECT	beebmem.h	/^#define BEEBWRITEMEM_DIRECT(/;"	d
BEEBWRITEMEM_FAST	beebmem.h	/^#define BEEBWRITEMEM_FAST(/;"	d
BEEB_DOTIME	video.cc	/^#define BEEB_DOTIME$/;"	d	file:
BEEB_DOTIME_SAMPLESIZE	video.cc	/^#define BEEB_DOTIME_SAMPLESIZE /;"	d	file:
BEEB_STATE_FILE_TAG	beebstate.h	/^#define BEEB_STATE_FILE_TAG	/;"	d
BEEB_STATE_SIZE	beebstate.h	/^#define BEEB_STATE_SIZE	/;"	d
BEEB_STATE_SIZE_NO_SWRAM	beebstate.h	/^#define BEEB_STATE_SIZE_NO_SWRAM	/;"	d
BEQInstrHandler	6502core.cc	/^INLINE static void BEQInstrHandler(void) {$/;"	f	file:
BEQInstrHandler	tube.cc	/^INLINE static void BEQInstrHandler(void) {$/;"	f	file:
BH	Master512CoPro.h	/^			BH = NATIVE_ENDIAN_VALUE_LE_BE(0x7, 0x6),$/;"	e	enum:Master512CoPro::BREGS
BHardware	6502core.cc	/^int BHardware=0; \/\/ 0 = all hardware, 1 = basic hardware only$/;"	v
BITImmedInstrHandler	6502core.cc	/^INLINE static void BITImmedInstrHandler(int16 operand) {$/;"	f	file:
BITImmedInstrHandler	tube.cc	/^INLINE static void BITImmedInstrHandler(int16 operand)$/;"	f	file:
BITInstrHandler	6502core.cc	/^INLINE static void BITInstrHandler(int16 operand) {$/;"	f	file:
BITInstrHandler	tube.cc	/^INLINE static void BITInstrHandler(int16 operand) {$/;"	f	file:
BL	Master512CoPro.h	/^			BL = NATIVE_ENDIAN_VALUE_LE_BE(0x6, 0x7),$/;"	e	enum:Master512CoPro::BREGS
BMIInstrHandler	6502core.cc	/^INLINE static void BMIInstrHandler(void) {$/;"	f	file:
BMIInstrHandler	tube.cc	/^INLINE static void BMIInstrHandler(void) {$/;"	f	file:
BNEInstrHandler	6502core.cc	/^INLINE static void BNEInstrHandler(void) {$/;"	f	file:
BNEInstrHandler	tube.cc	/^INLINE static void BNEInstrHandler(void) {$/;"	f	file:
BOUND	Master512CoPro.cc	/^	BOUND                                           \/\/ (80186) bound$/;"	e	enum:__anon26	file:
BP	Master512CoPro.h	/^		enum WREGS { AX = 0, CX, DX, BX, SP, BP, SI, DI };$/;"	e	enum:Master512CoPro::WREGS
BPCount	debug.cc	/^static int BPCount = 0;         \/\/ Num of breakpoints$/;"	v	file:
BPH	Master512CoPro.h	/^			BPH = NATIVE_ENDIAN_VALUE_LE_BE(0xb, 0xa),$/;"	e	enum:Master512CoPro::BREGS
BPL	Master512CoPro.h	/^			BPL = NATIVE_ENDIAN_VALUE_LE_BE(0xa, 0xb),$/;"	e	enum:Master512CoPro::BREGS
BPLInstrHandler	6502core.cc	/^INLINE static void BPLInstrHandler(void) {$/;"	f	file:
BPLInstrHandler	tube.cc	/^INLINE static void BPLInstrHandler(void) {$/;"	f	file:
BPSOn	debug.cc	/^static bool BPSOn = false;$/;"	v	file:
BPUT	disc1770.cc	/^#define BPUT(/;"	d	file:
BPlus	model.h	/^	BPlus,     \/\/ 2: BBC B+$/;"	m	class:Model
BRAInstrHandler	6502core.cc	/^INLINE static void BRAInstrHandler(void) {$/;"	f	file:
BRAInstrHandler	tube.cc	/^INLINE static void BRAInstrHandler(void) {$/;"	f	file:
BREGS	Master512CoPro.h	/^		enum BREGS {$/;"	g	class:Master512CoPro
BRKInstrHandler	6502core.cc	/^INLINE static void BRKInstrHandler(void) {$/;"	f	file:
BRKInstrHandler	tube.cc	/^INLINE static void BRKInstrHandler(void) {$/;"	f	file:
BUFFER_LEN	csw.h	/^#define BUFFER_LEN	/;"	d
BVCInstrHandler	6502core.cc	/^INLINE static void BVCInstrHandler(void) {$/;"	f	file:
BVCInstrHandler	tube.cc	/^INLINE static void BVCInstrHandler(void) {$/;"	f	file:
BVSInstrHandler	6502core.cc	/^INLINE static void BVSInstrHandler(void) {$/;"	f	file:
BVSInstrHandler	tube.cc	/^INLINE static void BVSInstrHandler(void) {$/;"	f	file:
BW	beebwin.h	/^	enum PaletteType { RGB, BW, AMBER, GREEN } palette_type;$/;"	e	enum:BeebWin::PaletteType
BX	Master512CoPro.h	/^		enum WREGS { AX = 0, CX, DX, BX, SP, BP, SI, DI };$/;"	e	enum:Master512CoPro::WREGS
BYTE	osd_cpu.h	/^typedef unsigned char  BYTE;$/;"	t
BYTE	z80mem.h	/^typedef unsigned char	BYTE;$/;"	t
BYTE_TIME	disc1770.cc	/^#define BYTE_TIME /;"	d	file:
BailError	GetFile.h	/^#define  BailError(/;"	d
BailNULL	GetFile.h	/^#define  BailNULL(/;"	d
Baud_Rates	serial.cc	/^unsigned int Baud_Rates[8]={19200,1200,4800,150,9600,300,2400,75};$/;"	v
BeebKeyDown	sysvia.cc	/^void BeebKeyDown(int row,int col) {$/;"	f
BeebKeyUp	sysvia.cc	/^void BeebKeyUp(int row,int col) {$/;"	f
BeebMemInit	beebmem.cc	/^void BeebMemInit(unsigned char LoadRoms,unsigned char SkipIntegraBConfig) {$/;"	f
BeebMemPtrWithWrap	beebmem.cc	/^char *BeebMemPtrWithWrap(int a, int n) {$/;"	f
BeebMemPtrWithWrapMo7	beebmem.cc	/^char *BeebMemPtrWithWrapMo7(int a, int n) {$/;"	f
BeebReadMem	beebmem.cc	/^int BeebReadMem(int Address) {$/;"	f
BeebReadPhroms	speech.cc	/^void BeebReadPhroms(void) {$/;"	f
BeebReadRoms	beebmem.cc	/^void BeebReadRoms(void) {$/;"	f
BeebReleaseAllKeys	sysvia.cc	/^void BeebReleaseAllKeys() {$/;"	f
BeebRx	econet.cc	/^static EconetPacket BeebRx;$/;"	m	class:AUNType::FourWayStage	file:
BeebState	beebstate.h	/^} BeebState;$/;"	t	typeref:struct:__anon28
BeebState76489	beebsound.cc	/^} BeebState76489;$/;"	v	typeref:struct:BeebState76489_S
BeebState76489_S	beebsound.cc	/^volatile struct BeebState76489_S {$/;"	s	file:
BeebTx	econet.cc	/^static EconetPacket BeebTx;$/;"	m	class:AUNType::FourWayStage	file:
BeebTxCopy	econet.cc	/^static unsigned char BeebTxCopy[6]; \/\/ size of longeconetpacket structure$/;"	m	class:AUNType::FourWayStage	file:
BeebWin	beebwin.cc	/^BeebWin::BeebWin() $/;"	f	class:BeebWin
BeebWin	beebwin.h	/^class BeebWin {$/;"	c
BeebWriteMem	beebmem.cc	/^void BeebWriteMem(int Address, unsigned char Value) {$/;"	f
BeginDump	6502core.cc	/^int BeginDump=0;$/;"	v
BitKey	uservia.cc	/^int	BitKey;			\/\/ Used to store the bit key pressed while we wait $/;"	v
BitKeyName	uservia.cc	/^const char *BitKeyName( int Key )$/;"	f
BitKeys	uservia.cc	/^int BitKeys[8] = {29, 18, 19, 20, 21, 23, 22, 26};$/;"	v
BranchOnBitReset	tube.cc	/^static void BranchOnBitReset(int bit)$/;"	f	file:
BranchOnBitSet	tube.cc	/^static void BranchOnBitSet(int bit)$/;"	f	file:
Branched	6502core.cc	/^static bool Branched;$/;"	v	file:
Branched	tube.cc	/^static bool Branched; \/\/ Branched - true if the instruction branched$/;"	v	file:
BreakOutCloseDialog	uservia.cc	/^void BreakOutCloseDialog()$/;"	f
BreakOutOpenDialog	uservia.cc	/^void BreakOutOpenDialog()$/;"	f
BreakOutWindowCommandHandler	uservia.cc	/^OSStatus BreakOutWindowCommandHandler(EventHandlerCallRef nextHandler, EventRef event, void *userData)$/;"	f
Breakpoint	debug.cc	/^struct Breakpoint$/;"	s	file:
Breakpoint	debug_org.cc	/^struct Breakpoint$/;"	s	file:
BreakpointHit	debug.cc	/^static bool BreakpointHit = false;$/;"	v	file:
Breakpoints	debug.cc	/^Breakpoint Breakpoints[MAX_BPS];$/;"	v
Breakpoints	debug_org.cc	/^Breakpoint Breakpoints[MAX_BPS];$/;"	v
Broadcast	econet.cc	/^    Broadcast = 1,$/;"	m	class:AUNType	file:
BuildMode7Font	video.cc	/^static void BuildMode7Font(void) {$/;"	f	file:
BusFree	scsi.cc	/^static void BusFree(void)$/;"	f	file:
Byte	Arm.h	/^typedef unsigned char Byte;$/;"	t
ByteCount	beebsound.h	/^	char ByteCount; \/\/ Byte repeat counter$/;"	m	struct:AudioType
BytePos	beebsound.h	/^	char BytePos; \/\/ Position in data byte$/;"	m	struct:AudioType
ByteWithinSector	disc8271.cc	/^  int ByteWithinSector; \/* Next byte in sector or ID field *\/$/;"	m	struct:__anon20	file:
BytesInBuffer	econet.cc	/^    volatile unsigned int BytesInBuffer;$/;"	m	struct:AUNType::FourWayStage::EconetPacket	file:
BytesInBuffer	econet.cc	/^    volatile unsigned int BytesInBuffer;$/;"	m	struct:AUNType::FourWayStage::EthernetPacket	file:
CALLC	z80.cc	/^#define CALLC(/;"	d	file:
CALL_FAR	Master512CoPro.cc	/^	CALL_NEAR, CALL_FAR,                            \/\/ DIRECT callS$/;"	e	enum:__anon26	file:
CALL_M16	Master512CoPro.cc	/^	CALL_R16, CALL_M16, CALL_M32,                   \/\/ INDIRECT callS$/;"	e	enum:__anon26	file:
CALL_M32	Master512CoPro.cc	/^	CALL_R16, CALL_M16, CALL_M32,                   \/\/ INDIRECT callS$/;"	e	enum:__anon26	file:
CALL_NEAR	Master512CoPro.cc	/^	CALL_NEAR, CALL_FAR,                            \/\/ DIRECT callS$/;"	e	enum:__anon26	file:
CALL_R16	Master512CoPro.cc	/^	CALL_R16, CALL_M16, CALL_M32,                   \/\/ INDIRECT callS$/;"	e	enum:__anon26	file:
CASSETTE	serial.cc	/^#define CASSETTE /;"	d	file:
CArm	Arm.cc	/^CArm::CArm()$/;"	f	class:CArm
CArm	Arm.h	/^class CArm $/;"	c
CBW	Master512CoPro.cc	/^	CBW, CWD,                                       \/\/ SIGN EXTENSION$/;"	e	enum:__anon26	file:
CColour	main.h	/^struct CColour{$/;"	s
CDiscName	beebwin.cc	/^char CDiscName[2][256]; \/\/ Filename of disc current in drive 0 and 1;$/;"	v
CDiscType	beebwin.cc	/^DiscType CDiscType[2]; \/\/ Current disc types$/;"	v
CF	Master512CoPro.cc	/^#define CF /;"	d	file:
CH	Master512CoPro.h	/^			CH = NATIVE_ENDIAN_VALUE_LE_BE(0x3, 0x2),$/;"	e	enum:Master512CoPro::BREGS
CHANNEL_PRIORITY	Master512CoPro.cc	/^const uint16_t CHANNEL_PRIORITY        = 0x0020;$/;"	v
CHAR	z80dis.cc	/^typedef char CHAR;$/;"	t	file:
CHG_NOCHG	Master512CoPro.cc	/^const uint16_t CHG_NOCHG               = 0x0004;$/;"	v
CL	Master512CoPro.h	/^			CL = NATIVE_ENDIAN_VALUE_LE_BE(0x2, 0x3),$/;"	e	enum:Master512CoPro::BREGS
CLEAR_LINE	Master512CoPro.cc	/^	CLEAR_LINE,   \/\/ clear (a fired, held or pulsed) line$/;"	e	enum:__anon25	file:
CLIB_DECL	osd_cpu.h	/^#define CLIB_DECL$/;"	d
CLK	Master512CoPro.cc	/^void Master512CoPro::CLK(uint8_t op)$/;"	f	class:Master512CoPro
CLKM	Master512CoPro.cc	/^void Master512CoPro::CLKM(uint8_t op_reg, uint8_t op_mem)$/;"	f	class:Master512CoPro
CMA2	beebwin.cc	/^unsigned char CMA2;$/;"	v
CMDF	sysvia.cc	/^FILE *CMDF;$/;"	v
CMDF2	beebwin.cc	/^FILE *CMDF2;$/;"	v
CMOS	beebmem.cc	/^struct CMOSType CMOS;$/;"	v	typeref:struct:CMOSType
CMOSConvertClock	sysvia.cc	/^time_t CMOSConvertClock(void) {$/;"	f
CMOSDebug	sysvia.cc	/^bool CMOSDebug=false;$/;"	v
CMOSDefault	beebmem.cc	/^unsigned char CMOSDefault[64]={0,0,0,0,0,0xc9,0xff,0xfe,0x32,0,7,0xc1,0x1e,5,0,0x59,0xa2}; \/\/ Backup of CMOS Defaults$/;"	v
CMOSRAM	beebmem.cc	/^unsigned char CMOSRAM[64]; \/\/ 50 Bytes CMOS RAM$/;"	v
CMOSRead	sysvia.cc	/^unsigned char CMOSRead(unsigned char CMOSAddr) {$/;"	f
CMOSType	beebmem.h	/^struct CMOSType {$/;"	s
CMOSWrite	sysvia.cc	/^void CMOSWrite(unsigned char CMOSAddr,unsigned char CMOSData) {$/;"	f
CMPInstrHandler	6502core.cc	/^INLINE static void CMPInstrHandler(int16 operand) {$/;"	f	file:
CMPInstrHandler	tube.cc	/^INLINE static void CMPInstrHandler(int16 operand) {$/;"	f	file:
CMPS16	Master512CoPro.cc	/^	CMPS16, REP_CMPS16_BASE, REP_CMPS16_COUNT,      \/\/ cmps 16-BIT$/;"	e	enum:__anon26	file:
CMPS8	Master512CoPro.cc	/^	CMPS8, REP_CMPS8_BASE, REP_CMPS8_COUNT,         \/\/ cmps 8-BIT$/;"	e	enum:__anon26	file:
COMBINE_64_32_32	osd_cpu.h	/^#define COMBINE_64_32_32(/;"	d
COMBINE_U64_U32_U32	osd_cpu.h	/^#define COMBINE_U64_U32_U32(/;"	d
CORE6502_HEADER	6502core.h	/^#define CORE6502_HEADER$/;"	d
CPUDebug	6502core.cc	/^int CPUDebug=0;$/;"	v
CPUState	beebstate.h	/^	unsigned char CPUState[16];$/;"	m	struct:__anon28
CPXInstrHandler	6502core.cc	/^INLINE static void CPXInstrHandler(int16 operand) {$/;"	f	file:
CPXInstrHandler	tube.cc	/^INLINE static void CPXInstrHandler(int16 operand) {$/;"	f	file:
CPYInstrHandler	6502core.cc	/^INLINE static void CPYInstrHandler(int16 operand) {$/;"	f	file:
CPYInstrHandler	tube.cc	/^INLINE static void CPYInstrHandler(int16 operand) {$/;"	f	file:
CRTCControlReg	video.cc	/^unsigned char CRTCControlReg=0;$/;"	v
CRTCRead	video.cc	/^int CRTCRead(int Address) {$/;"	f
CRTCWrite	video.cc	/^void CRTCWrite(int Address, int Value) {$/;"	f
CRTC_CursorEnd	video.cc	/^unsigned char CRTC_CursorEnd=0;             \/* R11 *\/$/;"	v
CRTC_CursorPosHigh	video.cc	/^unsigned char CRTC_CursorPosHigh=0;         \/* R14 *\/$/;"	v
CRTC_CursorPosLow	video.cc	/^unsigned char CRTC_CursorPosLow=0;          \/* R15 *\/$/;"	v
CRTC_CursorStart	video.cc	/^unsigned char CRTC_CursorStart=0;           \/* R10 *\/$/;"	v
CRTC_HorizontalDisplayed	video.cc	/^unsigned char CRTC_HorizontalDisplayed=80;  \/* R1 *\/$/;"	v
CRTC_HorizontalSyncPos	video.cc	/^unsigned char CRTC_HorizontalSyncPos=98;    \/* R2 *\/$/;"	v
CRTC_HorizontalTotal	video.cc	/^unsigned char CRTC_HorizontalTotal=127;     \/* R0 *\/$/;"	v
CRTC_InterlaceAndDelay	video.cc	/^unsigned char CRTC_InterlaceAndDelay=0;     \/* R8 - 0,1 are interlace modes, 4,5 display blanking delay, 6,7 cursor blanking delay *\/$/;"	v
CRTC_LightPenHigh	video.cc	/^unsigned char CRTC_LightPenHigh=0;          \/* R16 *\/$/;"	v
CRTC_LightPenLow	video.cc	/^unsigned char CRTC_LightPenLow=0;           \/* R17 *\/$/;"	v
CRTC_ScanLinesPerChar	video.cc	/^unsigned char CRTC_ScanLinesPerChar=7;      \/* R9 *\/$/;"	v
CRTC_ScreenStartHigh	video.cc	/^unsigned char CRTC_ScreenStartHigh=6;       \/* R12 *\/$/;"	v
CRTC_ScreenStartLow	video.cc	/^unsigned char CRTC_ScreenStartLow=0;        \/* R13 *\/$/;"	v
CRTC_SyncWidth	video.cc	/^unsigned char CRTC_SyncWidth=0x28;          \/* R3 - top 4 bits are Vertical (in scan lines) and bottom 4 are horizontal in characters *\/$/;"	v
CRTC_VerticalDisplayed	video.cc	/^unsigned char CRTC_VerticalDisplayed=32;    \/* R6 *\/$/;"	v
CRTC_VerticalSyncPos	video.cc	/^unsigned char CRTC_VerticalSyncPos=34;      \/* R7 *\/$/;"	v
CRTC_VerticalTotal	video.cc	/^unsigned char CRTC_VerticalTotal=38;        \/* R4 *\/$/;"	v
CRTC_VerticalTotalAdjust	video.cc	/^unsigned char CRTC_VerticalTotalAdjust=0;   \/* R5 *\/$/;"	v
CS	Master512CoPro.h	/^		enum SREGS { ES = 0, CS, SS, DS };$/;"	e	enum:Master512CoPro::SREGS
CSA	beebsound.cc	/^double CSC[4]={0,0,0,0},CSA[4]={0,0,0,0}; \/\/ ChangeSamps Adjusts$/;"	v
CSC	beebsound.cc	/^double CSC[4]={0,0,0,0},CSA[4]={0,0,0,0}; \/\/ ChangeSamps Adjusts$/;"	v
CSWDataState	csw.cc	/^enum class CSWDataState {$/;"	c	file:
CSWOpen	csw.cc	/^bool CSWOpen = false;$/;"	v
CSWResult	csw.h	/^ enum class CSWResult {$/;"	c
CSWState	csw.h	/^enum class CSWState {$/;"	c
CSW_BUF	csw.cc	/^int CSW_BUF;$/;"	v
CSW_CYCLES	csw.cc	/^int CSW_CYCLES;$/;"	v
CTLMASK	debug.cc	/^#define CTLMASK /;"	d	file:
CTLMASK	debug_org.cc	/^#define CTLMASK /;"	d	file:
CTS	serial.cc	/^unsigned char CTS,RTS,FirstReset=1;$/;"	v
CURRENTHEAD	disc8271.cc	/^#define CURRENTHEAD /;"	d	file:
CWD	Master512CoPro.cc	/^	CBW, CWD,                                       \/\/ SIGN EXTENSION$/;"	e	enum:__anon26	file:
CX	Master512CoPro.h	/^		enum WREGS { AX = 0, CX, DX, BX, SP, BP, SI, DI };$/;"	e	enum:Master512CoPro::WREGS
C_FLAG	Arm.h	/^#define C_FLAG	/;"	d
CapsLock	beebwin.h	/^	bool CapsLock;$/;"	m	struct:LEDType
Carried	6502core.cc	/^INLINE void Carried() {$/;"	f
Carried	tube.cc	/^INLINE void Carried() {$/;"	f
Cass_Relay	serial.cc	/^unsigned char Cass_Relay=0; \/\/ Cassette Relay state$/;"	v
ChangeSamps	beebsound.cc	/^	unsigned int ChangeSamps[4]; \/* How often this channel should flip its otuput *\/$/;"	m	struct:BeebState76489_S	file:
CharLine	video.cc	/^  int CharLine;   \/* 6845 counts in characters vertically - 0 at the top , incs by 1 - -1 means we are in the bit before the actual display starts *\/$/;"	m	struct:__anon4	file:
CheckReady	disc8271.cc	/^static bool CheckReady(void) {$/;"	f	file:
ChipClock	sysvia.cc	/^void ChipClock(int nCycles) {$/;"	f
ChipSelect	beebmem.h	/^	unsigned char ChipSelect;$/;"	m	struct:CMOSType
ClearTrigger	6502core.h	/^#define ClearTrigger(/;"	d
ClickRelay	beebsound.cc	/^void ClickRelay(unsigned char RState) {$/;"	f
Clk_Divide	serial.cc	/^unsigned char Clk_Divide=1; \/\/ Clock divide rate$/;"	v
Close1770Disc	disc1770.cc	/^void Close1770Disc(int Drive)$/;"	f
CloseCSW	csw.cc	/^void CloseCSW(void)$/;"	f
CloseLog	log.cc	/^void CloseLog()$/;"	f
CloseSerialPort	serialdevices.cc	/^void CloseSerialPort(int fileDescriptor)$/;"	f
CloseUEF	serial.cc	/^void CloseUEF(void) {$/;"	f
Command	scsi.cc	/^static void Command(void)$/;"	f	file:
CommandFunc	disc8271.cc	/^typedef void (*CommandFunc)(void);$/;"	t	file:
CommandNum	disc8271.cc	/^  unsigned char CommandNum;$/;"	m	struct:__anon21	file:
CommandPtrFromNumber	disc8271.cc	/^static const PrimaryCommandLookupType *CommandPtrFromNumber(int CommandNumber) {$/;"	f	file:
CommandRegWrite	disc8271.cc	/^static void CommandRegWrite(int Value) {$/;"	f	file:
CommandStatus	disc8271.cc	/^static CommandStatusType CommandStatus;$/;"	v	file:
CommandStatusType	disc8271.cc	/^} CommandStatusType;$/;"	t	typeref:struct:__anon20	file:
CompressFlags	Master512CoPro.cc	/^uint16_t Master512CoPro::CompressFlags() const$/;"	f	class:Master512CoPro
CopyKey	beebwin.cc	/^void BeebWin::CopyKey(int Value)$/;"	f	class:BeebWin
CreateADFSImage	disc1770.cc	/^bool CreateADFSImage(const char *FileName, int Tracks) {$/;"	f
CreateDiscImage	beebwin.cc	/^void BeebWin::CreateDiscImage(const char *FileName, int DriveNum,$/;"	f	class:BeebWin
CreateMyPropertyListFromFile	plist.cc	/^CFPropertyListRef CreateMyPropertyListFromFile( CFURLRef fileURL ) $/;"	f
CurTime	sysvia.cc	/^struct tm * CurTime;$/;"	v	typeref:struct:tm
CurY	video.cc	/^int CurY=-1;$/;"	v
CurrentBit	beebsound.h	/^	char CurrentBit; \/\/ Current bit in data being processed$/;"	m	struct:AudioType
CurrentDisc	disc1770.cc	/^static FILE *CurrentDisc; \/\/ Current Disc Handle$/;"	v	file:
CurrentDiscOpen	disc1770.cc	/^static bool CurrentDiscOpen(void)$/;"	f	file:
CurrentDrive	disc1770.cc	/^static int CurrentDrive = 0; \/\/ FDC Control drive setting$/;"	v	file:
CurrentHead	disc1770.cc	/^static unsigned char CurrentHead[2]; \/\/ Current Head on any drive$/;"	v	file:
CurrentInstruction	6502core.cc	/^static int CurrentInstruction;$/;"	v	file:
CurrentInstruction	tube.cc	/^static int CurrentInstruction;$/;"	v	file:
CurrentLineBottom	video.cc	/^static int CurrentLineBottom=0;$/;"	v	file:
CurrentSector	disc8271.cc	/^  int CurrentSector;$/;"	m	struct:__anon20	file:
CurrentSectorPtr	disc8271.cc	/^  SectorType *CurrentSectorPtr;$/;"	m	struct:__anon20	file:
CurrentTrackPtr	disc8271.cc	/^  TrackType *CurrentTrackPtr;$/;"	m	struct:__anon20	file:
CursorFieldCount	video.cc	/^int CursorFieldCount=32;$/;"	v
CursorOffFields	video.cc	/^unsigned char CursorOnFields,CursorOffFields;$/;"	v
CursorOnFields	video.cc	/^unsigned char CursorOnFields,CursorOffFields;$/;"	v
CursorOnState	video.cc	/^unsigned char CursorOnState=1;$/;"	v
CycleCountT	port.h	/^typedef int CycleCountT;$/;"	t
CycleCountTMax	port.h	/^#define CycleCountTMax /;"	d
CycleCountWrap	port.h	/^#define CycleCountWrap /;"	d
CycleRatio	beebsound.cc	/^double CycleRatio;$/;"	v
Cycles	6502core.cc	/^unsigned int Cycles;$/;"	v
CyclesTable	6502core.cc	/^const int *CyclesTable = CyclesTable6502;$/;"	v
CyclesTable6502	6502core.cc	/^static int CyclesTable6502[]={$/;"	v	file:
CyclesTable65C02	6502core.cc	/^static const int CyclesTable65C02[] = {$/;"	v	file:
CyclesToInt	6502core.cc	/^int CyclesToInt = NO_TIMER_INT_DUE;$/;"	v
CyclesToMemRead	6502core.cc	/^const int *CyclesToMemRead = CyclesToMemRead6502;$/;"	v
CyclesToMemRead6502	6502core.cc	/^static const int CyclesToMemRead6502[]={$/;"	v	file:
CyclesToMemRead65C02	6502core.cc	/^static const int CyclesToMemRead65C02[] = {$/;"	v	file:
CyclesToMemWrite	6502core.cc	/^const int *CyclesToMemWrite = CyclesToMemWrite6502;$/;"	v
CyclesToMemWrite6502	6502core.cc	/^static const int CyclesToMemWrite6502[]={$/;"	v	file:
CyclesToMemWrite65C02	6502core.cc	/^static const int CyclesToMemWrite65C02[] = {$/;"	v	file:
CyclesToSamples	beebsound.cc	/^static double CyclesToSamples(int BeebCycles) {$/;"	f	file:
CylinderNum	disc8271.cc	/^    unsigned int CylinderNum:7;$/;"	m	struct:__anon17::__anon18	file:
DAA	Master512CoPro.cc	/^	DAA, DAS,                                       \/\/ DECIMAL ADJUSTS$/;"	e	enum:__anon26	file:
DAS	Master512CoPro.cc	/^	DAA, DAS,                                       \/\/ DECIMAL ADJUSTS$/;"	e	enum:__anon26	file:
DATA_ABORT_VECTOR	Arm.h	/^#define DATA_ABORT_VECTOR	/;"	d
DCD	serial.cc	/^unsigned char DCD=0,DCDI=1,ODCDI=1,DCDClear=0; \/\/ count to clear DCD bit$/;"	v
DCDClear	serial.cc	/^unsigned char DCD=0,DCDI=1,ODCDI=1,DCDClear=0; \/\/ count to clear DCD bit$/;"	v
DCDI	serial.cc	/^unsigned char DCD=0,DCDI=1,ODCDI=1,DCDClear=0; \/\/ count to clear DCD bit$/;"	v
DEAInstrHandler	6502core.cc	/^INLINE static void DEAInstrHandler(void) {$/;"	f	file:
DEAInstrHandler	tube.cc	/^INLINE static void DEAInstrHandler(void) {$/;"	f	file:
DEBUG_5220	speech.cc	/^#define DEBUG_5220	/;"	d	file:
DEBUG_ECONET	debug.h	/^	DEBUG_ECONET$/;"	e	enum:DebugType
DEBUG_HEADER	debug.h	/^#define DEBUG_HEADER$/;"	d
DEBUG_SERIAL	debug.h	/^	DEBUG_SERIAL,$/;"	e	enum:DebugType
DEBUG_SYSVIA	debug.h	/^	DEBUG_SYSVIA,$/;"	e	enum:DebugType
DEBUG_TUBE	debug.h	/^	DEBUG_TUBE,$/;"	e	enum:DebugType
DEBUG_USERVIA	debug.h	/^	DEBUG_USERVIA,$/;"	e	enum:DebugType
DEBUG_VIDEO	debug.h	/^	DEBUG_VIDEO,$/;"	e	enum:DebugType
DECInstrHandler	6502core.cc	/^INLINE static void DECInstrHandler(int16 address) {$/;"	f	file:
DECInstrHandler	tube.cc	/^INLINE static void DECInstrHandler(int16 address) {$/;"	f	file:
DECLARE_STATE	z80.cc	/^#define DECLARE_STATE(/;"	d	file:
DEFAULTSAMPLERATE	port.h	/^#define DEFAULTSAMPLERATE /;"	d
DEF_ald8	Master512CoPro.cc	/^inline void Master512CoPro::DEF_ald8()$/;"	f	class:Master512CoPro
DEF_ald8	ea.h	/^#define DEF_ald8(/;"	d
DEF_axd16	Master512CoPro.cc	/^inline void Master512CoPro::DEF_axd16()$/;"	f	class:Master512CoPro
DEF_axd16	ea.h	/^#define DEF_axd16(/;"	d
DEF_br8	Master512CoPro.cc	/^inline void Master512CoPro::DEF_br8()$/;"	f	class:Master512CoPro
DEF_br8	ea.h	/^#define DEF_br8(/;"	d
DEF_r16w	Master512CoPro.cc	/^inline void Master512CoPro::DEF_r16w()$/;"	f	class:Master512CoPro
DEF_r16w	ea.h	/^#define DEF_r16w(/;"	d
DEF_r8b	Master512CoPro.cc	/^inline void Master512CoPro::DEF_r8b()$/;"	f	class:Master512CoPro
DEF_r8b	ea.h	/^#define DEF_r8b(/;"	d
DEF_wr16	Master512CoPro.cc	/^inline void Master512CoPro::DEF_wr16()$/;"	f	class:Master512CoPro
DEF_wr16	ea.h	/^#define DEF_wr16(/;"	d
DEST_DECREMENT	Master512CoPro.cc	/^const uint16_t DEST_DECREMENT          = 0x4000;$/;"	v
DEST_INCDEC_MASK	Master512CoPro.cc	/^const uint16_t DEST_INCDEC_MASK        = DEST_DECREMENT | DEST_INCREMENT;$/;"	v
DEST_INCREMENT	Master512CoPro.cc	/^const uint16_t DEST_INCREMENT          = 0x2000;$/;"	v
DEST_MIO	Master512CoPro.cc	/^const uint16_t DEST_MIO                = 0x8000;$/;"	v
DEST_NO_CHANGE	Master512CoPro.cc	/^const uint16_t DEST_NO_CHANGE          = DEST_DECREMENT | DEST_INCREMENT;$/;"	v
DEXInstrHandler	6502core.cc	/^INLINE static void DEXInstrHandler(void) {$/;"	f	file:
DEXInstrHandler	tube.cc	/^INLINE static void DEXInstrHandler(void) {$/;"	f	file:
DFS_DISC_CATALOGUE	discedit.h	/^} DFS_DISC_CATALOGUE;$/;"	t	typeref:struct:__anon23
DFS_FILE_ATTR	discedit.h	/^} DFS_FILE_ATTR;$/;"	t	typeref:struct:__anon22
DFS_LENGTH_TO_SECTORS	discedit.cc	/^#define DFS_LENGTH_TO_SECTORS(/;"	d	file:
DFS_MAX_CAT_SIZE	discedit.h	/^#define DFS_MAX_CAT_SIZE /;"	d
DFS_MAX_NAME_LEN	discedit.h	/^#define DFS_MAX_NAME_LEN /;"	d
DFS_MAX_TITLE_LEN	discedit.h	/^#define DFS_MAX_TITLE_LEN /;"	d
DFS_SECTORS_PER_TRACK	discedit.h	/^#define DFS_SECTORS_PER_TRACK /;"	d
DFS_SECTOR_SIZE	discedit.h	/^#define DFS_SECTOR_SIZE /;"	d
DH	Master512CoPro.h	/^			DH = NATIVE_ENDIAN_VALUE_LE_BE(0x5, 0x4),$/;"	e	enum:Master512CoPro::BREGS
DI	Master512CoPro.h	/^		enum WREGS { AX = 0, CX, DX, BX, SP, BP, SI, DI };$/;"	e	enum:Master512CoPro::WREGS
DIH	Master512CoPro.h	/^			DIH = NATIVE_ENDIAN_VALUE_LE_BE(0xf, 0xe)$/;"	e	enum:Master512CoPro::BREGS
DIL	Master512CoPro.h	/^			DIL = NATIVE_ENDIAN_VALUE_LE_BE(0xe, 0xf),$/;"	e	enum:Master512CoPro::BREGS
DISC	beebwin.cc	/^extern "C" enum FileFilter { DISC, UEF, IFD, KEYBOARD };$/;"	e	enum:FileFilter	file:
DISC1770_HEADER	disc1770.h	/^#define DISC1770_HEADER$/;"	d
DISC8271_HEADER	disc8271.h	/^#define DISC8271_HEADER$/;"	d
DISCTYPE_HEADER	disctype.h	/^#define DISCTYPE_HEADER$/;"	d
DIV_64_64_32	osd_cpu.h	/^#define DIV_64_64_32(/;"	d
DIV_M16	Master512CoPro.cc	/^	DIV_R8, DIV_R16, DIV_M8, DIV_M16,               \/\/ div$/;"	e	enum:__anon26	file:
DIV_M8	Master512CoPro.cc	/^	DIV_R8, DIV_R16, DIV_M8, DIV_M16,               \/\/ div$/;"	e	enum:__anon26	file:
DIV_R16	Master512CoPro.cc	/^	DIV_R8, DIV_R16, DIV_M8, DIV_M16,               \/\/ div$/;"	e	enum:__anon26	file:
DIV_R8	Master512CoPro.cc	/^	DIV_R8, DIV_R16, DIV_M8, DIV_M16,               \/\/ div$/;"	e	enum:__anon26	file:
DIV_U64_U64_U32	osd_cpu.h	/^#define DIV_U64_U64_U32(/;"	d
DL	Master512CoPro.h	/^			DL = NATIVE_ENDIAN_VALUE_LE_BE(0x4, 0x5),$/;"	e	enum:Master512CoPro::BREGS
DOS	disctype.h	/^	DOS  = 4$/;"	m	class:DiscType
DRIVE_CONTROL_SELECT_DENSITY	disc1770.cc	/^const int DRIVE_CONTROL_SELECT_DENSITY = 0x20;$/;"	v
DRIVE_CONTROL_SELECT_DRIVE_0	disc1770.cc	/^const int DRIVE_CONTROL_SELECT_DRIVE_0 = 0x01;$/;"	v
DRIVE_CONTROL_SELECT_DRIVE_1	disc1770.cc	/^const int DRIVE_CONTROL_SELECT_DRIVE_1 = 0x02;$/;"	v
DRIVE_CONTROL_SELECT_SIDE	disc1770.cc	/^const int DRIVE_CONTROL_SELECT_SIDE    = 0x10;$/;"	v
DS	Master512CoPro.h	/^		enum SREGS { ES = 0, CS, SS, DS };$/;"	e	enum:Master512CoPro::SREGS
DSD	disctype.h	/^	DSD  = 1,$/;"	m	class:DiscType
DWriteable	disc1770.cc	/^bool DWriteable[2] = { false, false }; \/\/ Write Protect$/;"	v
DX	Master512CoPro.h	/^		enum WREGS { AX = 0, CX, DX, BX, SP, BP, SI, DI };$/;"	e	enum:Master512CoPro::WREGS
Data	beebsound.h	/^	int Data; \/\/ The actual data itself$/;"	m	struct:AudioType
Data	csw.h	/^    Data,$/;"	m	class:CSWState
Data	disc1770.cc	/^static unsigned char Data = 0;$/;"	v	file:
Data	disc8271.cc	/^  unsigned char *Data;$/;"	m	struct:__anon17	file:
DataPos	disc1770.cc	/^static long DataPos;$/;"	v	file:
DataPtr	video.cc	/^  char *DataPtr;  \/* Pointer into host memory of video data *\/$/;"	m	struct:__anon4	file:
DataReceived	econet.cc	/^    DataReceived = 13,$/;"	m	class:AUNType::FourWayStage	file:
DataReg	disc8271.cc	/^static unsigned char DataReg;$/;"	v	file:
DataSent	econet.cc	/^    DataSent = 3,$/;"	m	class:AUNType::FourWayStage	file:
DataSize	beebwin.h	/^	int DataSize;$/;"	m	class:BeebWin
DataStrobe	beebmem.h	/^	unsigned char DataStrobe;$/;"	m	struct:CMOSType
Data_Bits	serial.cc	/^unsigned char Parity,Stop_Bits,Data_Bits,RIE,TIE; \/\/ Receive Intterrupt Enable$/;"	v
DeactControl	serialdevices.cc	/^void DeactControl(OSType box)$/;"	f
DebugDisassembleCommand	debug.cc	/^int DebugDisassembleCommand(int addr, int count, bool host)$/;"	f
DebugDisassembleInstruction	debug.cc	/^int DebugDisassembleInstruction(int addr, bool host, char *opstr)$/;"	f
DebugDisassembleInstruction	debug_org.cc	/^int DebugDisassembleInstruction(int addr, char *opstr)$/;"	f
DebugDisassembler	debug.cc	/^bool DebugDisassembler(int addr, int Accumulator, int XReg, int YReg, int PSR, bool host)$/;"	f
DebugDisplayInfo	debug.cc	/^void DebugDisplayInfo(const char *info)$/;"	f
DebugDisplayTrace	debug.cc	/^void DebugDisplayTrace(DebugType type, bool host, const char *info)$/;"	f
DebugEnabled	debug.cc	/^int DebugEnabled = false;        \/\/ Debug dialog visible$/;"	v
DebugEnabled	debug_org.cc	/^int DebugEnabled = false;        \/\/ Debug dialog visible$/;"	v
DebugExecuteCommand	debug.cc	/^void DebugExecuteCommand()$/;"	f
DebugHost	debug.cc	/^static bool DebugHost = false;$/;"	v	file:
DebugMemoryDump	debug.cc	/^void DebugMemoryDump(int addr, int count, bool host)$/;"	f
DebugOS	debug.cc	/^static bool DebugOS = false;$/;"	v	file:
DebugOn	debug.cc	/^static int DebugOn = 0;         \/\/ Debugging active?$/;"	v	file:
DebugParasite	debug.cc	/^static bool DebugParasite = false;$/;"	v	file:
DebugROM	debug.cc	/^static bool DebugROM = false;$/;"	v	file:
DebugReadMem	debug.cc	/^int DebugReadMem(int addr, bool host)$/;"	f
DebugReadMem	debug_org.cc	/^int DebugReadMem(int addr)$/;"	f
DebugSysViaState	sysvia.cc	/^void DebugSysViaState()$/;"	f
DebugTubeState	tube.cc	/^void DebugTubeState(void)$/;"	f
DebugType	debug.h	/^enum DebugType {$/;"	g
DebugUserViaState	uservia.cc	/^void DebugUserViaState()$/;"	f
DebugViaState	via.cc	/^void DebugViaState(const char *s, VIAState *v)$/;"	f
DebugVideoState	video.cc	/^void DebugVideoState()$/;"	f
DebugWriteMem	debug.cc	/^void DebugWriteMem(int addr, int data, bool host)$/;"	f
Debug_Z80	z80_support.cc	/^void Debug_Z80()$/;"	f
DecWordReg	Master512CoPro.cc	/^inline void Master512CoPro::DecWordReg(uint8_t reg)$/;"	f	class:Master512CoPro
DefStart	disc1770.cc	/^static unsigned int DefStart[2]; \/\/ Starting point for head 1$/;"	v	file:
Deleted	disc8271.cc	/^  bool Deleted; \/\/ If non-zero the sector is deleted$/;"	m	struct:__anon17	file:
Dis6502	6502core.cc	/^void Dis6502(char *str)$/;"	f
DisAddress	debug.cc	/^static int DisAddress = 0;      \/\/ Next address for disassemble command$/;"	v	file:
Disc0	beebwin.h	/^	bool Disc0;$/;"	m	struct:LEDType
Disc0	disc1770.cc	/^static FILE *Disc0; \/\/ File handlers for the disc drives 0 and 1$/;"	v	file:
Disc1	beebwin.h	/^	bool Disc1;$/;"	m	struct:LEDType
Disc1	disc1770.cc	/^static FILE *Disc1;$/;"	v	file:
Disc1770Enabled	disc1770.cc	/^bool Disc1770Enabled = true;$/;"	v
Disc1770Result	disc1770.h	/^enum class Disc1770Result {$/;"	c
Disc8271Enabled	disc8271.cc	/^bool Disc8271Enabled = true;$/;"	v
Disc8271Poll	disc8271.h	/^#define Disc8271Poll(/;"	d
Disc8271Read	disc8271.cc	/^unsigned char Disc8271Read(int Address) {$/;"	f
Disc8271Reset	disc8271.cc	/^void Disc8271Reset(void) {$/;"	f
Disc8271Trigger	disc8271.cc	/^int Disc8271Trigger; \/* Cycle based time Disc8271Trigger *\/$/;"	v
Disc8271Write	disc8271.cc	/^void Disc8271Write(int Address, unsigned char Value) {$/;"	f
Disc8271_poll_real	disc8271.cc	/^void Disc8271_poll_real(void) {$/;"	f
DiscDriveSoundEnabled	beebsound.cc	/^int DiscDriveSoundEnabled = 0;$/;"	v
DiscFilterProc	GetFile.cc	/^unsigned pascal char DiscFilterProc(AEDesc *theItem, void *info, void *callBackUD, NavFilterModes FilterMode)$/;"	f
DiscFormat	scsi.cc	/^bool DiscFormat(unsigned char *buf)$/;"	f
DiscLedColour	beebwin.cc	/^char DiscLedColour=0; \/\/ 0 for red, 1 for green.$/;"	v
DiscLoaded	beebwin.cc	/^bool DiscLoaded[2]={false,false}; \/\/ Set to TRUE when a disc image has been loaded.$/;"	v
DiscModeSense	scsi.cc	/^static int DiscModeSense(unsigned char *cdb, unsigned char *buf)$/;"	f	file:
DiscRequestSense	scsi.cc	/^static int DiscRequestSense(unsigned char *cdb, unsigned char *buf)$/;"	f	file:
DiscStartStop	scsi.cc	/^static bool DiscStartStop(unsigned char *buf)$/;"	f	file:
DiscStep	disc1770.cc	/^static int DiscStep[2]; \/\/ Single\/Double sided disc step$/;"	v	file:
DiscStore	disc8271.cc	/^TrackType DiscStore[2][2][TRACKSPERDRIVE];$/;"	v
DiscStrt	disc1770.cc	/^static int DiscStrt[2]; \/\/ Single\/Double sided disc start$/;"	v	file:
DiscTestUnitReady	scsi.cc	/^static bool DiscTestUnitReady(unsigned char *buf)$/;"	f	file:
DiscType	disctype.h	/^enum class DiscType : unsigned char {$/;"	c
DiscVerify	scsi.cc	/^static bool DiscVerify(unsigned char *buf)$/;"	f	file:
DiscWriteEnable	disc8271.cc	/^void DiscWriteEnable(int DriveNum, bool WriteEnable) {$/;"	f
DiskDensity	disc1770.cc	/^static bool DiskDensity[2];$/;"	v	file:
Disp_RegSet1	z80_support.cc	/^void Disp_RegSet1(char *str)$/;"	f
Disp_RegSet2	z80_support.cc	/^void Disp_RegSet2(char *str)$/;"	f
DisplayCycles	6502core.cc	/^int DisplayCycles=0;$/;"	v
DisplayTiming	beebwin.cc	/^void BeebWin::DisplayTiming(void)$/;"	f	class:BeebWin
Do128ByteSR_ReadDataAndDeldCommand	disc8271.cc	/^static void Do128ByteSR_ReadDataAndDeldCommand(void) {$/;"	f	file:
Do128ByteSR_ReadDataCommand	disc8271.cc	/^static void Do128ByteSR_ReadDataCommand(void) {$/;"	f	file:
Do128ByteSR_VerifyDataAndDeldCommand	disc8271.cc	/^static void Do128ByteSR_VerifyDataAndDeldCommand(void) {$/;"	f	file:
Do128ByteSR_WriteDataCommand	disc8271.cc	/^static void Do128ByteSR_WriteDataCommand(void) {$/;"	f	file:
Do128ByteSR_WriteDeletedDataCommand	disc8271.cc	/^static void Do128ByteSR_WriteDeletedDataCommand(void) {$/;"	f	file:
DoBadCommand	disc8271.cc	/^static void DoBadCommand(void) {$/;"	f	file:
DoDMA	Master512CoPro.cc	/^void Master512CoPro::DoDMA()$/;"	f	class:Master512CoPro
DoErr	disc8271.cc	/^static void DoErr(unsigned char ErrNum) {$/;"	f	file:
DoFastTable	video.cc	/^static void DoFastTable(void) {$/;"	f	file:
DoFastTable16	video.cc	/^static void DoFastTable16(void) {$/;"	f	file:
DoFastTable16XStep8	video.cc	/^static void DoFastTable16XStep8(void) {$/;"	f	file:
DoFastTable2	video.cc	/^static void DoFastTable2(void) {$/;"	f	file:
DoFastTable2XStep2	video.cc	/^static void DoFastTable2XStep2(void) {$/;"	f	file:
DoFastTable4	video.cc	/^static void DoFastTable4(void) {$/;"	f	file:
DoFastTable4XStep4	video.cc	/^static void DoFastTable4XStep4(void) {$/;"	f	file:
DoFormatCommand	disc8271.cc	/^static void DoFormatCommand(void) {$/;"	f	file:
DoIntCheck	6502core.cc	/^void DoIntCheck(void)$/;"	f
DoInterrupt	6502core.cc	/^void DoInterrupt(void) {$/;"	f
DoKbdIntCheck	sysvia.cc	/^void DoKbdIntCheck() {$/;"	f
DoLoadHead	disc8271.cc	/^static void DoLoadHead(void) {$/;"	f	file:
DoMode7Row	video.cc	/^static void DoMode7Row(void) {$/;"	f	file:
DoNMI	6502core.cc	/^void DoNMI(void) {$/;"	f
DoPageSetup	printing.cc	/^void DoPageSetup(void)$/;"	f
DoReadDriveStatusCommand	disc8271.cc	/^static void DoReadDriveStatusCommand(void) {$/;"	f	file:
DoReadIDCommand	disc8271.cc	/^static void DoReadIDCommand(void) {$/;"	f	file:
DoReadSpecialCommand	disc8271.cc	/^static void DoReadSpecialCommand(void) {$/;"	f	file:
DoRomChange	beebmem.cc	/^static void DoRomChange(int NewBank) {$/;"	f	file:
DoSeekCommand	disc8271.cc	/^static void DoSeekCommand(void) {$/;"	f	file:
DoSelects	disc8271.cc	/^static void DoSelects(void) {$/;"	f	file:
DoSpecifyCommand	disc8271.cc	/^static void DoSpecifyCommand(void) {$/;"	f	file:
DoTubeInterrupt	tube.cc	/^void DoTubeInterrupt(void) {$/;"	f
DoTubeNMI	tube.cc	/^void DoTubeNMI(void) {$/;"	f
DoVarLength_ReadDataAndDeldCommand	disc8271.cc	/^static void DoVarLength_ReadDataAndDeldCommand(void) {$/;"	f	file:
DoVarLength_ReadDataCommand	disc8271.cc	/^static void DoVarLength_ReadDataCommand(void) {$/;"	f	file:
DoVarLength_ScanDataAndDeldCommand	disc8271.cc	/^static void DoVarLength_ScanDataAndDeldCommand(void) {$/;"	f	file:
DoVarLength_ScanDataCommand	disc8271.cc	/^static void DoVarLength_ScanDataCommand(void) {$/;"	f	file:
DoVarLength_VerifyDataAndDeldCommand	disc8271.cc	/^static void DoVarLength_VerifyDataAndDeldCommand(void) {$/;"	f	file:
DoVarLength_WriteDataCommand	disc8271.cc	/^static void DoVarLength_WriteDataCommand(void) {$/;"	f	file:
DoVarLength_WriteDeletedDataCommand	disc8271.cc	/^static void DoVarLength_WriteDeletedDataCommand(void) {$/;"	f	file:
DoWriteSpecialCommand	disc8271.cc	/^static void DoWriteSpecialCommand(void) {$/;"	f	file:
DriveHeadLoaded	disc8271.cc	/^static bool DriveHeadLoaded=false;$/;"	v	file:
DriveHeadMotorUpdate	disc8271.cc	/^static bool DriveHeadMotorUpdate(void) {$/;"	f	file:
DriveHeadPosition	disc8271.cc	/^static int DriveHeadPosition[2]={0};$/;"	v	file:
DriveHeadScheduleUnload	disc8271.cc	/^static void DriveHeadScheduleUnload(void) {$/;"	f	file:
DriveHeadUnloadPending	disc8271.cc	/^static bool DriveHeadUnloadPending=false;$/;"	v	file:
DscFileNames	disc1770.cc	/^static char DscFileNames[2][256];$/;"	v	file:
DscType	disc1770.cc	/^static DiscType DscType[2];$/;"	v	file:
DumpAddress	debug.cc	/^static int DumpAddress = 0;     \/\/ Next address for memory dump command$/;"	v	file:
DumpAfterEach	main.cc	/^int DumpAfterEach=0;$/;"	v
DumpRegs	6502core.cc	/^void DumpRegs(void) {$/;"	f
DumpScreen	beebwin.cc	/^void BeebWin::DumpScreen(int offset)$/;"	f	class:BeebWin
DumpSound	beebsound.cc	/^void DumpSound(void) {$/;"	f
EA	ea.h	/^static unsigned EA;$/;"	v
EA_000	ea.h	/^static unsigned EA_000(void) { i86_ICount-=7; EO=(WORD)(I.regs.w[BX]+I.regs.w[SI]); EA=DefaultBase(DS)+EO; return EA; }$/;"	f
EA_001	ea.h	/^static unsigned EA_001(void) { i86_ICount-=8; EO=(WORD)(I.regs.w[BX]+I.regs.w[DI]); EA=DefaultBase(DS)+EO; return EA; }$/;"	f
EA_002	ea.h	/^static unsigned EA_002(void) { i86_ICount-=8; EO=(WORD)(I.regs.w[BP]+I.regs.w[SI]); EA=DefaultBase(SS)+EO; return EA; }$/;"	f
EA_003	ea.h	/^static unsigned EA_003(void) { i86_ICount-=7; EO=(WORD)(I.regs.w[BP]+I.regs.w[DI]); EA=DefaultBase(SS)+EO; return EA; }$/;"	f
EA_004	ea.h	/^static unsigned EA_004(void) { i86_ICount-=5; EO=I.regs.w[SI]; EA=DefaultBase(DS)+EO; return EA; }$/;"	f
EA_005	ea.h	/^static unsigned EA_005(void) { i86_ICount-=5; EO=I.regs.w[DI]; EA=DefaultBase(DS)+EO; return EA; }$/;"	f
EA_006	ea.h	/^static unsigned EA_006(void) { i86_ICount-=6; EO=FETCHOP; EO+=FETCHOP<<8; EA=DefaultBase(DS)+EO; return EA; }$/;"	f
EA_007	ea.h	/^static unsigned EA_007(void) { i86_ICount-=5; EO=I.regs.w[BX]; EA=DefaultBase(DS)+EO; return EA; }$/;"	f
EA_100	ea.h	/^static unsigned EA_100(void) { i86_ICount-=11; EO=(WORD)(I.regs.w[BX]+I.regs.w[SI]+(INT8)FETCHOP); EA=DefaultBase(DS)+EO; return EA; }$/;"	f
EA_101	ea.h	/^static unsigned EA_101(void) { i86_ICount-=12; EO=(WORD)(I.regs.w[BX]+I.regs.w[DI]+(INT8)FETCHOP); EA=DefaultBase(DS)+EO; return EA; }$/;"	f
EA_102	ea.h	/^static unsigned EA_102(void) { i86_ICount-=12; EO=(WORD)(I.regs.w[BP]+I.regs.w[SI]+(INT8)FETCHOP); EA=DefaultBase(SS)+EO; return EA; }$/;"	f
EA_103	ea.h	/^static unsigned EA_103(void) { i86_ICount-=11; EO=(WORD)(I.regs.w[BP]+I.regs.w[DI]+(INT8)FETCHOP); EA=DefaultBase(SS)+EO; return EA; }$/;"	f
EA_104	ea.h	/^static unsigned EA_104(void) { i86_ICount-=9; EO=(WORD)(I.regs.w[SI]+(INT8)FETCHOP); EA=DefaultBase(DS)+EO; return EA; }$/;"	f
EA_105	ea.h	/^static unsigned EA_105(void) { i86_ICount-=9; EO=(WORD)(I.regs.w[DI]+(INT8)FETCHOP); EA=DefaultBase(DS)+EO; return EA; }$/;"	f
EA_106	ea.h	/^static unsigned EA_106(void) { i86_ICount-=9; EO=(WORD)(I.regs.w[BP]+(INT8)FETCHOP); EA=DefaultBase(SS)+EO; return EA; }$/;"	f
EA_107	ea.h	/^static unsigned EA_107(void) { i86_ICount-=9; EO=(WORD)(I.regs.w[BX]+(INT8)FETCHOP); EA=DefaultBase(DS)+EO; return EA; }$/;"	f
EA_200	ea.h	/^static unsigned EA_200(void) { i86_ICount-=11; EO=FETCHOP; EO+=FETCHOP<<8; EO+=I.regs.w[BX]+I.regs.w[SI]; EA=DefaultBase(DS)+(WORD)EO; return EA; }$/;"	f
EA_201	ea.h	/^static unsigned EA_201(void) { i86_ICount-=12; EO=FETCHOP; EO+=FETCHOP<<8; EO+=I.regs.w[BX]+I.regs.w[DI]; EA=DefaultBase(DS)+(WORD)EO; return EA; }$/;"	f
EA_202	ea.h	/^static unsigned EA_202(void) { i86_ICount-=12; EO=FETCHOP; EO+=FETCHOP<<8; EO+=I.regs.w[BP]+I.regs.w[SI]; EA=DefaultBase(SS)+(WORD)EO; return EA; }$/;"	f
EA_203	ea.h	/^static unsigned EA_203(void) { i86_ICount-=11; EO=FETCHOP; EO+=FETCHOP<<8; EO+=I.regs.w[BP]+I.regs.w[DI]; EA=DefaultBase(SS)+(WORD)EO; return EA; }$/;"	f
EA_204	ea.h	/^static unsigned EA_204(void) { i86_ICount-=9; EO=FETCHOP; EO+=FETCHOP<<8; EO+=I.regs.w[SI]; EA=DefaultBase(DS)+(WORD)EO; return EA; }$/;"	f
EA_205	ea.h	/^static unsigned EA_205(void) { i86_ICount-=9; EO=FETCHOP; EO+=FETCHOP<<8; EO+=I.regs.w[DI]; EA=DefaultBase(DS)+(WORD)EO; return EA; }$/;"	f
EA_206	ea.h	/^static unsigned EA_206(void) { i86_ICount-=9; EO=FETCHOP; EO+=FETCHOP<<8; EO+=I.regs.w[BP]; EA=DefaultBase(SS)+(WORD)EO; return EA; }$/;"	f
EA_207	ea.h	/^static unsigned EA_207(void) { i86_ICount-=9; EO=FETCHOP; EO+=FETCHOP<<8; EO+=I.regs.w[BX]; EA=DefaultBase(DS)+(WORD)EO; return EA; }$/;"	f
ECOLAN	econet.cc	/^struct ECOLAN {							\/\/ what we we need to find a beeb?$/;"	s	class:AUNType::FourWayStage	file:
ECONET_HEADER	econet.h	/^#define ECONET_HEADER$/;"	d
EDCAddr	beebmem.cc	/^int EDCAddr; \/\/ Drive control location$/;"	v
EFDCAddr	beebmem.cc	/^int EFDCAddr; \/\/ 1770 FDC location$/;"	v
EM7Font	video.cc	/^static unsigned int EM7Font[3][96][20]; \/\/ 20 rows to account for "half pixels"$/;"	v	file:
ENABLE_LOG	disc8271.cc	/^#define ENABLE_LOG /;"	d	file:
ENDIANNESS_BIG	Master512CoPro.h	/^	ENDIANNESS_BIG$/;"	e	enum:endianness_t
ENDIANNESS_LITTLE	Master512CoPro.h	/^	ENDIANNESS_LITTLE,$/;"	e	enum:endianness_t
ENDIANNESS_NATIVE	Master512CoPro.h	/^const endianness_t ENDIANNESS_NATIVE = ENDIANNESS_LITTLE;$/;"	v
ENDIAN_VALUE_LE_BE	Master512CoPro.h	/^#define ENDIAN_VALUE_LE_BE(/;"	d
ENTER0	Master512CoPro.cc	/^	ENTER0, ENTER1, ENTER_BASE, ENTER_COUNT, LEAVE, \/\/ (80186) enter\/leave$/;"	e	enum:__anon26	file:
ENTER1	Master512CoPro.cc	/^	ENTER0, ENTER1, ENTER_BASE, ENTER_COUNT, LEAVE, \/\/ (80186) enter\/leave$/;"	e	enum:__anon26	file:
ENTER_BASE	Master512CoPro.cc	/^	ENTER0, ENTER1, ENTER_BASE, ENTER_COUNT, LEAVE, \/\/ (80186) enter\/leave$/;"	e	enum:__anon26	file:
ENTER_COUNT	Master512CoPro.cc	/^	ENTER0, ENTER1, ENTER_BASE, ENTER_COUNT, LEAVE, \/\/ (80186) enter\/leave$/;"	e	enum:__anon26	file:
EO	ea.h	/^static UINT16 EO; \/* HJB 12\/13\/98 effective offset of the address (before segment is added) *\/$/;"	v
EORInstrHandler	6502core.cc	/^INLINE static void EORInstrHandler(int16 operand) {$/;"	f	file:
EORInstrHandler	tube.cc	/^INLINE static void EORInstrHandler(int16 operand) {$/;"	f	file:
EP_DELAY	serialdevices.cc	/^#define EP_DELAY	/;"	d	file:
ES	Master512CoPro.h	/^		enum SREGS { ES = 0, CS, SS, DS };$/;"	e	enum:Master512CoPro::SREGS
ETHERNET_BUFFER_SIZE	econet.cc	/^const int ETHERNET_BUFFER_SIZE = 65536;$/;"	m	class:AUNType::FourWayStage	file:
EXCEPTION	Master512CoPro.cc	/^	EXCEPTION, IRET,                                \/\/ EXCEPTION, iret$/;"	e	enum:__anon26	file:
Econet4Wtrigger	econet.cc	/^static int Econet4Wtrigger;$/;"	m	class:AUNType::FourWayStage	file:
EconetCfgPath	econet.cc	/^char EconetCfgPath[512];                \/\/ where's my config file saved?$/;"	m	class:AUNType::FourWayStage	file:
EconetEnabled	econet.cc	/^bool EconetEnabled;							\/\/ Enable hardware$/;"	v
EconetError	econet.cc	/^void EconetError(const char *errstr)$/;"	f	class:AUNType::FourWayStage	file:
EconetFlagFillTimeout	econet.cc	/^int EconetFlagFillTimeout = 500000;     \/\/ Cycles for flag fill timeout$/;"	m	class:AUNType::FourWayStage	file:
EconetFlagFillTimeoutTrigger	econet.cc	/^int EconetFlagFillTimeoutTrigger;       \/\/ Trigger point for flag fill$/;"	m	class:AUNType::FourWayStage	file:
EconetListenIP	econet.cc	/^static unsigned long EconetListenIP = 0x0100007f;$/;"	v	file:
EconetListenPort	econet.cc	/^unsigned int EconetListenPort = 0;		\/\/ default Listen port$/;"	v
EconetNMIenabled	econet.cc	/^bool EconetNMIenabled;						\/\/ 68B54 -> NMI enabled. (IC97)$/;"	v
EconetPacket	econet.cc	/^struct EconetPacket$/;"	s	class:AUNType::FourWayStage	file:
EconetPoll	econet.cc	/^bool EconetPoll(void) {		\/\/return NMI status$/;"	f	class:AUNType::FourWayStage	file:
EconetPoll_real	econet.cc	/^bool EconetPoll_real(void) {		\/\/return NMI status$/;"	f	class:AUNType::FourWayStage	file:
EconetReset	econet.cc	/^void EconetReset(void) {$/;"	f	class:AUNType::FourWayStage	file:
EconetRx	econet.cc	/^static EthernetPacket EconetRx;$/;"	m	class:AUNType::FourWayStage	file:
EconetSCACKtimeout	econet.cc	/^static int EconetSCACKtimeout = 500; \/\/ Cycles to delay before sending ack to scout (aun mode only)$/;"	m	class:AUNType::FourWayStage	file:
EconetSCACKtrigger	econet.cc	/^static int EconetSCACKtrigger; \/\/ Trigger point for scout ack$/;"	m	class:AUNType::FourWayStage	file:
EconetStateChanged	econet.cc	/^bool EconetStateChanged = false;$/;"	v
EconetStationNumber	econet.cc	/^unsigned char EconetStationNumber = 0;	\/\/ default Station Number$/;"	v
EconetTrigger	econet.cc	/^int EconetTrigger;							\/\/ Poll timer$/;"	v
EconetTx	econet.cc	/^static EthernetPacket EconetTx;$/;"	m	class:AUNType::FourWayStage	file:
EightByteType	port.h	/^typedef __int64 EightByteType;	\/\/ $NRM for MSVC. Will it work though?$/;"	t
EightByteType	port.h	/^typedef long long EightByteType;$/;"	t
EightUChars	beebwin.h	/^} EightUChars;$/;"	t	typeref:union:__anon10
Eject8271DiscImage	disc8271.cc	/^void Eject8271DiscImage(int DriveNum) {$/;"	f
EjectDiscImage	beebwin.cc	/^void BeebWin::EjectDiscImage(int Drive) {$/;"	f	class:BeebWin
EnableTube	tube.cc	/^unsigned char TubeEnabled,Tube186Enabled,AcornZ80,EnableTube;$/;"	v
Enable_Arm	Arm.cc	/^int Enable_Arm = 0;$/;"	v
Enable_Z80	z80_support.cc	/^int Enable_Z80 = 0;$/;"	v
Enabled	beebmem.h	/^	unsigned char Enabled;$/;"	m	struct:CMOSType
Enabled	beebsound.h	/^	bool Enabled; \/\/ Enable state of audio deooder$/;"	m	struct:AudioType
EthernetPacket	econet.cc	/^struct EthernetPacket$/;"	s	class:AUNType::FourWayStage	file:
EthernetPortClose	serialdevices.cc	/^void EthernetPortClose(void)$/;"	f
EthernetPortEnabled	serialdevices.cc	/^unsigned char EthernetPortEnabled;$/;"	v
EthernetPortGet	serialdevices.cc	/^unsigned char EthernetPortGet(void)$/;"	f
EthernetPortOpen	serialdevices.cc	/^void EthernetPortOpen(void)$/;"	f
EthernetPortPoll	serialdevices.cc	/^bool EthernetPortPoll(void)$/;"	f
EthernetPortRead	serialdevices.cc	/^unsigned char EthernetPortRead(void)$/;"	f
EthernetPortStore	serialdevices.cc	/^void EthernetPortStore(unsigned char data)$/;"	f
EthernetPortWrite	serialdevices.cc	/^void EthernetPortWrite(unsigned char data)$/;"	f
Exec6502Instruction	6502core.cc	/^void Exec6502Instruction(void) {$/;"	f
Exec65C02Instruction	tube.cc	/^void Exec65C02Instruction(void) {$/;"	f
Execute	Master512CoPro.cc	/^void Master512CoPro::Execute(int Cycles)$/;"	f	class:Master512CoPro
Execute	scsi.cc	/^static void Execute(void)$/;"	f	file:
ExpandFlags	Master512CoPro.cc	/^void Master512CoPro::ExpandFlags(uint16_t f)$/;"	f	class:Master512CoPro
ExportDiscFiles	beebwin.cc	/^void BeebWin::ExportDiscFiles(int menuId)$/;"	f	class:BeebWin
ExtControl	disc1770.cc	/^static unsigned char ExtControl; \/\/ FDC External Control Register$/;"	v	file:
FALSE	TarmacGlobals.h	/^#define FALSE	/;"	d
FALSE	common.h	/^#define FALSE /;"	d
FALSE	z80_support.cc	/^#define FALSE /;"	d	file:
FASTREG	z80mem.h	/^typedef unsigned int	FASTREG;$/;"	t
FASTREG	z80mem.h	/^typedef unsigned long	FASTREG;$/;"	t
FASTWORK	z80mem.h	/^typedef unsigned int	FASTWORK;$/;"	t
FASTWORK	z80mem.h	/^typedef unsigned long	FASTWORK;$/;"	t
FAST_INTERRUPT_REQUEST_VECTOR	Arm.h	/^#define FAST_INTERRUPT_REQUEST_VECTOR	/;"	d
FB	beebsound.cc	/^		unsigned int FB:1; \/* =0 for periodic, =1 for white *\/$/;"	m	struct:BeebState76489_S::__anon27	file:
FDCType	beebmem.cc	/^int FDCType;$/;"	v
FDCommand	disc1770.cc	/^static unsigned char FDCommand = 0;$/;"	v	file:
FIFO_SIZE	speech.h	/^#define FIFO_SIZE /;"	d
FIQ_MODE	Arm.h	/^#define FIQ_MODE	/;"	d
FLAG_C	z80.h	/^#define FLAG_C	/;"	d
FLAG_H	z80.h	/^#define FLAG_H	/;"	d
FLAG_N	z80.h	/^#define FLAG_N	/;"	d
FLAG_OPS	Master512CoPro.cc	/^	FLAG_OPS, LAHF, SAHF,                           \/\/ FLAG OPERATIONS$/;"	e	enum:__anon26	file:
FLAG_P	z80.h	/^#define FLAG_P	/;"	d
FLAG_S	z80.h	/^#define FLAG_S	/;"	d
FLAG_Z	z80.h	/^#define FLAG_Z	/;"	d
FORK	debug.cc	/^#define FORK /;"	d	file:
FORK	debug_org.cc	/^#define FORK /;"	d	file:
FRAC_BITS	speech.h	/^#define FRAC_BITS	/;"	d
FRAC_MASK	speech.h	/^#define FRAC_MASK	/;"	d
FRAC_ONE	speech.h	/^#define FRAC_ONE	/;"	d
FRAM	beebmem.cc	/^unsigned char Sh_Display,Sh_CPUX,Sh_CPUE,PRAM,FRAM;$/;"	v
FSRam	beebmem.cc	/^unsigned char FSRam[8192]; \/\/ 8K Filing System RAM$/;"	v
F_FLAG	Arm.h	/^#define F_FLAG	/;"	d
FastTable	video.cc	/^EightUChars FastTable[256];$/;"	v
FastTableDWidth	video.cc	/^SixteenUChars FastTableDWidth[256]; \/* For mode 4,5,6 *\/$/;"	v
FastTable_Valid	video.cc	/^int FastTable_Valid=0;$/;"	v
FiddleACCCON	beebmem.cc	/^static void FiddleACCCON(unsigned char newValue) {$/;"	f	file:
FileFilter	beebwin.cc	/^extern "C" enum FileFilter { DISC, UEF, IFD, KEYBOARD };$/;"	g	file:
FileNames	disc8271.cc	/^static char FileNames[2][256];$/;"	v	file:
FirstPixmapLine	video.cc	/^  int FirstPixmapLine; \/* The first pixmap line where something is visible.  Used to eliminate the $/;"	m	struct:__anon4	file:
FirstReset	serial.cc	/^unsigned char CTS,RTS,FirstReset=1;$/;"	v
FirstWriteInt	disc8271.cc	/^static bool FirstWriteInt; \/\/ Indicates the start of a write operation $/;"	v	file:
FlagB	6502core.h	/^	FlagB=16,$/;"	e	enum:PSR_Flags
FlagB	debug_org.cc	/^  FlagB=16,$/;"	e	enum:PSRFlags	file:
FlagC	6502core.h	/^	FlagC=1,$/;"	e	enum:PSR_Flags
FlagC	debug_org.cc	/^  FlagC=1,$/;"	e	enum:PSRFlags	file:
FlagD	6502core.h	/^	FlagD=8,$/;"	e	enum:PSR_Flags
FlagD	debug_org.cc	/^  FlagD=8,$/;"	e	enum:PSRFlags	file:
FlagFillActive	econet.cc	/^static bool FlagFillActive;                    \/\/ Flag fill state$/;"	m	class:AUNType::FourWayStage	file:
FlagI	6502core.h	/^	FlagI=4,$/;"	e	enum:PSR_Flags
FlagI	debug_org.cc	/^  FlagI=4,$/;"	e	enum:PSRFlags	file:
FlagN	6502core.h	/^	FlagN=128$/;"	e	enum:PSR_Flags
FlagN	debug_org.cc	/^  FlagN=128$/;"	e	enum:PSRFlags	file:
FlagV	6502core.h	/^	FlagV=64,$/;"	e	enum:PSR_Flags
FlagV	debug_org.cc	/^  FlagV=64,$/;"	e	enum:PSRFlags	file:
FlagZ	6502core.h	/^	FlagZ=2,$/;"	e	enum:PSR_Flags
FlagZ	debug_org.cc	/^  FlagZ=2,$/;"	e	enum:PSRFlags	file:
Format	scsi.cc	/^static void Format(void)$/;"	f	file:
FormatBuffer	disc1770.cc	/^static unsigned char FormatBuffer[2048];$/;"	v	file:
FormatCount	disc1770.cc	/^static unsigned int FormatCount = 0;$/;"	v	file:
FormatInterrupt	disc8271.cc	/^static void FormatInterrupt(void) {$/;"	f	file:
FormatPtr	disc1770.cc	/^static unsigned char *FormatPtr;$/;"	v	file:
FormatSize	disc1770.cc	/^static unsigned int FormatSize = 0;$/;"	v	file:
FormatState	disc1770.cc	/^static unsigned char FormatState = 0;$/;"	v	file:
FourWayStage	econet.cc	/^enum class FourWayStage {$/;"	c	class:AUNType	file:
FourWayStageTimeout	econet.cc	/^static unsigned int FourWayStageTimeout = 500000;$/;"	v	file:
FrameNum	video.cc	/^static int FrameNum=0;$/;"	v	file:
FreeDiscImage	disc8271.cc	/^void FreeDiscImage(int DriveNum) {$/;"	f
Freq	beebsound.cc	/^		unsigned int Freq:2; \/* 0=low, 1=medium, 2=high, 3=tone gen 1 freq *\/$/;"	m	struct:BeebState76489_S::__anon27	file:
GETBFLAG	6502core.cc	/^#define GETBFLAG /;"	d	file:
GETBFLAG	tube.cc	/^#define GETBFLAG /;"	d	file:
GETCFLAG	6502core.cc	/^#define GETCFLAG /;"	d	file:
GETCFLAG	tube.cc	/^#define GETCFLAG /;"	d	file:
GETDFLAG	6502core.cc	/^#define GETDFLAG /;"	d	file:
GETDFLAG	tube.cc	/^#define GETDFLAG /;"	d	file:
GETIFLAG	6502core.cc	/^#define GETIFLAG /;"	d	file:
GETIFLAG	tube.cc	/^#define GETIFLAG /;"	d	file:
GETNFLAG	6502core.cc	/^#define GETNFLAG /;"	d	file:
GETNFLAG	tube.cc	/^#define GETNFLAG /;"	d	file:
GETTWOBYTEFROMPC	6502core.cc	/^#define GETTWOBYTEFROMPC(/;"	d	file:
GETTWOBYTEFROMPC	tube.cc	/^#define GETTWOBYTEFROMPC(/;"	d	file:
GETVFLAG	6502core.cc	/^#define GETVFLAG /;"	d	file:
GETVFLAG	tube.cc	/^#define GETVFLAG /;"	d	file:
GETZFLAG	6502core.cc	/^#define GETZFLAG /;"	d	file:
GETZFLAG	tube.cc	/^#define GETZFLAG /;"	d	file:
GREEN	beebwin.h	/^	enum PaletteType { RGB, BW, AMBER, GREEN } palette_type;$/;"	e	enum:BeebWin::PaletteType
Gap1Size	disc8271.cc	/^  int Gap1Size,Gap3Size,Gap5Size; \/* From format command *\/$/;"	m	struct:__anon19	file:
Gap3Size	disc8271.cc	/^  int Gap1Size,Gap3Size,Gap5Size; \/* From format command *\/$/;"	m	struct:__anon19	file:
Gap5Size	disc8271.cc	/^  int Gap1Size,Gap3Size,Gap5Size; \/* From format command *\/$/;"	m	struct:__anon19	file:
GenIndex	beebsound.cc	/^static unsigned int GenIndex[4]; \/* Used by the voice generators *\/$/;"	v	file:
GenState	beebsound.cc	/^static int GenState[4];$/;"	v	file:
Get1770DiscInfo	disc1770.cc	/^void Get1770DiscInfo(int DscDrive, DiscType *Type, char *pFileName)$/;"	f
Get8271DiscInfo	disc8271.cc	/^void Get8271DiscInfo(int DriveNum, char *pFileName, int *Heads)$/;"	f
GetBYTE	z80mem.h	/^#define GetBYTE(/;"	d
GetBYTE_mm	z80mem.h	/^#define GetBYTE_mm(/;"	d
GetBYTE_pp	z80mem.h	/^#define GetBYTE_pp(/;"	d
GetCheckBoxValue	debug.cc	/^int GetCheckBoxValue(OSType box)$/;"	f
GetDictNum	plist.cc	/^int GetDictNum(CFMutableDictionaryRef dict, CFStringRef key, int Default)$/;"	f
GetDictString	plist.cc	/^void GetDictString(CFMutableDictionaryRef dict, CFStringRef key, char *value, char *Default)$/;"	f
GetDriveControl	beebwin.cc	/^unsigned char BeebWin::GetDriveControl(void)$/;"	f	class:BeebWin
GetEA	ea.h	/^static unsigned (*GetEA[192])(void)={$/;"	v
GetEPText	serialdevices.cc	/^void GetEPText(OSType box, char *text)$/;"	f
GetEPValue	serialdevices.cc	/^int GetEPValue(OSType box)$/;"	f
GetFirqReg	Arm.cc	/^Reg CArm::GetFirqReg(int reg)$/;"	f	class:CArm
GetIrqReg	Arm.cc	/^Reg CArm::GetIrqReg(int reg)$/;"	f	class:CArm
GetKeysUsed	userkybd.cc	/^void GetKeysUsed( char *Keys )$/;"	f
GetLinePtr	beebwin.cc	/^EightUChars *BeebWin::GetLinePtr(int y) $/;"	f	class:BeebWin
GetLinePtr16	beebwin.cc	/^SixteenUChars *BeebWin::GetLinePtr16(int y) $/;"	f	class:BeebWin
GetMemB	Master512CoPro.cc	/^inline uint8_t Master512CoPro::GetMemB(int seg, uint16_t offset)$/;"	f	class:Master512CoPro
GetMemW	Master512CoPro.cc	/^inline uint16_t Master512CoPro::GetMemW(int seg, uint16_t offset)$/;"	f	class:Master512CoPro
GetMode	Arm.cc	/^int CArm::GetMode()$/;"	f	class:CArm
GetOneFileWithPreview	GetFile.cc	/^OSErr GetOneFileWithPreview (char *path, NavObjectFilterUPP myFilterProc)$/;"	f
GetRMByte	Master512CoPro.cc	/^inline uint8_t Master512CoPro::GetRMByte()$/;"	f	class:Master512CoPro
GetRMByte	ea.h	/^#define GetRMByte(/;"	d
GetRMByteOffset	ea.h	/^#define GetRMByteOffset(/;"	d
GetRMWord	Master512CoPro.cc	/^inline uint16_t Master512CoPro::GetRMWord()$/;"	f	class:Master512CoPro
GetRMWord	ea.h	/^#define GetRMWord(/;"	d
GetRMWordOffset	ea.h	/^#define GetRMWordOffset(/;"	d
GetReg	Arm.cc	/^Reg CArm::GetReg(int reg)$/;"	f	class:CArm
GetSectorPtr	disc8271.cc	/^static SectorType *GetSectorPtr(const TrackType *Track, int LogicalSectorID, bool FindDeleted) {$/;"	f	file:
GetSelectedDrive	disc8271.cc	/^static int GetSelectedDrive() {$/;"	f	file:
GetSvcReg	Arm.cc	/^Reg CArm::GetSvcReg(int reg)$/;"	f	class:CArm
GetTickCount	beebwin.cc	/^unsigned long BeebWin::GetTickCount(void)$/;"	f	class:BeebWin
GetTrackPtr	disc8271.cc	/^static TrackType *GetTrackPtr(int LogicalTrackID) {$/;"	f	file:
GetUserReg	Arm.cc	/^Reg CArm::GetUserReg(int reg)$/;"	f	class:CArm
GetUserRegister	Arm.cc	/^Reg CArm::GetUserRegister(unsigned int reg)$/;"	f	class:CArm
GetValue	uservia.cc	/^int GetValue(OSType box)$/;"	f
GetVol	beebsound.cc	/^int GetVol(int vol) {$/;"	f
GetWORD	z80mem.h	/^#define GetWORD(/;"	d
GetnextRMWord	Master512CoPro.cc	/^inline uint16_t Master512CoPro::GetnextRMWord()$/;"	f	class:Master512CoPro
GetnextRMWord	ea.h	/^#define GetnextRMWord /;"	d
HDisc	beebwin.h	/^	bool HDisc[4];$/;"	m	struct:LEDType
HI32_32_64	osd_cpu.h	/^#define HI32_32_64(/;"	d
HI32_U32_U64	osd_cpu.h	/^#define HI32_U32_U64(/;"	d
HLT	Master512CoPro.cc	/^	HLT, LOAD_PTR, LEA, NOP, WAIT, XLAT,            \/\/ MISC$/;"	e	enum:__anon26	file:
HStart	video.cc	/^int VStart,HStart;$/;"	v
HSyncModifier	video.cc	/^unsigned char HSyncModifier=9;$/;"	v
HandleCommand	beebwin.cc	/^OSStatus BeebWin::HandleCommand(UInt32 cmdID)$/;"	f	class:BeebWin
HandleData	serial.cc	/^void HandleData(unsigned char AData) {$/;"	f
HandleNavEvent	GetFile.cc	/^PASCAL_RTN void HandleNavEvent(NavEventCallbackMessage theCallBackSelector, NavCBRecPtr theCallBackParms, void *theCallBackUD)$/;"	f
HeadDir	disc1770.cc	/^static bool HeadDir = true; \/\/ Head Movement direction - true to step in, false to step out$/;"	v	file:
HeadLoadTime	disc8271.cc	/^static int HeadLoadTime; \/\/ In 8ms steps$/;"	v	file:
HeadLoaded	disc1770.cc	/^static bool HeadLoaded[2] = { false, false };$/;"	v	file:
HeadNum	disc8271.cc	/^    unsigned int HeadNum:1;$/;"	m	struct:__anon17::__anon18	file:
HeadPos	disc1770.cc	/^static long HeadPos[2]; \/\/ Position of Head on each drive for swapping$/;"	v	file:
HeadSettlingTime	disc8271.cc	/^static int HeadSettlingTime; \/\/ In 2ms steps$/;"	v	file:
HexDump	csw.cc	/^void HexDump(const char *buff, int count)$/;"	f
HidAdd	beebmem.cc	/^int HidAdd=0;$/;"	v
Hidden	beebmem.cc	/^unsigned char Hidden[256];$/;"	v
HiddenDefault	beebmem.cc	/^unsigned char HiddenDefault[31] = {0,0,0,0,0,0,2,1,1,0,0xe0,0x8e,0,0,0,0,0,0,0,$/;"	v
HideMenuEnabled	beebwin.cc	/^unsigned char HideMenuEnabled;$/;"	v
I8086_FETCH	Master512CoPro.h	/^			I8086_FETCH,$/;"	e	enum:Master512CoPro::__anon13
I8086_NONE	Master512CoPro.h	/^			I8086_NONE$/;"	e	enum:Master512CoPro::__anon13
I8086_READ	Master512CoPro.h	/^			I8086_READ,$/;"	e	enum:Master512CoPro::__anon13
I8086_WRITE	Master512CoPro.h	/^			I8086_WRITE,$/;"	e	enum:Master512CoPro::__anon13
IC32State	sysvia.cc	/^unsigned char IC32State=0;$/;"	v
IC32Write	sysvia.cc	/^static void IC32Write(unsigned char Value) {$/;"	f	file:
IDC_DEBUGBPS	defines.h	/^#define IDC_DEBUGBPS /;"	d
IDC_DEBUGBREAK	defines.h	/^#define IDC_DEBUGBREAK /;"	d
IDC_DEBUGBREAKPOINTS	defines.h	/^#define IDC_DEBUGBREAKPOINTS /;"	d
IDC_DEBUGCOMMAND	defines.h	/^#define IDC_DEBUGCOMMAND /;"	d
IDC_DEBUGEXECUTE	defines.h	/^#define IDC_DEBUGEXECUTE /;"	d
IDC_DEBUGHOST	defines.h	/^#define IDC_DEBUGHOST /;"	d
IDC_DEBUGINFO	defines.h	/^#define IDC_DEBUGINFO /;"	d
IDC_DEBUGOS	defines.h	/^#define IDC_DEBUGOS /;"	d
IDC_DEBUGPARASITE	defines.h	/^#define IDC_DEBUGPARASITE /;"	d
IDC_DEBUGRESTART	defines.h	/^#define IDC_DEBUGRESTART /;"	d
IDC_DEBUGROM	defines.h	/^#define IDC_DEBUGROM /;"	d
IDC_DEBUGSERIAL	defines.h	/^#define IDC_DEBUGSERIAL /;"	d
IDC_DEBUGSERIALBRK	defines.h	/^#define IDC_DEBUGSERIALBRK /;"	d
IDC_DEBUGSYSVIA	defines.h	/^#define IDC_DEBUGSYSVIA /;"	d
IDC_DEBUGSYSVIABRK	defines.h	/^#define IDC_DEBUGSYSVIABRK /;"	d
IDC_DEBUGTUBE	defines.h	/^#define IDC_DEBUGTUBE /;"	d
IDC_DEBUGTUBEBRK	defines.h	/^#define IDC_DEBUGTUBEBRK /;"	d
IDC_DEBUGUSERVIA	defines.h	/^#define IDC_DEBUGUSERVIA /;"	d
IDC_DEBUGUSERVIABRK	defines.h	/^#define IDC_DEBUGUSERVIABRK /;"	d
IDC_DEBUGVIDEO	defines.h	/^#define IDC_DEBUGVIDEO /;"	d
IDC_DEBUGVIDEOBRK	defines.h	/^#define IDC_DEBUGVIDEOBRK /;"	d
IDC_TCEJECT	defines.h	/^#define IDC_TCEJECT /;"	d
IDC_TCMAP	defines.h	/^#define IDC_TCMAP /;"	d
IDC_TCPLAY	defines.h	/^#define IDC_TCPLAY /;"	d
IDC_TCRECORD	defines.h	/^#define IDC_TCRECORD /;"	d
IDC_TCSTOP	defines.h	/^#define IDC_TCSTOP /;"	d
IDD_DEBUG	defines.h	/^#define IDD_DEBUG /;"	d
IDD_DIALOG1	defines.h	/^#define IDD_DIALOG1 /;"	d
IDD_TAPECONTROL	defines.h	/^#define IDD_TAPECONTROL /;"	d
IDD_USERKYBRD	defines.h	/^#define IDD_USERKYBRD /;"	d
IDField	disc8271.cc	/^  } IDField;$/;"	m	struct:__anon17	typeref:struct:__anon17::__anon18	file:
IDIV_M16	Master512CoPro.cc	/^	IDIV_R8, IDIV_R16, IDIV_M8, IDIV_M16,           \/\/ idiv$/;"	e	enum:__anon26	file:
IDIV_M8	Master512CoPro.cc	/^	IDIV_R8, IDIV_R16, IDIV_M8, IDIV_M16,           \/\/ idiv$/;"	e	enum:__anon26	file:
IDIV_R16	Master512CoPro.cc	/^	IDIV_R8, IDIV_R16, IDIV_M8, IDIV_M16,           \/\/ idiv$/;"	e	enum:__anon26	file:
IDIV_R8	Master512CoPro.cc	/^	IDIV_R8, IDIV_R16, IDIV_M8, IDIV_M16,           \/\/ idiv$/;"	e	enum:__anon26	file:
IDI_BEEBEM	defines.h	/^#define IDI_BEEBEM /;"	d
IDK_0	defines.h	/^#define IDK_0 /;"	d
IDK_1	defines.h	/^#define IDK_1 /;"	d
IDK_2	defines.h	/^#define IDK_2 /;"	d
IDK_3	defines.h	/^#define IDK_3 /;"	d
IDK_4	defines.h	/^#define IDK_4 /;"	d
IDK_5	defines.h	/^#define IDK_5 /;"	d
IDK_6	defines.h	/^#define IDK_6 /;"	d
IDK_7	defines.h	/^#define IDK_7 /;"	d
IDK_8	defines.h	/^#define IDK_8 /;"	d
IDK_9	defines.h	/^#define IDK_9 /;"	d
IDK_A	defines.h	/^#define IDK_A /;"	d
IDK_AT	defines.h	/^#define IDK_AT /;"	d
IDK_B	defines.h	/^#define IDK_B /;"	d
IDK_BACKSLASH	defines.h	/^#define IDK_BACKSLASH /;"	d
IDK_BREAK	defines.h	/^#define IDK_BREAK /;"	d
IDK_C	defines.h	/^#define IDK_C /;"	d
IDK_CAPS	defines.h	/^#define IDK_CAPS /;"	d
IDK_CARET	defines.h	/^#define IDK_CARET /;"	d
IDK_CLOSE_SQUARE	defines.h	/^#define IDK_CLOSE_SQUARE /;"	d
IDK_COMMA	defines.h	/^#define IDK_COMMA /;"	d
IDK_COPY	defines.h	/^#define IDK_COPY /;"	d
IDK_CTRL	defines.h	/^#define IDK_CTRL /;"	d
IDK_D	defines.h	/^#define IDK_D /;"	d
IDK_DEL	defines.h	/^#define IDK_DEL /;"	d
IDK_DOT	defines.h	/^#define IDK_DOT /;"	d
IDK_DOWN	defines.h	/^#define IDK_DOWN /;"	d
IDK_E	defines.h	/^#define IDK_E /;"	d
IDK_EQUALS	defines.h	/^#define IDK_EQUALS /;"	d
IDK_ESC	defines.h	/^#define IDK_ESC /;"	d
IDK_F	defines.h	/^#define IDK_F /;"	d
IDK_F0	defines.h	/^#define IDK_F0 /;"	d
IDK_F1	defines.h	/^#define IDK_F1 /;"	d
IDK_F2	defines.h	/^#define IDK_F2 /;"	d
IDK_F3	defines.h	/^#define IDK_F3 /;"	d
IDK_F4	defines.h	/^#define IDK_F4 /;"	d
IDK_F5	defines.h	/^#define IDK_F5 /;"	d
IDK_F6	defines.h	/^#define IDK_F6 /;"	d
IDK_F7	defines.h	/^#define IDK_F7 /;"	d
IDK_F8	defines.h	/^#define IDK_F8 /;"	d
IDK_F9	defines.h	/^#define IDK_F9 /;"	d
IDK_FWDSLASH	defines.h	/^#define IDK_FWDSLASH /;"	d
IDK_G	defines.h	/^#define IDK_G /;"	d
IDK_H	defines.h	/^#define IDK_H /;"	d
IDK_I	defines.h	/^#define IDK_I /;"	d
IDK_J	defines.h	/^#define IDK_J /;"	d
IDK_K	defines.h	/^#define IDK_K /;"	d
IDK_L	defines.h	/^#define IDK_L /;"	d
IDK_LEFT	defines.h	/^#define IDK_LEFT /;"	d
IDK_M	defines.h	/^#define IDK_M /;"	d
IDK_N	defines.h	/^#define IDK_N /;"	d
IDK_O	defines.h	/^#define IDK_O /;"	d
IDK_OPEN_SQUARE	defines.h	/^#define IDK_OPEN_SQUARE /;"	d
IDK_P	defines.h	/^#define IDK_P /;"	d
IDK_Q	defines.h	/^#define IDK_Q /;"	d
IDK_R	defines.h	/^#define IDK_R /;"	d
IDK_RETURN	defines.h	/^#define IDK_RETURN /;"	d
IDK_RIGHT	defines.h	/^#define IDK_RIGHT /;"	d
IDK_S	defines.h	/^#define IDK_S /;"	d
IDK_SEMI_COLON	defines.h	/^#define IDK_SEMI_COLON /;"	d
IDK_SHIFT_L	defines.h	/^#define IDK_SHIFT_L /;"	d
IDK_SHIFT_LOCK	defines.h	/^#define IDK_SHIFT_LOCK /;"	d
IDK_SHIFT_R	defines.h	/^#define IDK_SHIFT_R /;"	d
IDK_SPACE	defines.h	/^#define IDK_SPACE /;"	d
IDK_STAR	defines.h	/^#define IDK_STAR /;"	d
IDK_T	defines.h	/^#define IDK_T /;"	d
IDK_TAB	defines.h	/^#define IDK_TAB /;"	d
IDK_U	defines.h	/^#define IDK_U /;"	d
IDK_UNDERSCORE	defines.h	/^#define IDK_UNDERSCORE /;"	d
IDK_UP	defines.h	/^#define IDK_UP /;"	d
IDK_V	defines.h	/^#define IDK_V /;"	d
IDK_W	defines.h	/^#define IDK_W /;"	d
IDK_X	defines.h	/^#define IDK_X /;"	d
IDK_Y	defines.h	/^#define IDK_Y /;"	d
IDK_Z	defines.h	/^#define IDK_Z /;"	d
IDM_1024X512	defines.h	/^#define IDM_1024X512 /;"	d
IDM_1024X768	defines.h	/^#define IDM_1024X768 /;"	d
IDM_10FPS	defines.h	/^#define IDM_10FPS /;"	d
IDM_11025KHZ	defines.h	/^#define IDM_11025KHZ /;"	d
IDM_160X128	defines.h	/^#define IDM_160X128 /;"	d
IDM_1FPS	defines.h	/^#define IDM_1FPS /;"	d
IDM_22050KHZ	defines.h	/^#define IDM_22050KHZ /;"	d
IDM_240X192	defines.h	/^#define IDM_240X192 /;"	d
IDM_25FPS	defines.h	/^#define IDM_25FPS /;"	d
IDM_320X256	defines.h	/^#define IDM_320X256 /;"	d
IDM_3QSPEED	defines.h	/^#define IDM_3QSPEED /;"	d
IDM_44100KHZ	defines.h	/^#define IDM_44100KHZ /;"	d
IDM_50FPS	defines.h	/^#define IDM_50FPS /;"	d
IDM_5FPS	defines.h	/^#define IDM_5FPS /;"	d
IDM_640X256	defines.h	/^#define IDM_640X256 /;"	d
IDM_640X512	defines.h	/^#define IDM_640X512 /;"	d
IDM_800X600	defines.h	/^#define IDM_800X600 /;"	d
IDM_ABOUT	defines.h	/^#define IDM_ABOUT /;"	d
IDM_ALLOWWRITES_ROM0	defines.h	/^#define IDM_ALLOWWRITES_ROM0 /;"	d
IDM_ALLOWWRITES_ROM1	defines.h	/^#define IDM_ALLOWWRITES_ROM1 /;"	d
IDM_ALLOWWRITES_ROM2	defines.h	/^#define IDM_ALLOWWRITES_ROM2 /;"	d
IDM_ALLOWWRITES_ROM3	defines.h	/^#define IDM_ALLOWWRITES_ROM3 /;"	d
IDM_ALLOWWRITES_ROM4	defines.h	/^#define IDM_ALLOWWRITES_ROM4 /;"	d
IDM_ALLOWWRITES_ROM5	defines.h	/^#define IDM_ALLOWWRITES_ROM5 /;"	d
IDM_ALLOWWRITES_ROM6	defines.h	/^#define IDM_ALLOWWRITES_ROM6 /;"	d
IDM_ALLOWWRITES_ROM7	defines.h	/^#define IDM_ALLOWWRITES_ROM7 /;"	d
IDM_ALLOWWRITES_ROM8	defines.h	/^#define IDM_ALLOWWRITES_ROM8 /;"	d
IDM_ALLOWWRITES_ROM9	defines.h	/^#define IDM_ALLOWWRITES_ROM9 /;"	d
IDM_ALLOWWRITES_ROMA	defines.h	/^#define IDM_ALLOWWRITES_ROMA /;"	d
IDM_ALLOWWRITES_ROMB	defines.h	/^#define IDM_ALLOWWRITES_ROMB /;"	d
IDM_ALLOWWRITES_ROMC	defines.h	/^#define IDM_ALLOWWRITES_ROMC /;"	d
IDM_ALLOWWRITES_ROMD	defines.h	/^#define IDM_ALLOWWRITES_ROMD /;"	d
IDM_ALLOWWRITES_ROME	defines.h	/^#define IDM_ALLOWWRITES_ROME /;"	d
IDM_ALLOWWRITES_ROMF	defines.h	/^#define IDM_ALLOWWRITES_ROMF /;"	d
IDM_AMXONOFF	defines.h	/^#define IDM_AMXONOFF /;"	d
IDM_AMX_160X256	defines.h	/^#define IDM_AMX_160X256 /;"	d
IDM_AMX_320X256	defines.h	/^#define IDM_AMX_320X256 /;"	d
IDM_AMX_640X256	defines.h	/^#define IDM_AMX_640X256 /;"	d
IDM_AMX_ADJUSTM10	defines.h	/^#define IDM_AMX_ADJUSTM10 /;"	d
IDM_AMX_ADJUSTM30	defines.h	/^#define IDM_AMX_ADJUSTM30 /;"	d
IDM_AMX_ADJUSTM50	defines.h	/^#define IDM_AMX_ADJUSTM50 /;"	d
IDM_AMX_ADJUSTP10	defines.h	/^#define IDM_AMX_ADJUSTP10 /;"	d
IDM_AMX_ADJUSTP30	defines.h	/^#define IDM_AMX_ADJUSTP30 /;"	d
IDM_AMX_ADJUSTP50	defines.h	/^#define IDM_AMX_ADJUSTP50 /;"	d
IDM_AMX_LRFORMIDDLE	defines.h	/^#define IDM_AMX_LRFORMIDDLE /;"	d
IDM_BLUR_2	defines.h	/^#define IDM_BLUR_2 /;"	d
IDM_BLUR_4	defines.h	/^#define IDM_BLUR_4 /;"	d
IDM_BLUR_8	defines.h	/^#define IDM_BLUR_8 /;"	d
IDM_BLUR_OFF	defines.h	/^#define IDM_BLUR_OFF /;"	d
IDM_DD32ONOFF	defines.h	/^#define IDM_DD32ONOFF /;"	d
IDM_DDINVIDEORAM	defines.h	/^#define IDM_DDINVIDEORAM /;"	d
IDM_DDRAWONOFF	defines.h	/^#define IDM_DDRAWONOFF /;"	d
IDM_DEFAULTKYBDMAPPING	defines.h	/^#define IDM_DEFAULTKYBDMAPPING /;"	d
IDM_DEFINEKEYMAP	defines.h	/^#define IDM_DEFINEKEYMAP /;"	d
IDM_DISC	defines.h	/^#define IDM_DISC /;"	d
IDM_DSOUNDONOFF	defines.h	/^#define IDM_DSOUNDONOFF /;"	d
IDM_EXIT	defines.h	/^#define IDM_EXIT /;"	d
IDM_FIXEDSPEED0_1	defines.h	/^#define IDM_FIXEDSPEED0_1 /;"	d
IDM_FIXEDSPEED0_25	defines.h	/^#define IDM_FIXEDSPEED0_25 /;"	d
IDM_FIXEDSPEED0_5	defines.h	/^#define IDM_FIXEDSPEED0_5 /;"	d
IDM_FIXEDSPEED0_75	defines.h	/^#define IDM_FIXEDSPEED0_75 /;"	d
IDM_FIXEDSPEED0_9	defines.h	/^#define IDM_FIXEDSPEED0_9 /;"	d
IDM_FIXEDSPEED10	defines.h	/^#define IDM_FIXEDSPEED10 /;"	d
IDM_FIXEDSPEED100	defines.h	/^#define IDM_FIXEDSPEED100 /;"	d
IDM_FIXEDSPEED1_1	defines.h	/^#define IDM_FIXEDSPEED1_1 /;"	d
IDM_FIXEDSPEED1_25	defines.h	/^#define IDM_FIXEDSPEED1_25 /;"	d
IDM_FIXEDSPEED1_5	defines.h	/^#define IDM_FIXEDSPEED1_5 /;"	d
IDM_FIXEDSPEED2	defines.h	/^#define IDM_FIXEDSPEED2 /;"	d
IDM_FIXEDSPEED5	defines.h	/^#define IDM_FIXEDSPEED5 /;"	d
IDM_FIXEDSPEED50	defines.h	/^#define IDM_FIXEDSPEED50 /;"	d
IDM_FREEZEINACTIVE	defines.h	/^#define IDM_FREEZEINACTIVE /;"	d
IDM_FULLSCREEN	defines.h	/^#define IDM_FULLSCREEN /;"	d
IDM_FULLVOLUME	defines.h	/^#define IDM_FULLVOLUME /;"	d
IDM_HALFSPEED	defines.h	/^#define IDM_HALFSPEED /;"	d
IDM_HIDECURSOR	defines.h	/^#define IDM_HIDECURSOR /;"	d
IDM_HIGHVOLUME	defines.h	/^#define IDM_HIGHVOLUME /;"	d
IDM_IGNOREILLEGALOPS	defines.h	/^#define IDM_IGNOREILLEGALOPS /;"	d
IDM_JOYSTICK	defines.h	/^#define IDM_JOYSTICK /;"	d
IDM_LOADDISC0	defines.h	/^#define IDM_LOADDISC0 /;"	d
IDM_LOADDISC1	defines.h	/^#define IDM_LOADDISC1 /;"	d
IDM_LOADSTATE	defines.h	/^#define IDM_LOADSTATE /;"	d
IDM_LOGICALKYBDMAPPING	defines.h	/^#define IDM_LOGICALKYBDMAPPING /;"	d
IDM_LOWVOLUME	defines.h	/^#define IDM_LOWVOLUME /;"	d
IDM_MAPAS	defines.h	/^#define IDM_MAPAS /;"	d
IDM_MAPFUNCS	defines.h	/^#define IDM_MAPFUNCS /;"	d
IDM_MEDIUMVOLUME	defines.h	/^#define IDM_MEDIUMVOLUME /;"	d
IDM_MOUSESTICK	defines.h	/^#define IDM_MOUSESTICK /;"	d
IDM_NEWDISC0	defines.h	/^#define IDM_NEWDISC0 /;"	d
IDM_NEWDISC1	defines.h	/^#define IDM_NEWDISC1 /;"	d
IDM_PRINTERONOFF	defines.h	/^#define IDM_PRINTERONOFF /;"	d
IDM_PRINTER_CLIPBOARD	defines.h	/^#define IDM_PRINTER_CLIPBOARD /;"	d
IDM_PRINTER_COM1	defines.h	/^#define IDM_PRINTER_COM1 /;"	d
IDM_PRINTER_COM2	defines.h	/^#define IDM_PRINTER_COM2 /;"	d
IDM_PRINTER_COM3	defines.h	/^#define IDM_PRINTER_COM3 /;"	d
IDM_PRINTER_COM4	defines.h	/^#define IDM_PRINTER_COM4 /;"	d
IDM_PRINTER_FILE	defines.h	/^#define IDM_PRINTER_FILE /;"	d
IDM_PRINTER_LPT1	defines.h	/^#define IDM_PRINTER_LPT1 /;"	d
IDM_PRINTER_LPT2	defines.h	/^#define IDM_PRINTER_LPT2 /;"	d
IDM_PRINTER_LPT3	defines.h	/^#define IDM_PRINTER_LPT3 /;"	d
IDM_PRINTER_LPT4	defines.h	/^#define IDM_PRINTER_LPT4 /;"	d
IDM_QUICKLOAD	defines.h	/^#define IDM_QUICKLOAD /;"	d
IDM_QUICKSAVE	defines.h	/^#define IDM_QUICKSAVE /;"	d
IDM_REALTIME	defines.h	/^#define IDM_REALTIME /;"	d
IDM_ROMWRITES	defines.h	/^#define IDM_ROMWRITES /;"	d
IDM_RUNDISC	defines.h	/^#define IDM_RUNDISC /;"	d
IDM_SAVESTATE	defines.h	/^#define IDM_SAVESTATE /;"	d
IDM_SAVE_PREFS	defines.h	/^#define IDM_SAVE_PREFS /;"	d
IDM_SHOWDEBUGGER	defines.h	/^#define IDM_SHOWDEBUGGER /;"	d
IDM_SOUNDCHIP	defines.h	/^#define IDM_SOUNDCHIP /;"	d
IDM_SOUNDONOFF	defines.h	/^#define IDM_SOUNDONOFF /;"	d
IDM_SPEEDANDFPS	defines.h	/^#define IDM_SPEEDANDFPS /;"	d
IDM_TUBE	defines.h	/^#define IDM_TUBE /;"	d
IDM_USERKYBDMAPPING	defines.h	/^#define IDM_USERKYBDMAPPING /;"	d
IDM_VIEWREADME	defines.h	/^#define IDM_VIEWREADME /;"	d
IDM_WPDISC0	defines.h	/^#define IDM_WPDISC0 /;"	d
IDM_WPDISC1	defines.h	/^#define IDM_WPDISC1 /;"	d
IDR_MENU	defines.h	/^#define IDR_MENU /;"	d
ID_1773	defines.h	/^#define ID_1773 /;"	d
ID_443	defines.h	/^#define ID_443 /;"	d
ID_8271	defines.h	/^#define ID_8271 /;"	d
ID_BHARDWARE	defines.h	/^#define ID_BHARDWARE /;"	d
ID_COM1	defines.h	/^#define ID_COM1 /;"	d
ID_COM2	defines.h	/^#define ID_COM2 /;"	d
ID_COM3	defines.h	/^#define ID_COM3 /;"	d
ID_COM4	defines.h	/^#define ID_COM4 /;"	d
ID_DOCONLY	defines.h	/^#define ID_DOCONLY /;"	d
ID_EXTRAS	defines.h	/^#define ID_EXTRAS /;"	d
ID_FDC_DLL	defines.h	/^#define ID_FDC_DLL /;"	d
ID_FILE_RESET	defines.h	/^#define ID_FILE_RESET /;"	d
ID_FULLSET	defines.h	/^#define ID_FULLSET /;"	d
ID_GREEN_LEDS	defines.h	/^#define ID_GREEN_LEDS /;"	d
ID_HIDEMENU	defines.h	/^#define ID_HIDEMENU /;"	d
ID_HOSTCLOCK	defines.h	/^#define ID_HOSTCLOCK /;"	d
ID_LOADTAPE	defines.h	/^#define ID_LOADTAPE /;"	d
ID_MASTER128	defines.h	/^#define ID_MASTER128 /;"	d
ID_MODELB	defines.h	/^#define ID_MODELB /;"	d
ID_MODELBINT	defines.h	/^#define ID_MODELBINT /;"	d
ID_MODELBP	defines.h	/^#define ID_MODELBP /;"	d
ID_MONITOR_AMBER	defines.h	/^#define ID_MONITOR_AMBER /;"	d
ID_MONITOR_BW	defines.h	/^#define ID_MONITOR_BW /;"	d
ID_MONITOR_GREEN	defines.h	/^#define ID_MONITOR_GREEN /;"	d
ID_MONITOR_RGB	defines.h	/^#define ID_MONITOR_RGB /;"	d
ID_PBUFF	defines.h	/^#define ID_PBUFF /;"	d
ID_PCD	defines.h	/^#define ID_PCD /;"	d
ID_PSAMPLES	defines.h	/^#define ID_PSAMPLES /;"	d
ID_RED_LEDS	defines.h	/^#define ID_RED_LEDS /;"	d
ID_REWINDTAPE	defines.h	/^#define ID_REWINDTAPE /;"	d
ID_SERIAL	defines.h	/^#define ID_SERIAL /;"	d
ID_SFX_RELAY	defines.h	/^#define ID_SFX_RELAY /;"	d
ID_SHOW_DISCLEDS	defines.h	/^#define ID_SHOW_DISCLEDS /;"	d
ID_SHOW_KBLEDS	defines.h	/^#define ID_SHOW_KBLEDS /;"	d
ID_TAPECONTROL	defines.h	/^#define ID_TAPECONTROL /;"	d
ID_TAPESOUND	defines.h	/^#define ID_TAPESOUND /;"	d
ID_TAPE_FAST	defines.h	/^#define ID_TAPE_FAST /;"	d
ID_TAPE_MFAST	defines.h	/^#define ID_TAPE_MFAST /;"	d
ID_TAPE_MSLOW	defines.h	/^#define ID_TAPE_MSLOW /;"	d
ID_TAPE_NORMAL	defines.h	/^#define ID_TAPE_NORMAL /;"	d
ID_TSTYLE	defines.h	/^#define ID_TSTYLE /;"	d
ID_UNLOCKTAPE	defines.h	/^#define ID_UNLOCKTAPE /;"	d
ID_VIEW_DD_1024X768	defines.h	/^#define ID_VIEW_DD_1024X768 /;"	d
ID_VIEW_DD_1280X1024	defines.h	/^#define ID_VIEW_DD_1280X1024 /;"	d
ID_VIEW_DD_640X480	defines.h	/^#define ID_VIEW_DD_640X480 /;"	d
IFD	beebwin.cc	/^extern "C" enum FileFilter { DISC, UEF, IFD, KEYBOARD };$/;"	e	enum:FileFilter	file:
IFDFilterProc	GetFile.cc	/^unsigned pascal char IFDFilterProc(AEDesc *theItem, void *info, void *callBackUD, NavFilterModes FilterMode)$/;"	f
IFF1	z80.cc	/^WORD IFF1;$/;"	v
IFF2	z80.cc	/^WORD IFF2;$/;"	v
ILL	debug.cc	/^#define ILL /;"	d	file:
ILL	debug_org.cc	/^#define ILL /;"	d	file:
IMG	disctype.h	/^	IMG  = 3,$/;"	m	class:DiscType
IMM	debug.cc	/^#define IMM /;"	d	file:
IMM	debug_org.cc	/^#define IMM /;"	d	file:
IMP	debug.cc	/^#define IMP /;"	d	file:
IMP	debug_org.cc	/^#define IMP /;"	d	file:
IMUL_M16	Master512CoPro.cc	/^	IMUL_R8, IMUL_R16, IMUL_M8, IMUL_M16,           \/\/ imul$/;"	e	enum:__anon26	file:
IMUL_M8	Master512CoPro.cc	/^	IMUL_R8, IMUL_R16, IMUL_M8, IMUL_M16,           \/\/ imul$/;"	e	enum:__anon26	file:
IMUL_R16	Master512CoPro.cc	/^	IMUL_R8, IMUL_R16, IMUL_M8, IMUL_M16,           \/\/ imul$/;"	e	enum:__anon26	file:
IMUL_R8	Master512CoPro.cc	/^	IMUL_R8, IMUL_R16, IMUL_M8, IMUL_M16,           \/\/ imul$/;"	e	enum:__anon26	file:
IMUL_RMI16	Master512CoPro.cc	/^	IMUL_RRI16, IMUL_RMI16,                         \/\/ (80186) imul IMMEDIATE 16-BIT$/;"	e	enum:__anon26	file:
IMUL_RMI8	Master512CoPro.cc	/^	IMUL_RRI8, IMUL_RMI8,                           \/\/ (80186) imul IMMEDIATE 8-BIT$/;"	e	enum:__anon26	file:
IMUL_RRI16	Master512CoPro.cc	/^	IMUL_RRI16, IMUL_RMI16,                         \/\/ (80186) imul IMMEDIATE 16-BIT$/;"	e	enum:__anon26	file:
IMUL_RRI8	Master512CoPro.cc	/^	IMUL_RRI8, IMUL_RMI8,                           \/\/ (80186) imul IMMEDIATE 8-BIT$/;"	e	enum:__anon26	file:
INAInstrHandler	6502core.cc	/^INLINE static void INAInstrHandler(void) {$/;"	f	file:
INAInstrHandler	tube.cc	/^INLINE static void INAInstrHandler(void) {$/;"	f	file:
INCDEC_M16	Master512CoPro.cc	/^	INCDEC_R8, INCDEC_R16, INCDEC_M8, INCDEC_M16,   \/\/ inc\/dec$/;"	e	enum:__anon26	file:
INCDEC_M8	Master512CoPro.cc	/^	INCDEC_R8, INCDEC_R16, INCDEC_M8, INCDEC_M16,   \/\/ inc\/dec$/;"	e	enum:__anon26	file:
INCDEC_R16	Master512CoPro.cc	/^	INCDEC_R8, INCDEC_R16, INCDEC_M8, INCDEC_M16,   \/\/ inc\/dec$/;"	e	enum:__anon26	file:
INCDEC_R8	Master512CoPro.cc	/^	INCDEC_R8, INCDEC_R16, INCDEC_M8, INCDEC_M16,   \/\/ inc\/dec$/;"	e	enum:__anon26	file:
INCInstrHandler	6502core.cc	/^INLINE static void INCInstrHandler(int16 address) {$/;"	f	file:
INCInstrHandler	tube.cc	/^INLINE static void INCInstrHandler(int16 address) {$/;"	f	file:
IND	debug.cc	/^#define IND /;"	d	file:
IND	debug_org.cc	/^#define IND /;"	d	file:
INLINE	6502core.cc	/^#define INLINE /;"	d	file:
INLINE	osd_cpu.h	/^#define INLINE	/;"	d
INLINE	tube.cc	/^#define INLINE /;"	d	file:
INPUT_LINE_IRQ4	Master512CoPro.cc	/^	INPUT_LINE_IRQ4,$/;"	e	enum:__anon25	file:
INPUT_LINE_NMI	Master512CoPro.cc	/^	INPUT_LINE_NMI$/;"	e	enum:__anon25	file:
INPUT_LINE_TEST	Master512CoPro.cc	/^	INPUT_LINE_TEST,$/;"	e	enum:__anon25	file:
INS16	Master512CoPro.cc	/^	INS16, REP_INS16_BASE, REP_INS16_COUNT,         \/\/ (80186) ins 16-BIT$/;"	e	enum:__anon26	file:
INS8	Master512CoPro.cc	/^	INS8, REP_INS8_BASE, REP_INS8_COUNT,            \/\/ (80186) ins 8-BIT$/;"	e	enum:__anon26	file:
INT16	osd_cpu.h	/^typedef signed short						INT16;$/;"	t
INT16	speech.h	/^#define INT16	/;"	d
INT3	Master512CoPro.cc	/^	INT3, INT_IMM, INTO_NT, INTO_T,                 \/\/ intS$/;"	e	enum:__anon26	file:
INT32	osd_cpu.h	/^typedef signed int							INT32;$/;"	t
INT32	speech.h	/^#define INT32	/;"	d
INT64	osd_cpu.h	/^__extension__ typedef signed long long		INT64;$/;"	t
INT64	osd_cpu.h	/^typedef signed __int64						INT64;$/;"	t
INT8	osd_cpu.h	/^typedef signed char 						INT8;$/;"	t
INT8	speech.h	/^#define INT8	/;"	d
INTERRUPT_ON_ZERO	Master512CoPro.cc	/^const uint16_t INTERRUPT_ON_ZERO       = 0x0100;$/;"	v
INTERRUPT_REQUEST_VECTOR	Arm.h	/^#define INTERRUPT_REQUEST_VECTOR	/;"	d
INTOFF	beebmem.cc	/^#define INTOFF	/;"	d	file:
INTON	beebmem.cc	/^#define INTON	/;"	d	file:
INTO_NT	Master512CoPro.cc	/^	INT3, INT_IMM, INTO_NT, INTO_T,                 \/\/ intS$/;"	e	enum:__anon26	file:
INTO_T	Master512CoPro.cc	/^	INT3, INT_IMM, INTO_NT, INTO_T,                 \/\/ intS$/;"	e	enum:__anon26	file:
INTRFLAGS	Arm.h	/^#define INTRFLAGS	/;"	d
INT_IMM	Master512CoPro.cc	/^	INT3, INT_IMM, INTO_NT, INTO_T,                 \/\/ intS$/;"	e	enum:__anon26	file:
INT_IRQ	Master512CoPro.cc	/^const uint32_t INT_IRQ = 0x01;$/;"	v
INVALID_SOCKET	econet.cc	/^#define INVALID_SOCKET	/;"	d	file:
INVALID_SOCKET	serialdevices.cc	/^#define INVALID_SOCKET	/;"	d	file:
INVALID_SOCKET	teletext.cc	/^#define INVALID_SOCKET	/;"	d	file:
INX	debug.cc	/^#define INX /;"	d	file:
INX	debug_org.cc	/^#define INX /;"	d	file:
INXInstrHandler	6502core.cc	/^INLINE static void INXInstrHandler(void) {$/;"	f	file:
INXInstrHandler	tube.cc	/^INLINE static void INXInstrHandler(void) {$/;"	f	file:
INY	debug.cc	/^#define INY /;"	d	file:
INY	debug_org.cc	/^#define INY /;"	d	file:
IN_DX16	Master512CoPro.cc	/^	IN_IMM8, IN_IMM16, IN_DX8, IN_DX16,             \/\/ PORT READS$/;"	e	enum:__anon26	file:
IN_DX8	Master512CoPro.cc	/^	IN_IMM8, IN_IMM16, IN_DX8, IN_DX16,             \/\/ PORT READS$/;"	e	enum:__anon26	file:
IN_IMM16	Master512CoPro.cc	/^	IN_IMM8, IN_IMM16, IN_DX8, IN_DX16,             \/\/ PORT READS$/;"	e	enum:__anon26	file:
IN_IMM8	Master512CoPro.cc	/^	IN_IMM8, IN_IMM16, IN_DX8, IN_DX16,             \/\/ PORT READS$/;"	e	enum:__anon26	file:
IOCycles	6502core.cc	/^int IOCycles=0;$/;"	v
IRET	Master512CoPro.cc	/^	EXCEPTION, IRET,                                \/\/ EXCEPTION, iret$/;"	e	enum:__anon26	file:
IRQCycles	6502core.cc	/^static unsigned char IRQCycles;$/;"	v	file:
IRQCycles	tube.cc	/^static unsigned char IRQCycles;$/;"	v	file:
IRQ_MODE	Arm.h	/^#define IRQ_MODE	/;"	d
IRQ_Nums	6502core.h	/^typedef enum IRQ_Nums {$/;"	g
IRQ_Nums	6502core.h	/^} IRQ_Nums;$/;"	t	typeref:enum:IRQ_Nums
I_FLAG	Arm.h	/^#define I_FLAG	/;"	d
Ident	disc8271.cc	/^  const char *Ident; \/* Mainly for debugging *\/$/;"	m	struct:__anon21	file:
Idle	econet.cc	/^    Idle = 0,$/;"	m	class:AUNType::FourWayStage	file:
IgnoreIllegalInstructions	6502core.cc	/^int IgnoreIllegalInstructions = 1;$/;"	v
ImmReply	econet.cc	/^    ImmReply = 6$/;"	m	class:AUNType	file:
Immediate	econet.cc	/^    Immediate = 5,$/;"	m	class:AUNType	file:
ImmediateReceived	econet.cc	/^    ImmediateReceived = 8$/;"	m	class:AUNType::FourWayStage	file:
ImmediateSent	econet.cc	/^    ImmediateSent = 7,$/;"	m	class:AUNType::FourWayStage	file:
ImportDiscFiles	beebwin.cc	/^void BeebWin::ImportDiscFiles(int menuId)$/;"	f	class:BeebWin
InCharLineUp	video.cc	/^  int InCharLineUp; \/* Scanline within a character line - counts up*\/$/;"	m	struct:__anon4	file:
IncTrigger	6502core.h	/^#define IncTrigger(/;"	d
IncWordReg	Master512CoPro.cc	/^inline void Master512CoPro::IncWordReg(uint8_t reg)$/;"	f	class:Master512CoPro
IndAddrModeHandler_Address	6502core.cc	/^INLINE static int16 IndAddrModeHandler_Address(void) {$/;"	f	file:
IndAddrModeHandler_Address	tube.cc	/^INLINE static int16 IndAddrModeHandler_Address(void) {$/;"	f	file:
IndAddrXModeHandler_Address	6502core.cc	/^INLINE static int16 IndAddrXModeHandler_Address(void) {$/;"	f	file:
IndAddrXModeHandler_Address	tube.cc	/^INLINE static int16 IndAddrXModeHandler_Address(void) {$/;"	f	file:
IndXAddrModeHandler_Address	6502core.cc	/^INLINE static int16 IndXAddrModeHandler_Address(void) {$/;"	f	file:
IndXAddrModeHandler_Address	tube.cc	/^INLINE static int16 IndXAddrModeHandler_Address(void) {$/;"	f	file:
IndXAddrModeHandler_Data	6502core.cc	/^INLINE static int16 IndXAddrModeHandler_Data(void) {$/;"	f	file:
IndXAddrModeHandler_Data	tube.cc	/^INLINE static int16 IndXAddrModeHandler_Data(void) {$/;"	f	file:
IndYAddrModeHandler_Address	6502core.cc	/^INLINE static int16 IndYAddrModeHandler_Address(void) {$/;"	f	file:
IndYAddrModeHandler_Address	tube.cc	/^INLINE static int16 IndYAddrModeHandler_Address(void) {$/;"	f	file:
IndYAddrModeHandler_Data	6502core.cc	/^INLINE static int16 IndYAddrModeHandler_Data(void) {$/;"	f	file:
IndYAddrModeHandler_Data	tube.cc	/^INLINE static int16 IndYAddrModeHandler_Data(void) {$/;"	f	file:
IndexCountBeforeHeadUnload	disc8271.cc	/^static int IndexCountBeforeHeadUnload; \/\/ Number of revolutions (0 to 14), or 15 to keep loaded$/;"	v	file:
Init6502core	6502core.cc	/^void Init6502core(void) {$/;"	f
Init65C02core	tube.cc	/^void Init65C02core(void) {$/;"	f
InitAudioDev	beebsound.cc	/^static void InitAudioDev(int sampleratein) {$/;"	f	file:
InitDiscStore	disc8271.cc	/^static void InitDiscStore(void) {$/;"	f	file:
InitMenu	beebwin.cc	/^void BeebWin::InitMenu(void)$/;"	f	class:BeebWin
InitialOffset	video.cc	/^int InitialOffset=0;$/;"	v
Initialise	beebwin.cc	/^void BeebWin::Initialise(char *home)$/;"	f	class:BeebWin
Input	z80.h	/^#define Input(/;"	d
InstCount	debug.cc	/^static int InstCount = 0;       \/\/ Instructions to execute before breaking$/;"	v	file:
InstInfo	debug.cc	/^struct InstInfo$/;"	s	file:
InstInfo	debug_org.cc	/^struct InstInfo$/;"	s	file:
InstrCount	6502core.cc	/^static unsigned int InstrCount;$/;"	v	file:
InstrHandlerFuncType	6502core.cc	/^typedef void (*InstrHandlerFuncType)(int16 Operand);$/;"	t	file:
InstrHandlerFuncType	tube.cc	/^typedef void (*InstrHandlerFuncType)(int16 Operand);$/;"	t	file:
InstrLog	6502core.cc	/^FILE *InstrLog;$/;"	v
InstructionCount	6502core.cc	/^static unsigned int InstructionCount[256];$/;"	v	file:
IntDue	6502core.cc	/^bool IntDue=false;$/;"	v
IntHandler	disc8271.cc	/^  CommandFunc IntHandler; \/* Called when interrupt requested by command is about to happen *\/$/;"	m	struct:__anon21	file:
IntegraB	model.h	/^	IntegraB,  \/\/ 1: BBC B with Integra B$/;"	m	class:Model
Internal_BadTracks	disc8271.cc	/^static unsigned char Internal_BadTracks[2][2]; \/* 1st subscript is surface 0\/1 and second subscript is badtrack 0\/1 *\/$/;"	v	file:
Internal_CurrentTrack	disc8271.cc	/^static unsigned char Internal_CurrentTrack[2]; \/* 0\/1 for surface number *\/$/;"	v	file:
Internal_DriveControlInputPort	disc8271.cc	/^static unsigned char Internal_DriveControlInputPort;$/;"	v	file:
Internal_DriveControlOutputPort	disc8271.cc	/^static unsigned char Internal_DriveControlOutputPort;$/;"	v	file:
Internal_ModeReg	disc8271.cc	/^static unsigned char Internal_ModeReg;$/;"	v	file:
Internal_Scan_Count	disc8271.cc	/^static unsigned int Internal_Scan_Count; \/* Read as two bytes *\/$/;"	v	file:
Internal_Scan_SectorNum	disc8271.cc	/^static unsigned char Internal_Scan_SectorNum;$/;"	v	file:
InvalidCSWFile	csw.h	/^     InvalidCSWFile,$/;"	m	class:CSWResult
InvalidUEFFile	uefstate.h	/^    InvalidUEFFile,$/;"	m	class:UEFStateResult
InvertTR00	disc1770.cc	/^bool InvertTR00; \/\/ Needed because the bloody stupid watford board inverts the input.$/;"	v
IsDiscWritable	disc8271.cc	/^bool IsDiscWritable(int DriveNum) {$/;"	f
IsFullScreen	beebwin.h	/^	bool IsFullScreen() { return m_isFullScreen; }$/;"	f	class:BeebWin
IsTeletext	video.cc	/^  int IsTeletext; \/* This frame is a teletext frame - do things differently *\/$/;"	m	struct:__anon4	file:
JCC_NT	Master512CoPro.cc	/^	JCC_NT, JCC_T, JCXZ_NT, JCXZ_T,                 \/\/ CONDITIONAL jmpS$/;"	e	enum:__anon26	file:
JCC_T	Master512CoPro.cc	/^	JCC_NT, JCC_T, JCXZ_NT, JCXZ_T,                 \/\/ CONDITIONAL jmpS$/;"	e	enum:__anon26	file:
JCXZ_NT	Master512CoPro.cc	/^	JCC_NT, JCC_T, JCXZ_NT, JCXZ_T,                 \/\/ CONDITIONAL jmpS$/;"	e	enum:__anon26	file:
JCXZ_T	Master512CoPro.cc	/^	JCC_NT, JCC_T, JCXZ_NT, JCXZ_T,                 \/\/ CONDITIONAL jmpS$/;"	e	enum:__anon26	file:
JMP	Master512CoPro.cc	/^inline void Master512CoPro::JMP(bool cond)$/;"	f	class:Master512CoPro
JMP_FAR	Master512CoPro.cc	/^	JMP_SHORT, JMP_NEAR, JMP_FAR,                   \/\/ DIRECT jmpS$/;"	e	enum:__anon26	file:
JMP_M16	Master512CoPro.cc	/^	JMP_R16, JMP_M16, JMP_M32,                      \/\/ INDIRECT jmpS$/;"	e	enum:__anon26	file:
JMP_M32	Master512CoPro.cc	/^	JMP_R16, JMP_M16, JMP_M32,                      \/\/ INDIRECT jmpS$/;"	e	enum:__anon26	file:
JMP_NEAR	Master512CoPro.cc	/^	JMP_SHORT, JMP_NEAR, JMP_FAR,                   \/\/ DIRECT jmpS$/;"	e	enum:__anon26	file:
JMP_R16	Master512CoPro.cc	/^	JMP_R16, JMP_M16, JMP_M32,                      \/\/ INDIRECT jmpS$/;"	e	enum:__anon26	file:
JMP_SHORT	Master512CoPro.cc	/^	JMP_SHORT, JMP_NEAR, JMP_FAR,                   \/\/ DIRECT jmpS$/;"	e	enum:__anon26	file:
JPC	z80.cc	/^#define JPC(/;"	d	file:
JSRInstrHandler	6502core.cc	/^INLINE static void JSRInstrHandler(int16 address) {$/;"	f	file:
JSRInstrHandler	tube.cc	/^INLINE static void JSRInstrHandler(int16 address) {$/;"	f	file:
JUMP	debug.cc	/^#define JUMP /;"	d	file:
JUMP	debug_org.cc	/^#define JUMP /;"	d	file:
JoystickButton	sysvia.cc	/^bool JoystickButton[2] = {false, false};$/;"	v
JoystickEnabled	atodconv.cc	/^bool JoystickEnabled = false;$/;"	v
JoystickX	atodconv.cc	/^int JoystickX;$/;"	v
JoystickY	atodconv.cc	/^int JoystickY;$/;"	v
KBDCol	sysvia.cc	/^static unsigned int KBDCol=0;$/;"	v	file:
KBDRow	sysvia.cc	/^static unsigned int KBDRow=0;$/;"	v	file:
KBD_COLS	sysvia.cc	/^#define KBD_COLS /;"	d	file:
KBD_ROWS	sysvia.cc	/^#define KBD_ROWS /;"	d	file:
KEYBOARD	beebwin.cc	/^extern "C" enum FileFilter { DISC, UEF, IFD, KEYBOARD };$/;"	e	enum:FileFilter	file:
KILInstrHandler	6502core.cc	/^INLINE static void KILInstrHandler(void) {$/;"	f	file:
KbdOP	sysvia.cc	/^static bool KbdOP(void) {$/;"	f	file:
KeyDown	beebwin.cc	/^int BeebWin::KeyDown(int vkey)$/;"	f	class:BeebWin
KeyName	userkybd.cc	/^const char *KeyName( int Key )$/;"	f
KeyUp	beebwin.cc	/^int BeebWin::KeyUp(int vkey)$/;"	f	class:BeebWin
KeyboardFilterProc	GetFile.cc	/^unsigned pascal char KeyboardFilterProc(AEDesc *theItem, void *info, void *callBackUD, NavFilterModes FilterMode)$/;"	f
KeysDown	sysvia.cc	/^static int KeysDown=0;$/;"	v	file:
Kill_Serial	serial.cc	/^void Kill_Serial(void) {$/;"	f
LAHF	Master512CoPro.cc	/^	FLAG_OPS, LAHF, SAHF,                           \/\/ FLAG OPERATIONS$/;"	e	enum:__anon26	file:
LDAInstrHandler	6502core.cc	/^INLINE static void LDAInstrHandler(int16 operand) {$/;"	f	file:
LDAInstrHandler	tube.cc	/^INLINE static void LDAInstrHandler(int16 operand) {$/;"	f	file:
LDXInstrHandler	6502core.cc	/^INLINE static void LDXInstrHandler(int16 operand) {$/;"	f	file:
LDXInstrHandler	tube.cc	/^INLINE static void LDXInstrHandler(int16 operand) {$/;"	f	file:
LDYInstrHandler	6502core.cc	/^INLINE static void LDYInstrHandler(int16 operand) {$/;"	f	file:
LDYInstrHandler	tube.cc	/^INLINE static void LDYInstrHandler(int16 operand) {$/;"	f	file:
LEA	Master512CoPro.cc	/^	HLT, LOAD_PTR, LEA, NOP, WAIT, XLAT,            \/\/ MISC$/;"	e	enum:__anon26	file:
LEAVE	Master512CoPro.cc	/^	ENTER0, ENTER1, ENTER_BASE, ENTER_COUNT, LEAVE, \/\/ (80186) enter\/leave$/;"	e	enum:__anon26	file:
LEDType	beebwin.h	/^struct LEDType {$/;"	s
LED_COLOUR_TYPE	beebwin.cc	/^#define LED_COLOUR_TYPE /;"	d	file:
LED_COL_BASE	beebwin.cc	/^#define LED_COL_BASE	/;"	d	file:
LED_SHOW_DISC	beebwin.cc	/^#define LED_SHOW_DISC	/;"	d	file:
LED_SHOW_KB	beebwin.cc	/^#define LED_SHOW_KB	/;"	d	file:
LEDs	beebwin.cc	/^struct LEDType LEDs;$/;"	v	typeref:struct:LEDType
LEN_DEVICE_NAME	audev-macosx.cc	/^#define LEN_DEVICE_NAME /;"	d	file:
LINES_IN_INFO	debug.cc	/^#define LINES_IN_INFO /;"	d	file:
LINES_IN_INFO	debug_org.cc	/^#define LINES_IN_INFO /;"	d	file:
LO32_32_64	osd_cpu.h	/^#define LO32_32_64(/;"	d
LO32_U32_U64	osd_cpu.h	/^#define LO32_U32_U64(/;"	d
LOAD_PTR	Master512CoPro.cc	/^	HLT, LOAD_PTR, LEA, NOP, WAIT, XLAT,            \/\/ MISC$/;"	e	enum:__anon26	file:
LOAD_STATE	z80.cc	/^#define LOAD_STATE(/;"	d	file:
LODS16	Master512CoPro.cc	/^	LODS16, REP_LODS16_BASE, REP_LODS16_COUNT,      \/\/ lods 16-BIT$/;"	e	enum:__anon26	file:
LODS8	Master512CoPro.cc	/^	LODS8, REP_LODS8_BASE, REP_LODS8_COUNT,         \/\/ lods 8-BIT$/;"	e	enum:__anon26	file:
LOG_HEADER	log.h	/^#define LOG_HEADER$/;"	d
LOOPE_NT	Master512CoPro.cc	/^	LOOP_NT, LOOP_T, LOOPE_NT, LOOPE_T,             \/\/ LOOPS$/;"	e	enum:__anon26	file:
LOOPE_T	Master512CoPro.cc	/^	LOOP_NT, LOOP_T, LOOPE_NT, LOOPE_T,             \/\/ LOOPS$/;"	e	enum:__anon26	file:
LOOP_NT	Master512CoPro.cc	/^	LOOP_NT, LOOP_T, LOOPE_NT, LOOPE_T,             \/\/ LOOPS$/;"	e	enum:__anon26	file:
LOOP_T	Master512CoPro.cc	/^	LOOP_NT, LOOP_T, LOOPE_NT, LOOPE_T,             \/\/ LOOPS$/;"	e	enum:__anon26	file:
LSL	Arm.h	/^#define LSL	/;"	d
LSR	Arm.h	/^#define LSR	/;"	d
LSRInstrHandler	6502core.cc	/^INLINE static void LSRInstrHandler(int16 address) {$/;"	f	file:
LSRInstrHandler	tube.cc	/^INLINE static void LSRInstrHandler(int16 address) {$/;"	f	file:
LSRInstrHandler_Acc	6502core.cc	/^INLINE static void LSRInstrHandler_Acc(void) {$/;"	f	file:
LSRInstrHandler_Acc	tube.cc	/^INLINE static void LSRInstrHandler_Acc(void) {$/;"	f	file:
LastAddrInBIOS	debug.cc	/^static bool LastAddrInBIOS = false;$/;"	v	file:
LastAddrInOS	debug.cc	/^static bool LastAddrInOS = false;$/;"	v	file:
LastAddrInROM	debug.cc	/^static bool LastAddrInROM = false;$/;"	v	file:
LastBeebCycle	beebsound.cc	/^static int LastBeebCycle=0; \/* Last parameter to this function *\/$/;"	v	file:
LastBitButton	uservia.cc	/^int LastBitButton = 0;$/;"	v
LastButton	userkybd.cc	/^int LastButton = 0;$/;"	v
LastOurTime	beebsound.cc	/^static double LastOurTime=0; \/* Last result of this function *\/$/;"	v	file:
LastPixmapLine	video.cc	/^  int LastPixmapLine; \/* The last pixmap line where something is visible.  Used to eliminate the $/;"	m	struct:__anon4	file:
LastToneFreqSet	beebsound.cc	/^	int LastToneFreqSet; \/* the tone generator last set - for writing the 2nd byte *\/$/;"	m	struct:BeebState76489_S	file:
LightsOn	disc1770.cc	/^static bool LightsOn[2] = { false, false };$/;"	v	file:
LineRoutine	video.cc	/^LineRoutinePtr LineRoutine;$/;"	v
LineRoutinePtr	video.cc	/^typedef void (*LineRoutinePtr)(void);$/;"	t	file:
ListenSocket	econet.cc	/^static SOCKET ListenSocket = INVALID_SOCKET;		\/\/ Listen socket$/;"	v	file:
Load1770DiscImage	disc1770.cc	/^Disc1770Result Load1770DiscImage(const char *DscFileName, int DscDrive, DiscType Type) {$/;"	f
Load1770UEF	disc1770.cc	/^void Load1770UEF(FILE *SUEF, int Version)$/;"	f
Load6502UEF	6502core.cc	/^void Load6502UEF(FILE *SUEF) {$/;"	f
Load65C02MemUEF	tube.cc	/^void Load65C02MemUEF(FILE *SUEF) {$/;"	f
Load65C02UEF	tube.cc	/^void Load65C02UEF(FILE *SUEF) {$/;"	f
Load8271UEF	disc8271.cc	/^void Load8271UEF(FILE *SUEF)$/;"	f
LoadAtoDUEF	atodconv.cc	/^void LoadAtoDUEF(FILE *SUEF) {$/;"	f
LoadBIOS	Master512CoPro.cc	/^void Master512CoPro::LoadBIOS()$/;"	f	class:Master512CoPro
LoadCSW	csw.cc	/^CSWResult LoadCSW(const char *file)$/;"	f
LoadDisc	beebwin.cc	/^void BeebWin::LoadDisc(int drive, char *path)$/;"	f	class:BeebWin
LoadEmuUEF	beebwin.cc	/^void LoadEmuUEF(FILE *SUEF, int Version) {$/;"	f
LoadFileMemUEF	beebmem.cc	/^void LoadFileMemUEF(FILE *SUEF) {$/;"	f
LoadIntegraBHiddenMemUEF	beebmem.cc	/^void LoadIntegraBHiddenMemUEF(FILE *SUEF) {$/;"	f
LoadMainMemUEF	beebmem.cc	/^void LoadMainMemUEF(FILE *SUEF) {$/;"	f
LoadPreferences	beebwin.cc	/^void BeebWin::LoadPreferences()$/;"	f	class:BeebWin
LoadPrivMemUEF	beebmem.cc	/^void LoadPrivMemUEF(FILE *SUEF) {$/;"	f
LoadRomRegsUEF	beebmem.cc	/^void LoadRomRegsUEF(FILE *SUEF) {$/;"	f
LoadSWRMMemUEF	beebmem.cc	/^void LoadSWRMMemUEF(FILE *SUEF) {$/;"	f
LoadSerialUEF	serial.cc	/^void LoadSerialUEF(FILE *SUEF)$/;"	f
LoadShadMemUEF	beebmem.cc	/^void LoadShadMemUEF(FILE *SUEF) {$/;"	f
LoadSimpleDSDiscImage	disc8271.cc	/^void LoadSimpleDSDiscImage(const char *FileName, int DriveNum, int Tracks) {$/;"	f
LoadSimpleDiscImage	disc8271.cc	/^void LoadSimpleDiscImage(const char *FileName, int DriveNum, int HeadNum, int Tracks) {$/;"	f
LoadSoundSamples	beebsound.cc	/^void LoadSoundSamples(void) {$/;"	f
LoadSoundUEF	beebsound.cc	/^void LoadSoundUEF(FILE *SUEF) {$/;"	f
LoadTape	beebwin.cc	/^void BeebWin::LoadTape()$/;"	f	class:BeebWin
LoadTapeFromPath	beebwin.cc	/^void BeebWin::LoadTapeFromPath(char *path)$/;"	f	class:BeebWin
LoadTubeUEF	tube.cc	/^void LoadTubeUEF(FILE *SUEF) {$/;"	f
LoadUEF	serial.cc	/^void LoadUEF(char *UEFName) {$/;"	f
LoadUEFState	uefstate.cc	/^UEFStateResult LoadUEFState(const char *StateName) {$/;"	f
LoadUserKeyMap	beebwin.cc	/^void BeebWin::LoadUserKeyMap ()$/;"	f	class:BeebWin
LoadUserKeyboard	userkybd.cc	/^bool LoadUserKeyboard( const char *path )$/;"	f
LoadViaUEF	via.cc	/^void LoadViaUEF(FILE *SUEF) {$/;"	f
LoadVideoUEF	video.cc	/^void LoadVideoUEF(FILE *SUEF, const int Version) {$/;"	f
LoadingCycles	disc1770.cc	/^static int LoadingCycles=0; \/\/ Spin up\/settle counter in CPU Cycles$/;"	v	file:
LogicalSectors	disc8271.cc	/^  int LogicalSectors; \/* Number of sectors stated in format command *\/$/;"	m	struct:__anon19	file:
LongEconetPacket	econet.cc	/^struct LongEconetPacket$/;"	s	class:AUNType::FourWayStage	file:
LowLevelDoScanLine	video.cc	/^static void LowLevelDoScanLine() {$/;"	f	file:
LowLevelDoScanLineNarrow	video.cc	/^static void LowLevelDoScanLineNarrow() {$/;"	f	file:
LowLevelDoScanLineNarrowNot4Bytes	video.cc	/^static void LowLevelDoScanLineNarrowNot4Bytes() {$/;"	f	file:
LowLevelDoScanLineWide	video.cc	/^static void LowLevelDoScanLineWide() {$/;"	f	file:
LowLevelDoScanLineWideNot4Bytes	video.cc	/^static void LowLevelDoScanLineWideNot4Bytes() {$/;"	f	file:
LowerDCD	serialdevices.cc	/^void LowerDCD(void)$/;"	f
M1_FLAG	Arm.h	/^#define M1_FLAG	/;"	d
M2_FLAG	Arm.h	/^#define M2_FLAG	/;"	d
MAIN_HEADER	main.h	/^#define MAIN_HEADER$/;"	d
MASTER512_COPRO_HEADER	Master512CoPro.h	/^#define MASTER512_COPRO_HEADER$/;"	d
MAXBUFSIZE	beebsound.cc	/^#define MAXBUFSIZE /;"	d	file:
MAX_BPS	debug.cc	/^#define MAX_BPS /;"	d	file:
MAX_BPS	debug_org.cc	/^#define MAX_BPS /;"	d	file:
MAX_COMMAND_LEN	debug.cc	/^#define MAX_COMMAND_LEN /;"	d	file:
MAX_COMMAND_LEN	debug_org.cc	/^#define MAX_COMMAND_LEN /;"	d	file:
MAX_LINES	debug.cc	/^#define MAX_LINES /;"	d	file:
MAX_LINES	debug_org.cc	/^#define MAX_LINES /;"	d	file:
MAX_MAP_LINES	serial.h	/^#define MAX_MAP_LINES /;"	d
MAX_PATH	discedit.h	/^#define  MAX_PATH /;"	d
MAX_SAMPLE_CHUNK	speech.h	/^#define MAX_SAMPLE_CHUNK	/;"	d
MAX_VIDEO_SCAN_LINES	video.h	/^#define MAX_VIDEO_SCAN_LINES /;"	d
MC6854	econet.h	/^struct MC6854 {$/;"	s
MODE7FLASHFREQUENCY	video.cc	/^#define MODE7FLASHFREQUENCY /;"	d	file:
MODE7FONT_HEADER	mode7font.h	/^#define MODE7FONT_HEADER$/;"	d
MODE7OFFFIELDS	video.cc	/^#define MODE7OFFFIELDS /;"	d	file:
MODE7ONFIELDS	video.cc	/^#define MODE7ONFIELDS /;"	d	file:
MODEFLAGS	Arm.h	/^#define MODEFLAGS	/;"	d
MODEL_HEADER	model.h	/^#define MODEL_HEADER$/;"	d
MOD_32_64_32	osd_cpu.h	/^#define MOD_32_64_32(/;"	d
MOD_U32_U64_U32	osd_cpu.h	/^#define MOD_U32_U64_U32(/;"	d
MOVS16	Master512CoPro.cc	/^	MOVS16, REP_MOVS16_BASE, REP_MOVS16_COUNT,      \/\/ movs 16-BIT$/;"	e	enum:__anon26	file:
MOVS8	Master512CoPro.cc	/^	MOVS8, REP_MOVS8_BASE, REP_MOVS8_COUNT,         \/\/ movs 8-BIT$/;"	e	enum:__anon26	file:
MOV_AM16	Master512CoPro.cc	/^	MOV_AM8, MOV_AM16, MOV_MA8, MOV_MA16,           \/\/ MOVE, al\/ax MEMORY$/;"	e	enum:__anon26	file:
MOV_AM8	Master512CoPro.cc	/^	MOV_AM8, MOV_AM16, MOV_MA8, MOV_MA16,           \/\/ MOVE, al\/ax MEMORY$/;"	e	enum:__anon26	file:
MOV_MA16	Master512CoPro.cc	/^	MOV_AM8, MOV_AM16, MOV_MA8, MOV_MA16,           \/\/ MOVE, al\/ax MEMORY$/;"	e	enum:__anon26	file:
MOV_MA8	Master512CoPro.cc	/^	MOV_AM8, MOV_AM16, MOV_MA8, MOV_MA16,           \/\/ MOVE, al\/ax MEMORY$/;"	e	enum:__anon26	file:
MOV_MI16	Master512CoPro.cc	/^	MOV_RI16, MOV_MI16,                             \/\/ MOVE, 16-BIT IMMEDIATE$/;"	e	enum:__anon26	file:
MOV_MI8	Master512CoPro.cc	/^	MOV_RI8, MOV_MI8,                               \/\/ MOVE, 8-BIT IMMEDIATE$/;"	e	enum:__anon26	file:
MOV_MR16	Master512CoPro.cc	/^	MOV_RR16, MOV_RM16, MOV_MR16,                   \/\/ MOVE, 16-BIT$/;"	e	enum:__anon26	file:
MOV_MR8	Master512CoPro.cc	/^	MOV_RR8, MOV_RM8, MOV_MR8,                      \/\/ MOVE, 8-BIT$/;"	e	enum:__anon26	file:
MOV_MS	Master512CoPro.cc	/^	MOV_SR, MOV_SM, MOV_RS, MOV_MS,                 \/\/ MOVE, SEGMENT REGISTERS$/;"	e	enum:__anon26	file:
MOV_RI16	Master512CoPro.cc	/^	MOV_RI16, MOV_MI16,                             \/\/ MOVE, 16-BIT IMMEDIATE$/;"	e	enum:__anon26	file:
MOV_RI8	Master512CoPro.cc	/^	MOV_RI8, MOV_MI8,                               \/\/ MOVE, 8-BIT IMMEDIATE$/;"	e	enum:__anon26	file:
MOV_RM16	Master512CoPro.cc	/^	MOV_RR16, MOV_RM16, MOV_MR16,                   \/\/ MOVE, 16-BIT$/;"	e	enum:__anon26	file:
MOV_RM8	Master512CoPro.cc	/^	MOV_RR8, MOV_RM8, MOV_MR8,                      \/\/ MOVE, 8-BIT$/;"	e	enum:__anon26	file:
MOV_RR16	Master512CoPro.cc	/^	MOV_RR16, MOV_RM16, MOV_MR16,                   \/\/ MOVE, 16-BIT$/;"	e	enum:__anon26	file:
MOV_RR8	Master512CoPro.cc	/^	MOV_RR8, MOV_RM8, MOV_MR8,                      \/\/ MOVE, 8-BIT$/;"	e	enum:__anon26	file:
MOV_RS	Master512CoPro.cc	/^	MOV_SR, MOV_SM, MOV_RS, MOV_MS,                 \/\/ MOVE, SEGMENT REGISTERS$/;"	e	enum:__anon26	file:
MOV_SM	Master512CoPro.cc	/^	MOV_SR, MOV_SM, MOV_RS, MOV_MS,                 \/\/ MOVE, SEGMENT REGISTERS$/;"	e	enum:__anon26	file:
MOV_SR	Master512CoPro.cc	/^	MOV_SR, MOV_SM, MOV_RS, MOV_MS,                 \/\/ MOVE, SEGMENT REGISTERS$/;"	e	enum:__anon26	file:
MULTITHREAD	main.h	/^#undef MULTITHREAD$/;"	d
MUL_64_32_32	osd_cpu.h	/^#define MUL_64_32_32(/;"	d
MUL_M16	Master512CoPro.cc	/^	MUL_R8, MUL_R16, MUL_M8, MUL_M16,               \/\/ mul$/;"	e	enum:__anon26	file:
MUL_M8	Master512CoPro.cc	/^	MUL_R8, MUL_R16, MUL_M8, MUL_M16,               \/\/ mul$/;"	e	enum:__anon26	file:
MUL_R16	Master512CoPro.cc	/^	MUL_R8, MUL_R16, MUL_M8, MUL_M16,               \/\/ mul$/;"	e	enum:__anon26	file:
MUL_R8	Master512CoPro.cc	/^	MUL_R8, MUL_R16, MUL_M8, MUL_M16,               \/\/ mul$/;"	e	enum:__anon26	file:
MUL_U64_U32_U32	osd_cpu.h	/^#define MUL_U64_U32_U32(/;"	d
MUTED	beebsound.h	/^#define MUTED /;"	d
MachineType	main.cc	/^Model MachineType;$/;"	v
Mask	disc8271.cc	/^  unsigned char Mask; \/* Mask command with this before comparing with CommandNum - allows drive ID to be removed *\/$/;"	m	struct:__anon21	file:
MassageNetworks	econet.cc	/^static bool MassageNetworks = false;  \/\/ massage network numbers on send\/receive (add\/sub 128)$/;"	v	file:
Master128	model.h	/^	Master128, \/\/ 3: BBC Master 128$/;"	m	class:Model
Master512CoPro	Master512CoPro.cc	/^Master512CoPro::Master512CoPro()$/;"	f	class:Master512CoPro
Master512CoPro	Master512CoPro.h	/^class Master512CoPro$/;"	c
Master512CoPro	tube.h	/^    Master512CoPro,$/;"	m	class:Tube
MaxSects	disc1770.cc	/^static unsigned char MaxSects[2]; \/\/ Maximum sectors per track$/;"	v	file:
MemSel	beebmem.cc	/^int MemSel=0; \/* Shadow\/Main RAM Toggle *\/$/;"	v
MemState	beebstate.h	/^	unsigned char MemState[32768];$/;"	m	struct:__anon28
MemoryDump6502	6502core.cc	/^void MemoryDump6502(int addr, int count)$/;"	f
MenuOn	beebwin.cc	/^bool MenuOn;$/;"	v
MenuReference	GetFile.h	/^  typedef MenuHandle      MenuReference;$/;"	t
Message	scsi.cc	/^static void Message(void)$/;"	f	file:
Mod_RM	ea.h	/^} Mod_RM;$/;"	v	typeref:struct:__anon5
Mode7DoubleHeightFlags	video.cc	/^static int Mode7DoubleHeightFlags[80]; \/* Pessimistic size for this flags - if 1 then corresponding character on NEXT line is top half *\/$/;"	v	file:
Mode7FlashOn	video.cc	/^static int Mode7FlashOn=1; \/* True if a flashing character in mode 7 is on *\/$/;"	v	file:
Mode7FlashTrigger	video.cc	/^int Mode7FlashTrigger=MODE7ONFIELDS;$/;"	v
ModeSelect	scsi.cc	/^static void ModeSelect(void)$/;"	f	file:
ModeSense	scsi.cc	/^static void ModeSense(void)$/;"	f	file:
Model	model.h	/^enum class Model : unsigned char {$/;"	c
Motor	beebwin.h	/^	bool Motor;$/;"	m	struct:LEDType
MultiSect	disc1770.cc	/^static bool MultiSect = false;$/;"	v	file:
MySerialReadThread	serialdevices.cc	/^OSStatus MySerialReadThread(void *parameter)$/;"	f
MySerialStatusThread	serialdevices.cc	/^OSStatus MySerialStatusThread(void *parameter)$/;"	f
NATIVE_ENDIAN_VALUE_LE_BE	Master512CoPro.h	/^#define NATIVE_ENDIAN_VALUE_LE_BE(/;"	d
NAck	econet.cc	/^    NAck = 4,$/;"	m	class:AUNType	file:
NColsLookup	video.cc	/^static int NColsLookup[]={16, 4, 2, 0 \/* Not supported 16? *\/, 0, 16, 4, 2}; \/* Based on AUG 379 *\/$/;"	v	file:
NEGNOT_M16	Master512CoPro.cc	/^	NEGNOT_R8, NEGNOT_R16, NEGNOT_M8, NEGNOT_M16,   \/\/ neg\/not$/;"	e	enum:__anon26	file:
NEGNOT_M8	Master512CoPro.cc	/^	NEGNOT_R8, NEGNOT_R16, NEGNOT_M8, NEGNOT_M16,   \/\/ neg\/not$/;"	e	enum:__anon26	file:
NEGNOT_R16	Master512CoPro.cc	/^	NEGNOT_R8, NEGNOT_R16, NEGNOT_M8, NEGNOT_M16,   \/\/ neg\/not$/;"	e	enum:__anon26	file:
NEGNOT_R8	Master512CoPro.cc	/^	NEGNOT_R8, NEGNOT_R16, NEGNOT_M8, NEGNOT_M16,   \/\/ neg\/not$/;"	e	enum:__anon26	file:
NETWORK_TABLE_LENGTH	econet.cc	/^const int NETWORK_TABLE_LENGTH = 512; \/\/ total number of hosts we can know about$/;"	m	class:AUNType::FourWayStage	file:
NEW_UEF_BUF	serial.cc	/^int UEF_BUF=0,NEW_UEF_BUF=0;$/;"	v
NMILock	6502core.cc	/^bool NMILock = false; \/* Well I think NMI's are maskable - to stop repeated NMI's - the lock is released when an RTI is done *\/$/;"	v
NMIStatus	6502core.cc	/^unsigned char NMIStatus=0; \/* bit set (nums in NMI_Nums) if NMI being caused *\/$/;"	v
NMI_IRQ	Master512CoPro.cc	/^const uint32_t NMI_IRQ = 0x02;$/;"	v
NMI_Nums	6502core.h	/^typedef enum NMI_Nums {$/;"	g
NMI_Nums	6502core.h	/^} NMI_Nums;$/;"	t	typeref:enum:NMI_Nums
NOP	Master512CoPro.cc	/^	HLT, LOAD_PTR, LEA, NOP, WAIT, XLAT,            \/\/ MISC$/;"	e	enum:__anon26	file:
NORM	debug.cc	/^#define NORM /;"	d	file:
NORM	debug_org.cc	/^#define NORM /;"	d	file:
NORMAL_TAPE_SPEED	uef.cc	/^#define NORMAL_TAPE_SPEED /;"	d	file:
NO_TIMER_INT_DUE	6502core.h	/^#define NO_TIMER_INT_DUE	/;"	d
NParams	disc8271.cc	/^  int NParams; \/* Number of parameters to follow *\/$/;"	m	struct:__anon21	file:
NParamsInThisCommand	disc8271.cc	/^static int NParamsInThisCommand;$/;"	v	file:
NSectors	disc8271.cc	/^  int NSectors; \/* i.e. the number of records we have - not anything physical *\/$/;"	m	struct:__anon19	file:
NULL	common.h	/^#define NULL /;"	d
NUM_SOUND_SAMPLES	beebsound.cc	/^#define NUM_SOUND_SAMPLES /;"	d	file:
N_FLAG	Arm.h	/^#define N_FLAG	/;"	d
NativeFDC	beebmem.cc	/^bool NativeFDC; \/\/ TRUE for 8271, FALSE for DLL extension$/;"	v
NewDiscImage	beebwin.cc	/^void BeebWin::NewDiscImage(int Drive)$/;"	f	class:BeebWin
NewTapeImage	beebwin.cc	/^void BeebWin::NewTapeImage(char *FileName)$/;"	f	class:BeebWin
NextFDCommand	disc1770.cc	/^static unsigned char NextFDCommand = 0; \/\/ Next FDCommand during spin up\/settling periods $/;"	v	file:
NextInterruptIsErr	disc8271.cc	/^static unsigned char NextInterruptIsErr; \/\/ none 0 causes error and drops this value into result reg$/;"	v	file:
NextLineBottom	video.cc	/^static int NextLineBottom=0; \/\/ 1 if the next line of double height should be bottoms only$/;"	v	file:
Noise	beebsound.cc	/^	} Noise;$/;"	m	struct:BeebState76489_S	typeref:struct:BeebState76489_S::__anon27	file:
None	tube.h	/^    None,$/;"	m	class:Tube
NotImp	disc8271.cc	/^static void NotImp(const char *NotImpCom) {$/;"	f	file:
NumHeads	disc8271.cc	/^static int NumHeads[2];$/;"	v	file:
ODCDI	serial.cc	/^unsigned char DCD=0,DCDI=1,ODCDI=1,DCDClear=0; \/\/ count to clear DCD bit$/;"	v
OF	Master512CoPro.cc	/^#define OF /;"	d	file:
ONE_REV_TIME	disc1770.cc	/^const int ONE_REV_TIME   = 500000; \/\/ 1 sixth of a second - used for density mismatch$/;"	v
ORAInstrHandler	6502core.cc	/^INLINE static void ORAInstrHandler(int16 operand) {$/;"	f	file:
ORAInstrHandler	tube.cc	/^INLINE static void ORAInstrHandler(int16 operand) {$/;"	f	file:
ORB	Master512CoPro.cc	/^inline void Master512CoPro::ORB()$/;"	f	class:Master512CoPro
ORW	Master512CoPro.cc	/^inline void Master512CoPro::ORW()$/;"	f	class:Master512CoPro
OSD_CPU_H	osd_cpu.h	/^#define OSD_CPU_H$/;"	d
OUTS16	Master512CoPro.cc	/^	OUTS16, REP_OUTS16_BASE, REP_OUTS16_COUNT,      \/\/ (80186) outs 16-BIT$/;"	e	enum:__anon26	file:
OUTS8	Master512CoPro.cc	/^	OUTS8, REP_OUTS8_BASE, REP_OUTS8_COUNT,         \/\/ (80186) outs 8-BIT$/;"	e	enum:__anon26	file:
OUT_DX16	Master512CoPro.cc	/^	OUT_IMM8, OUT_IMM16, OUT_DX8, OUT_DX16,         \/\/ PORT WRITES$/;"	e	enum:__anon26	file:
OUT_DX8	Master512CoPro.cc	/^	OUT_IMM8, OUT_IMM16, OUT_DX8, OUT_DX16,         \/\/ PORT WRITES$/;"	e	enum:__anon26	file:
OUT_IMM16	Master512CoPro.cc	/^	OUT_IMM8, OUT_IMM16, OUT_DX8, OUT_DX16,         \/\/ PORT WRITES$/;"	e	enum:__anon26	file:
OUT_IMM8	Master512CoPro.cc	/^	OUT_IMM8, OUT_IMM16, OUT_DX8, OUT_DX16,         \/\/ PORT WRITES$/;"	e	enum:__anon26	file:
OVERRIDE	Master512CoPro.cc	/^	OVERRIDE,                                       \/\/ SEGMENT OVERRIDES$/;"	e	enum:__anon26	file:
OldAutoRepeat	beebwin.h	/^	int OldAutoRepeat; \/* -1 means we don't know, 0 and 1 are as returned from XGetKeyboardControl *\/$/;"	m	class:BeebWin
OldCMOSState	sysvia.cc	/^bool OldCMOSState=false;$/;"	v
OldClock	serial.cc	/^int TapeClock=0,OldClock=0;$/;"	v
OldRelayState	serial.cc	/^unsigned char OldRelayState=0;$/;"	v
Op	beebmem.h	/^	unsigned char Op;$/;"	m	struct:CMOSType
OpCodes	6502core.cc	/^int OpCodes=2; \/\/ 1 = documented only, 2 = commonoly used undocumenteds, 3 = full set$/;"	v
OpenFailed	csw.h	/^     OpenFailed,$/;"	m	class:CSWResult
OpenFailed	uefstate.h	/^    OpenFailed,$/;"	m	class:UEFStateResult
OpenLog	log.cc	/^void OpenLog()$/;"	f
OpenSerialPort	serialdevices.cc	/^int OpenSerialPort(const char *bsdPath)$/;"	f
OpenedReadOnly	disc1770.h	/^    OpenedReadOnly,$/;"	m	class:Disc1770Result
OpenedReadWrite	disc1770.h	/^    OpenedReadWrite,$/;"	m	class:Disc1770Result
OurTime	beebsound.cc	/^static double OurTime=0.0; \/* Time in sample periods *\/$/;"	v	file:
Output	z80.h	/^#define Output(/;"	d
PASCAL_RTN	GetFile.h	/^  #define PASCAL_RTN /;"	d
PCB_CA1_POSITIVE_INT	viastate.h	/^const unsigned char PCB_CA1_POSITIVE_INT = 0x01;$/;"	v
PCB_CB1_POSITIVE_INT	viastate.h	/^const unsigned char PCB_CB1_POSITIVE_INT = 0x10;$/;"	v
PCMASK	Arm.h	/^#define PCMASK	/;"	d
PCR_CA1_INTERRUPT_CONTROL	viastate.h	/^const unsigned char PCR_CA1_INTERRUPT_CONTROL = 0x01;$/;"	v
PCR_CA2_CONTROL	viastate.h	/^const unsigned char PCR_CA2_CONTROL           = 0x0e;$/;"	v
PCR_CA2_OUTPUT_HIGH	viastate.h	/^const unsigned char PCR_CA2_OUTPUT_HIGH  = 0x0e;$/;"	v
PCR_CA2_OUTPUT_LOW	viastate.h	/^const unsigned char PCR_CA2_OUTPUT_LOW   = 0x0c;$/;"	v
PCR_CA2_OUTPUT_PULSE	viastate.h	/^const unsigned char PCR_CA2_OUTPUT_PULSE = 0x0a;$/;"	v
PCR_CB1_INTERRUPT_CONTROL	viastate.h	/^const unsigned char PCR_CB1_INTERRUPT_CONTROL = 0x10;$/;"	v
PCR_CB2_CONTROL	viastate.h	/^const unsigned char PCR_CB2_CONTROL           = 0xe0;$/;"	v
PCR_CB2_OUTPUT_HIGH	viastate.h	/^const unsigned char PCR_CB2_OUTPUT_HIGH  = 0xe0;$/;"	v
PCR_CB2_OUTPUT_LOW	viastate.h	/^const unsigned char PCR_CB2_OUTPUT_LOW   = 0xc0;$/;"	v
PCR_CB2_OUTPUT_PULSE	viastate.h	/^const unsigned char PCR_CB2_OUTPUT_PULSE = 0xa0;$/;"	v
PC_MASK	Arm.h	/^#define PC_MASK	/;"	d
PF	Master512CoPro.cc	/^#define PF /;"	d	file:
POP	Master512CoPro.cc	/^inline uint16_t Master512CoPro::POP()$/;"	f	class:Master512CoPro
POP	z80.cc	/^#define POP(/;"	d	file:
POPA	Master512CoPro.cc	/^	PUSH_IMM, PUSHA, POPA,                          \/\/ (80186) push IMMEDIATE, pusha\/popa$/;"	e	enum:__anon26	file:
POPF	Master512CoPro.cc	/^	POP_R16, POP_M16, POP_SEG, POPF,                \/\/ POPS$/;"	e	enum:__anon26	file:
POP_M16	Master512CoPro.cc	/^	POP_R16, POP_M16, POP_SEG, POPF,                \/\/ POPS$/;"	e	enum:__anon26	file:
POP_R16	Master512CoPro.cc	/^	POP_R16, POP_M16, POP_SEG, POPF,                \/\/ POPS$/;"	e	enum:__anon26	file:
POP_SEG	Master512CoPro.cc	/^	POP_R16, POP_M16, POP_SEG, POPF,                \/\/ POPS$/;"	e	enum:__anon26	file:
PORT_HEADER	port.h	/^#define PORT_HEADER$/;"	d
PRAM	beebmem.cc	/^unsigned char Sh_Display,Sh_CPUX,Sh_CPUE,PRAM,FRAM;$/;"	v
PREFETCH_ABORT_VECTOR	Arm.h	/^#define PREFETCH_ABORT_VECTOR	/;"	d
PREFSAMPLERATE	beebsound.cc	/^#define PREFSAMPLERATE /;"	d	file:
PRINTER_TRIGGER	uservia.h	/^#define PRINTER_TRIGGER /;"	d
PSR	6502core.cc	/^static unsigned char StackReg,PSR;$/;"	v	file:
PSR	tube.cc	/^static unsigned char StackReg,PSR;$/;"	v	file:
PSRFlags	debug_org.cc	/^enum PSRFlags {$/;"	g	file:
PSRMASK	Arm.h	/^#define PSRMASK	/;"	d
PSR_Flags	6502core.h	/^typedef enum PSR_Flags$/;"	g
PSR_Flags	6502core.h	/^} PSR_Flags;$/;"	t	typeref:enum:PSR_Flags
PSR_MASK	Arm.h	/^#define PSR_MASK	/;"	d
PUSH	Master512CoPro.cc	/^inline void Master512CoPro::PUSH(uint16_t data)$/;"	f	class:Master512CoPro
PUSH	z80.cc	/^#define PUSH(/;"	d	file:
PUSHA	Master512CoPro.cc	/^	PUSH_IMM, PUSHA, POPA,                          \/\/ (80186) push IMMEDIATE, pusha\/popa$/;"	e	enum:__anon26	file:
PUSHF	Master512CoPro.cc	/^	PUSH_R16, PUSH_M16, PUSH_SEG, PUSHF,            \/\/ PUSHES$/;"	e	enum:__anon26	file:
PUSH_IMM	Master512CoPro.cc	/^	PUSH_IMM, PUSHA, POPA,                          \/\/ (80186) push IMMEDIATE, pusha\/popa$/;"	e	enum:__anon26	file:
PUSH_M16	Master512CoPro.cc	/^	PUSH_R16, PUSH_M16, PUSH_SEG, PUSHF,            \/\/ PUSHES$/;"	e	enum:__anon26	file:
PUSH_R16	Master512CoPro.cc	/^	PUSH_R16, PUSH_M16, PUSH_SEG, PUSHF,            \/\/ PUSHES$/;"	e	enum:__anon26	file:
PUSH_SEG	Master512CoPro.cc	/^	PUSH_R16, PUSH_M16, PUSH_SEG, PUSHF,            \/\/ PUSHES$/;"	e	enum:__anon26	file:
PagedRomReg	beebmem.cc	/^int PagedRomReg;$/;"	v
PaletteType	beebwin.h	/^	enum PaletteType { RGB, BW, AMBER, GREEN } palette_type;$/;"	g	class:BeebWin
ParamRegWrite	disc8271.cc	/^static void ParamRegWrite(unsigned char Value) {$/;"	f	file:
Params	disc8271.cc	/^static unsigned char Params[16]; \/* Wildly more than we need *\/$/;"	v	file:
Parity	serial.cc	/^unsigned char Parity,Stop_Bits,Data_Bits,RIE,TIE; \/\/ Receive Intterrupt Enable$/;"	v
PartSamples	beebsound.cc	/^int PartSamples=1;$/;"	v
PasteKey	beebwin.cc	/^int BeebWin::PasteKey(int addr)$/;"	f	class:BeebWin
PhysRecLength	disc8271.cc	/^    unsigned int PhysRecLength;$/;"	m	struct:__anon17::__anon18	file:
PixmapLine	video.cc	/^  int PixmapLine; \/* Current line in the pixmap *\/$/;"	m	struct:__anon4	file:
PlaySoundSample	beebsound.cc	/^void PlaySoundSample(int sample, bool repeat) {$/;"	f
PlayUpTil	beebsound.cc	/^void PlayUpTil(double DestTime) {$/;"	f
PlaybackIOProc	audev-macosx.cc	/^static OSStatus PlaybackIOProc(AudioDeviceID inDevice,$/;"	f	file:
Playing	beebsound.cc	/^bool Playing = 0;$/;"	v
Pointer	econet.cc	/^    volatile unsigned int Pointer;$/;"	m	struct:AUNType::FourWayStage::EconetPacket	file:
Pointer	econet.cc	/^    volatile unsigned int Pointer;$/;"	m	struct:AUNType::FourWayStage::EthernetPacket	file:
Poll1770	disc1770.cc	/^void Poll1770(int NCycles) {$/;"	f
PollHardware	6502core.cc	/^void PollHardware(unsigned int nCycles) {$/;"	f
PollVIAs	6502core.cc	/^void PollVIAs(unsigned int nCycles) {$/;"	f
Pop	6502core.cc	/^INLINE static unsigned char Pop(void) {$/;"	f	file:
Pop	tube.cc	/^INLINE static unsigned char Pop(void) {$/;"	f	file:
PopWord	6502core.cc	/^INLINE static int16 PopWord() {$/;"	f	file:
PopWord	tube.cc	/^INLINE static int16 PopWord() {$/;"	f	file:
PrePC	6502core.cc	/^int PrePC;$/;"	v
PreTPC	tube.cc	/^static int PreTPC; \/\/ Previous Tube Program Counter;$/;"	v	file:
PresentParam	disc8271.cc	/^static int PresentParam; \/* From 0 *\/$/;"	v	file:
PreviousFirstPixmapLine	video.cc	/^  int PreviousFirstPixmapLine; \/* The first pixmap line on the previous frame *\/$/;"	m	struct:__anon4	file:
PreviousLastPixmapLine	video.cc	/^  int PreviousLastPixmapLine; \/* The last pixmap line on the previous frame *\/$/;"	m	struct:__anon4	file:
PrimaryCommandLookup	disc8271.cc	/^static const PrimaryCommandLookupType PrimaryCommandLookup[]={$/;"	v	file:
PrimaryCommandLookupType	disc8271.cc	/^} PrimaryCommandLookupType; $/;"	t	typeref:struct:__anon21	file:
PrintHex	z80_support.cc	/^void PrintHex(int addr)$/;"	f
PrinterDisable	uservia.cc	/^void PrinterDisable() {$/;"	f
PrinterEnable	uservia.cc	/^void PrinterEnable(char *FileName) {$/;"	f
PrinterEnabled	uservia.cc	/^bool PrinterEnabled = false;$/;"	v
PrinterFile	beebwin.cc	/^bool BeebWin::PrinterFile()$/;"	f	class:BeebWin
PrinterFileHandle	uservia.cc	/^FILE *PrinterFileHandle = NULL;$/;"	v
PrinterFileName	uservia.cc	/^static char PrinterFileName[256];$/;"	v	file:
PrinterPoll	uservia.cc	/^void PrinterPoll() {$/;"	f
PrinterTrigger	uservia.cc	/^int PrinterTrigger = 0;$/;"	v
Private	beebmem.cc	/^unsigned char Private[12288];$/;"	v
PrivateRAM	beebmem.cc	/^unsigned char PrivateRAM[4096]; \/\/ 4K Private RAM (VDU Use mainly)$/;"	v
ProgramCounter	6502core.cc	/^int ProgramCounter;$/;"	v
PrvEn	beebmem.cc	/^int PrvEn=0; \/* Private RAM Enable *\/$/;"	v
Prvs1	beebmem.cc	/^int Prvs1=0; \/* Private RAM 1K Area *\/$/;"	v
Prvs4	beebmem.cc	/^int Prvs4=0; \/* Private RAM 4K Area *\/$/;"	v
Prvs8	beebmem.cc	/^int Prvs8=0; \/* Private RAM 8K Area *\/$/;"	v
PulseSysViaCB1	sysvia.cc	/^void PulseSysViaCB1(void) {$/;"	f
Push	6502core.cc	/^INLINE static void Push(unsigned char ToPush) {$/;"	f	file:
Push	tube.cc	/^INLINE static void Push(unsigned char ToPush) {$/;"	f	file:
PushWord	6502core.cc	/^INLINE static void PushWord(int16 topush) {$/;"	f	file:
PushWord	tube.cc	/^INLINE static void PushWord(int16 topush) {$/;"	f	file:
PutBYTE	z80mem.h	/^#define PutBYTE(/;"	d
PutBYTE_mm	z80mem.h	/^#define PutBYTE_mm(/;"	d
PutBYTE_pp	z80mem.h	/^#define PutBYTE_pp(/;"	d
PutImmRMByte	Master512CoPro.cc	/^inline void Master512CoPro::PutImmRMByte()$/;"	f	class:Master512CoPro
PutImmRMByte	ea.h	/^#define PutImmRMByte(/;"	d
PutImmRMWord	Master512CoPro.cc	/^inline void Master512CoPro::PutImmRMWord()$/;"	f	class:Master512CoPro
PutImmRMWord	ea.h	/^#define PutImmRMWord(/;"	d
PutMemB	Master512CoPro.cc	/^inline void Master512CoPro::PutMemB(int seg, uint16_t offset, uint8_t data)$/;"	f	class:Master512CoPro
PutMemW	Master512CoPro.cc	/^inline void Master512CoPro::PutMemW(int seg, uint16_t offset, uint16_t data)$/;"	f	class:Master512CoPro
PutRMByte	Master512CoPro.cc	/^inline void Master512CoPro::PutRMByte(uint8_t val)$/;"	f	class:Master512CoPro
PutRMByte	ea.h	/^#define PutRMByte(/;"	d
PutRMByteOffset	ea.h	/^#define PutRMByteOffset(/;"	d
PutRMWord	Master512CoPro.cc	/^inline void Master512CoPro::PutRMWord(uint16_t val)$/;"	f	class:Master512CoPro
PutRMWord	ea.h	/^#define PutRMWord(/;"	d
PutRMWordOffset	ea.h	/^#define PutRMWordOffset(/;"	d
PutWORD	z80mem.h	/^#define PutWORD(/;"	d
PutbackRMByte	Master512CoPro.cc	/^inline void Master512CoPro::PutbackRMByte(uint8_t data)$/;"	f	class:Master512CoPro
PutbackRMByte	ea.h	/^#define PutbackRMByte(/;"	d
PutbackRMWord	Master512CoPro.cc	/^inline void Master512CoPro::PutbackRMWord(uint16_t data)$/;"	f	class:Master512CoPro
PutbackRMWord	ea.h	/^#define PutbackRMWord(/;"	d
QTFrameFileFilterUPP	GetFile.h	/^  typedef NavObjectFilterUPP  QTFrameFileFilterUPP;$/;"	t
R1	tube.h	/^	R1,$/;"	e	enum:TubeIRQ
R1HPData	tube.cc	/^unsigned char R1HPData;$/;"	v
R1HStatus	tube.cc	/^unsigned char R1HStatus;$/;"	v
R1PHData	tube.cc	/^unsigned char R1PHData[TubeBufferLength * 2];$/;"	v
R1PHPtr	tube.cc	/^int R1PHPtr;$/;"	v
R1PStatus	tube.cc	/^unsigned char R1PStatus;$/;"	v
R1Status	tube.cc	/^unsigned char R1Status; \/\/ Q,I,J,M,V,P flags$/;"	v
R2HPData	tube.cc	/^unsigned char R2HPData;$/;"	v
R2HStatus	tube.cc	/^unsigned char R2HStatus;$/;"	v
R2PHData	tube.cc	/^unsigned char R2PHData;$/;"	v
R2PStatus	tube.cc	/^unsigned char R2PStatus;$/;"	v
R3	tube.h	/^	R3$/;"	e	enum:TubeNMI
R3HPData	tube.cc	/^unsigned char R3HPData[2];$/;"	v
R3HPPtr	tube.cc	/^unsigned char R3HPPtr;$/;"	v
R3HStatus	tube.cc	/^unsigned char R3HStatus;$/;"	v
R3PHData	tube.cc	/^unsigned char R3PHData[2];$/;"	v
R3PHPtr	tube.cc	/^unsigned char R3PHPtr;$/;"	v
R3PStatus	tube.cc	/^unsigned char R3PStatus;$/;"	v
R4	tube.h	/^	R4$/;"	e	enum:TubeIRQ
R4HPData	tube.cc	/^unsigned char R4HPData;$/;"	v
R4HStatus	tube.cc	/^unsigned char R4HStatus;$/;"	v
R4PHData	tube.cc	/^unsigned char R4PHData;$/;"	v
R4PStatus	tube.cc	/^unsigned char R4PStatus;$/;"	v
RDB_flag	speech.h	/^	int RDB_flag;					\/* whether we should read data register or status register *\/$/;"	m	struct:tms5220
RDR	serial.cc	/^unsigned char RDR,TDR; \/\/ Receive and Transmit Data Registers$/;"	v
RDSR	serial.cc	/^unsigned char RDSR,TDSR; \/\/ Receive and Transmit Data Shift Registers (buffers)$/;"	v
REL	debug.cc	/^#define REL /;"	d	file:
REL	debug_org.cc	/^#define REL /;"	d	file:
REP_CMPS16_BASE	Master512CoPro.cc	/^	CMPS16, REP_CMPS16_BASE, REP_CMPS16_COUNT,      \/\/ cmps 16-BIT$/;"	e	enum:__anon26	file:
REP_CMPS16_COUNT	Master512CoPro.cc	/^	CMPS16, REP_CMPS16_BASE, REP_CMPS16_COUNT,      \/\/ cmps 16-BIT$/;"	e	enum:__anon26	file:
REP_CMPS8_BASE	Master512CoPro.cc	/^	CMPS8, REP_CMPS8_BASE, REP_CMPS8_COUNT,         \/\/ cmps 8-BIT$/;"	e	enum:__anon26	file:
REP_CMPS8_COUNT	Master512CoPro.cc	/^	CMPS8, REP_CMPS8_BASE, REP_CMPS8_COUNT,         \/\/ cmps 8-BIT$/;"	e	enum:__anon26	file:
REP_INS16_BASE	Master512CoPro.cc	/^	INS16, REP_INS16_BASE, REP_INS16_COUNT,         \/\/ (80186) ins 16-BIT$/;"	e	enum:__anon26	file:
REP_INS16_COUNT	Master512CoPro.cc	/^	INS16, REP_INS16_BASE, REP_INS16_COUNT,         \/\/ (80186) ins 16-BIT$/;"	e	enum:__anon26	file:
REP_INS8_BASE	Master512CoPro.cc	/^	INS8, REP_INS8_BASE, REP_INS8_COUNT,            \/\/ (80186) ins 8-BIT$/;"	e	enum:__anon26	file:
REP_INS8_COUNT	Master512CoPro.cc	/^	INS8, REP_INS8_BASE, REP_INS8_COUNT,            \/\/ (80186) ins 8-BIT$/;"	e	enum:__anon26	file:
REP_LODS16_BASE	Master512CoPro.cc	/^	LODS16, REP_LODS16_BASE, REP_LODS16_COUNT,      \/\/ lods 16-BIT$/;"	e	enum:__anon26	file:
REP_LODS16_COUNT	Master512CoPro.cc	/^	LODS16, REP_LODS16_BASE, REP_LODS16_COUNT,      \/\/ lods 16-BIT$/;"	e	enum:__anon26	file:
REP_LODS8_BASE	Master512CoPro.cc	/^	LODS8, REP_LODS8_BASE, REP_LODS8_COUNT,         \/\/ lods 8-BIT$/;"	e	enum:__anon26	file:
REP_LODS8_COUNT	Master512CoPro.cc	/^	LODS8, REP_LODS8_BASE, REP_LODS8_COUNT,         \/\/ lods 8-BIT$/;"	e	enum:__anon26	file:
REP_MOVS16_BASE	Master512CoPro.cc	/^	MOVS16, REP_MOVS16_BASE, REP_MOVS16_COUNT,      \/\/ movs 16-BIT$/;"	e	enum:__anon26	file:
REP_MOVS16_COUNT	Master512CoPro.cc	/^	MOVS16, REP_MOVS16_BASE, REP_MOVS16_COUNT,      \/\/ movs 16-BIT$/;"	e	enum:__anon26	file:
REP_MOVS8_BASE	Master512CoPro.cc	/^	MOVS8, REP_MOVS8_BASE, REP_MOVS8_COUNT,         \/\/ movs 8-BIT$/;"	e	enum:__anon26	file:
REP_MOVS8_COUNT	Master512CoPro.cc	/^	MOVS8, REP_MOVS8_BASE, REP_MOVS8_COUNT,         \/\/ movs 8-BIT$/;"	e	enum:__anon26	file:
REP_OUTS16_BASE	Master512CoPro.cc	/^	OUTS16, REP_OUTS16_BASE, REP_OUTS16_COUNT,      \/\/ (80186) outs 16-BIT$/;"	e	enum:__anon26	file:
REP_OUTS16_COUNT	Master512CoPro.cc	/^	OUTS16, REP_OUTS16_BASE, REP_OUTS16_COUNT,      \/\/ (80186) outs 16-BIT$/;"	e	enum:__anon26	file:
REP_OUTS8_BASE	Master512CoPro.cc	/^	OUTS8, REP_OUTS8_BASE, REP_OUTS8_COUNT,         \/\/ (80186) outs 8-BIT$/;"	e	enum:__anon26	file:
REP_OUTS8_COUNT	Master512CoPro.cc	/^	OUTS8, REP_OUTS8_BASE, REP_OUTS8_COUNT,         \/\/ (80186) outs 8-BIT$/;"	e	enum:__anon26	file:
REP_SCAS16_BASE	Master512CoPro.cc	/^	SCAS16, REP_SCAS16_BASE, REP_SCAS16_COUNT,      \/\/ scas 16-BIT$/;"	e	enum:__anon26	file:
REP_SCAS16_COUNT	Master512CoPro.cc	/^	SCAS16, REP_SCAS16_BASE, REP_SCAS16_COUNT,      \/\/ scas 16-BIT$/;"	e	enum:__anon26	file:
REP_SCAS8_BASE	Master512CoPro.cc	/^	SCAS8, REP_SCAS8_BASE, REP_SCAS8_COUNT,         \/\/ scas 8-BIT$/;"	e	enum:__anon26	file:
REP_SCAS8_COUNT	Master512CoPro.cc	/^	SCAS8, REP_SCAS8_BASE, REP_SCAS8_COUNT,         \/\/ scas 8-BIT$/;"	e	enum:__anon26	file:
REP_STOS16_BASE	Master512CoPro.cc	/^	STOS16, REP_STOS16_BASE, REP_STOS16_COUNT,      \/\/ stos 16-BIT$/;"	e	enum:__anon26	file:
REP_STOS16_COUNT	Master512CoPro.cc	/^	STOS16, REP_STOS16_BASE, REP_STOS16_COUNT,      \/\/ stos 16-BIT$/;"	e	enum:__anon26	file:
REP_STOS8_BASE	Master512CoPro.cc	/^	STOS8, REP_STOS8_BASE, REP_STOS8_COUNT,         \/\/ stos 8-BIT$/;"	e	enum:__anon26	file:
REP_STOS8_COUNT	Master512CoPro.cc	/^	STOS8, REP_STOS8_BASE, REP_STOS8_COUNT,         \/\/ stos 8-BIT$/;"	e	enum:__anon26	file:
RESETTUBEINT	tube.cc	/^#define RESETTUBEINT(/;"	d	file:
RESET_VECTOR	Arm.h	/^#define RESET_VECTOR	/;"	d
RESULT_REG_CLOCK_ERROR	disc8271.cc	/^const unsigned char RESULT_REG_CLOCK_ERROR        = 0x08;$/;"	v
RESULT_REG_DATA_CRC_ERROR	disc8271.cc	/^const unsigned char RESULT_REG_DATA_CRC_ERROR     = 0x0E;$/;"	v
RESULT_REG_DELETED_DATA_FOUND	disc8271.cc	/^const unsigned char RESULT_REG_DELETED_DATA_FOUND = 0x20;$/;"	v
RESULT_REG_DRIVE_NOT_PRESENT	disc8271.cc	/^const unsigned char RESULT_REG_DRIVE_NOT_PRESENT  = 0x1E; \/\/ Undocumented, see http:\/\/beebwiki.mdfs.net\/OSWORD_%267F$/;"	v
RESULT_REG_DRIVE_NOT_READY	disc8271.cc	/^const unsigned char RESULT_REG_DRIVE_NOT_READY    = 0x10;$/;"	v
RESULT_REG_ID_CRC_ERROR	disc8271.cc	/^const unsigned char RESULT_REG_ID_CRC_ERROR       = 0x0C;$/;"	v
RESULT_REG_LATE_DMA	disc8271.cc	/^const unsigned char RESULT_REG_LATE_DMA           = 0x0A;$/;"	v
RESULT_REG_SCAN_MET_EQUAL	disc8271.cc	/^const unsigned char RESULT_REG_SCAN_MET_EQUAL     = 0x02;$/;"	v
RESULT_REG_SCAN_MET_NOT_EQUAL	disc8271.cc	/^const unsigned char RESULT_REG_SCAN_MET_NOT_EQUAL = 0x04;$/;"	v
RESULT_REG_SCAN_NOT_MET	disc8271.cc	/^const unsigned char RESULT_REG_SCAN_NOT_MET       = 0x00;$/;"	v
RESULT_REG_SECTOR_NOT_FOUND	disc8271.cc	/^const unsigned char RESULT_REG_SECTOR_NOT_FOUND   = 0x18;$/;"	v
RESULT_REG_SUCCESS	disc8271.cc	/^const unsigned char RESULT_REG_SUCCESS            = 0x00;$/;"	v
RESULT_REG_TRACK_0_NOT_FOUND	disc8271.cc	/^const unsigned char RESULT_REG_TRACK_0_NOT_FOUND  = 0x14;$/;"	v
RESULT_REG_WRITE_FAULT	disc8271.cc	/^const unsigned char RESULT_REG_WRITE_FAULT        = 0x16;$/;"	v
RESULT_REG_WRITE_PROTECT	disc8271.cc	/^const unsigned char RESULT_REG_WRITE_PROTECT      = 0x12;$/;"	v
RET_FAR	Master512CoPro.cc	/^	RET_NEAR, RET_FAR, RET_NEAR_IMM, RET_FAR_IMM,   \/\/ RETURNS$/;"	e	enum:__anon26	file:
RET_FAR_IMM	Master512CoPro.cc	/^	RET_NEAR, RET_FAR, RET_NEAR_IMM, RET_FAR_IMM,   \/\/ RETURNS$/;"	e	enum:__anon26	file:
RET_NEAR	Master512CoPro.cc	/^	RET_NEAR, RET_FAR, RET_NEAR_IMM, RET_FAR_IMM,   \/\/ RETURNS$/;"	e	enum:__anon26	file:
RET_NEAR_IMM	Master512CoPro.cc	/^	RET_NEAR, RET_FAR, RET_NEAR_IMM, RET_FAR_IMM,   \/\/ RETURNS$/;"	e	enum:__anon26	file:
RGB	beebwin.h	/^	enum PaletteType { RGB, BW, AMBER, GREEN } palette_type;$/;"	e	enum:BeebWin::PaletteType
RIE	serial.cc	/^unsigned char Parity,Stop_Bits,Data_Bits,RIE,TIE; \/\/ Receive Intterrupt Enable$/;"	v
RM	Master512CoPro.h	/^			} RM;$/;"	m	struct:Master512CoPro::__anon14	typeref:struct:Master512CoPro::__anon14::__anon16
RM	ea.h	/^	} RM;$/;"	m	struct:__anon5	typeref:struct:__anon5::__anon7
ROLC_BYTE	Master512CoPro.cc	/^inline void Master512CoPro::ROLC_BYTE()$/;"	f	class:Master512CoPro
ROLC_WORD	Master512CoPro.cc	/^inline void Master512CoPro::ROLC_WORD()$/;"	f	class:Master512CoPro
ROLInstrHandler	6502core.cc	/^INLINE static void ROLInstrHandler(int16 address) {$/;"	f	file:
ROLInstrHandler	tube.cc	/^INLINE static void ROLInstrHandler(int16 address) {$/;"	f	file:
ROLInstrHandler_Acc	6502core.cc	/^INLINE static void ROLInstrHandler_Acc(void) {$/;"	f	file:
ROLInstrHandler_Acc	tube.cc	/^INLINE static void ROLInstrHandler_Acc(void) {$/;"	f	file:
ROL_BYTE	Master512CoPro.cc	/^inline void Master512CoPro::ROL_BYTE()$/;"	f	class:Master512CoPro
ROL_WORD	Master512CoPro.cc	/^inline void Master512CoPro::ROL_WORD()$/;"	f	class:Master512CoPro
ROMSEL	beebmem.cc	/^unsigned char ROMSEL;$/;"	v
ROR	Arm.h	/^#define ROR	/;"	d
RORC_BYTE	Master512CoPro.cc	/^inline void Master512CoPro::RORC_BYTE()$/;"	f	class:Master512CoPro
RORC_WORD	Master512CoPro.cc	/^inline void Master512CoPro::RORC_WORD()$/;"	f	class:Master512CoPro
RORInstrHandler	6502core.cc	/^INLINE static void RORInstrHandler(int16 address) {$/;"	f	file:
RORInstrHandler	tube.cc	/^INLINE static void RORInstrHandler(int16 address) {$/;"	f	file:
RORInstrHandler_Acc	6502core.cc	/^INLINE static void RORInstrHandler_Acc(void) {$/;"	f	file:
RORInstrHandler_Acc	tube.cc	/^INLINE static void RORInstrHandler_Acc(void) {$/;"	f	file:
ROR_BYTE	Master512CoPro.cc	/^inline void Master512CoPro::ROR_BYTE()$/;"	f	class:Master512CoPro
ROR_WORD	Master512CoPro.cc	/^inline void Master512CoPro::ROR_WORD()$/;"	f	class:Master512CoPro
ROT_M16_1	Master512CoPro.cc	/^	ROT_M16_1, ROT_M16_BASE, ROT_M16_BIT,           \/\/ M16 SHIFT\/ROTATE$/;"	e	enum:__anon26	file:
ROT_M16_BASE	Master512CoPro.cc	/^	ROT_M16_1, ROT_M16_BASE, ROT_M16_BIT,           \/\/ M16 SHIFT\/ROTATE$/;"	e	enum:__anon26	file:
ROT_M16_BIT	Master512CoPro.cc	/^	ROT_M16_1, ROT_M16_BASE, ROT_M16_BIT,           \/\/ M16 SHIFT\/ROTATE$/;"	e	enum:__anon26	file:
ROT_M8_1	Master512CoPro.cc	/^	ROT_M8_1, ROT_M8_BASE, ROT_M8_BIT,              \/\/ M8 SHIFT\/ROTATE$/;"	e	enum:__anon26	file:
ROT_M8_BASE	Master512CoPro.cc	/^	ROT_M8_1, ROT_M8_BASE, ROT_M8_BIT,              \/\/ M8 SHIFT\/ROTATE$/;"	e	enum:__anon26	file:
ROT_M8_BIT	Master512CoPro.cc	/^	ROT_M8_1, ROT_M8_BASE, ROT_M8_BIT,              \/\/ M8 SHIFT\/ROTATE$/;"	e	enum:__anon26	file:
ROT_REG_1	Master512CoPro.cc	/^	ROT_REG_1, ROT_REG_BASE, ROT_REG_BIT,           \/\/ REG SHIFT\/ROTATE$/;"	e	enum:__anon26	file:
ROT_REG_BASE	Master512CoPro.cc	/^	ROT_REG_1, ROT_REG_BASE, ROT_REG_BIT,           \/\/ REG SHIFT\/ROTATE$/;"	e	enum:__anon26	file:
ROT_REG_BIT	Master512CoPro.cc	/^	ROT_REG_1, ROT_REG_BASE, ROT_REG_BIT,           \/\/ REG SHIFT\/ROTATE$/;"	e	enum:__anon26	file:
RS423	serial.cc	/^#define RS423 /;"	d	file:
RTCInit	sysvia.cc	/^void RTCInit(void) {$/;"	f
RTCTimeOffset	sysvia.cc	/^time_t RTCTimeOffset = 0;$/;"	v
RTCUpdate	sysvia.cc	/^void RTCUpdate(void) {$/;"	f
RTCWrite	uservia.cc	/^void RTCWrite(int Value, int lastValue)$/;"	f
RTCY2KAdjust	sysvia.cc	/^bool RTCY2KAdjust = true;$/;"	v
RTC_Enabled	uservia.cc	/^bool RTC_Enabled = false;$/;"	v
RTC_bit	uservia.cc	/^int RTC_bit = 0;$/;"	v
RTC_cmd	uservia.cc	/^int RTC_cmd = 0;$/;"	v
RTC_data	uservia.cc	/^int RTC_data = 0;        \/\/ Mon    Yr   Day         Hour        Min$/;"	v
RTC_ram	uservia.cc	/^unsigned char RTC_ram[8] = {0x12, 0x01, 0x05, 0x00, 0x05, 0x00, 0x07, 0x00};$/;"	v
RTS	serial.cc	/^unsigned char CTS,RTS,FirstReset=1;$/;"	v
RXBuff	serialdevices.cc	/^unsigned char RXBuff[4096];$/;"	v
RXHead	serialdevices.cc	/^int RXHead = 0;$/;"	v
RXLen	serialdevices.cc	/^int RXLen = 0;$/;"	v
RXTail	serialdevices.cc	/^int RXTail = 0;$/;"	v
RaiseDCD	serialdevices.cc	/^void RaiseDCD(void)$/;"	f
Read1770Register	disc1770.cc	/^unsigned char Read1770Register(unsigned char Register) {$/;"	f
Read6	scsi.cc	/^static void Read6(void)$/;"	f	file:
ReadData	scsi.cc	/^static int ReadData(void)$/;"	f	file:
ReadDisc	beebwin.cc	/^void BeebWin::ReadDisc(int drive)$/;"	f	class:BeebWin
ReadEconetRegister	econet.cc	/^unsigned char ReadEconetRegister(unsigned char Register) {$/;"	f	class:AUNType::FourWayStage	file:
ReadFDCControlReg	disc1770.cc	/^unsigned char ReadFDCControlReg(void) {$/;"	f
ReadIDInterrupt	disc8271.cc	/^static void ReadIDInterrupt(void) {$/;"	f	file:
ReadInterrupt	disc8271.cc	/^static void ReadInterrupt(void) {$/;"	f	file:
ReadNetwork	econet.cc	/^void ReadNetwork(void) {$/;"	f	class:AUNType::FourWayStage	file:
ReadPaged	6502core.cc	/^#define ReadPaged(/;"	d	file:
ReadRomTitle	beebmem.cc	/^char *ReadRomTitle( int bank, char *Title, int BufSize )$/;"	f
ReadSector	scsi.cc	/^static int ReadSector(unsigned char *buf, int block)$/;"	f	file:
ReadTorchTubeFromHostSide	tube.cc	/^unsigned char ReadTorchTubeFromHostSide(unsigned char IOAddr) $/;"	f
ReadTorchTubeFromParasiteSide	tube.cc	/^unsigned char ReadTorchTubeFromParasiteSide(unsigned char IOAddr) $/;"	f
ReadTubeFromHostSide	tube.cc	/^unsigned char ReadTubeFromHostSide(unsigned char IOAddr) {$/;"	f
ReadTubeFromParasiteSide	tube.cc	/^unsigned char ReadTubeFromParasiteSide(unsigned char IOAddr) {$/;"	f
ReadZ80Mem	z80_support.cc	/^unsigned char ReadZ80Mem(int pc)$/;"	f
Read_ACIA_Rx_Data	serial.cc	/^unsigned char Read_ACIA_Rx_Data(void) {$/;"	f
Read_ACIA_Status	serial.cc	/^unsigned char Read_ACIA_Status(void) {$/;"	f
Read_Econet_Station	econet.cc	/^unsigned char Read_Econet_Station(void) {$/;"	f	class:AUNType::FourWayStage	file:
Read_SERPROC	serial.cc	/^unsigned char Read_SERPROC(void) {$/;"	f
RealVolumes	beebsound.cc	/^int RealVolumes[4]; \/\/ Holds the real volume values for state save use$/;"	v
RealizePalette	beebwin.h	/^	void RealizePalette(void) {};$/;"	f	class:BeebWin
ReceiverSocketsOpen	econet.cc	/^static bool ReceiverSocketsOpen = false;		\/\/ Used to flag line up and clock running$/;"	v	file:
ReceivingData	csw.cc	/^    ReceivingData,$/;"	m	class:CSWDataState	file:
RecordNum	disc8271.cc	/^    unsigned int RecordNum:5;$/;"	m	struct:__anon17::__anon18	file:
RedoMPTR	video.cc	/^void RedoMPTR(void) {$/;"	f
Reg	Arm.h	/^typedef unsigned int Reg;$/;"	t
RegByte	Master512CoPro.cc	/^inline uint8_t Master512CoPro::RegByte()$/;"	f	class:Master512CoPro
RegByte	Master512CoPro.cc	/^inline void Master512CoPro::RegByte(uint8_t data)$/;"	f	class:Master512CoPro
RegByte	ea.h	/^#define RegByte(/;"	d
RegWord	Master512CoPro.cc	/^inline uint16_t Master512CoPro::RegWord()$/;"	f	class:Master512CoPro
RegWord	Master512CoPro.cc	/^inline void Master512CoPro::RegWord(uint16_t data)$/;"	f	class:Master512CoPro
RegWord	ea.h	/^#define RegWord(/;"	d
RelAddrModeHandler_Data	6502core.cc	/^INLINE static int16 RelAddrModeHandler_Data(void) {$/;"	f	file:
RelAddrModeHandler_Data	tube.cc	/^INLINE static int16 RelAddrModeHandler_Data(void) {$/;"	f	file:
RelaySoundEnabled	beebsound.cc	/^int RelaySoundEnabled = 0;$/;"	v
RequestSense	scsi.cc	/^static void RequestSense(void)$/;"	f	file:
Reset	Master512CoPro.cc	/^void Master512CoPro::Reset()$/;"	f	class:Master512CoPro
Reset1770	disc1770.cc	/^void Reset1770() {$/;"	f
Reset65C02	tube.cc	/^static void Reset65C02(void) {$/;"	f	file:
ResetACIAStatus	serial.cc	/^void ResetACIAStatus(unsigned char bit) {$/;"	f
ResetBeebSystem	beebwin.cc	/^void BeebWin::ResetBeebSystem(Model NewModelType,unsigned char TubeStatus,unsigned char LoadRoms)$/;"	f	class:BeebWin
ResetClipboard	beebwin.cc	/^void BeebWin::ResetClipboard(void)$/;"	f	class:BeebWin
ResetMemoryBit	tube.cc	/^static void ResetMemoryBit(int bit)$/;"	f	file:
ResetState	Arm.cc	/^void CArm::ResetState()$/;"	f	class:CArm
ResetTiming	beebwin.cc	/^void BeebWin::ResetTiming(void)$/;"	f	class:BeebWin
ResetTube	tube.cc	/^void ResetTube(void) {$/;"	f
RestoreState	beebwin.cc	/^void BeebWin::RestoreState()$/;"	f	class:BeebWin
ResultReg	disc8271.cc	/^static unsigned char ResultReg;$/;"	v	file:
RewindTape	serial.cc	/^void RewindTape(void) {$/;"	f
RomPath	beebmem.cc	/^char RomPath[512];$/;"	v
RomState	beebstate.h	/^	unsigned char RomState[16];$/;"	m	struct:__anon28
RomWritable	beebmem.cc	/^int RomWritable[16] = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};$/;"	v
RomWriteThrough	beebmem.cc	/^static void RomWriteThrough(int Address, unsigned char Value) {$/;"	f	file:
Roms	beebmem.cc	/^unsigned char Roms[16][16384];$/;"	v
RotSect	disc1770.cc	/^static unsigned char RotSect=0; \/\/ Sector counter to fool Opus DDOS on read address$/;"	v	file:
RxD	serial.cc	/^unsigned char TxD,RxD; \/\/ Transmit and Receive destinations (data or shift register)$/;"	v
Rx_Rate	serial.cc	/^unsigned int Tx_Rate=1200,Rx_Rate=1200; \/\/ Recieve and Transmit baud rates.$/;"	v
SAHF	Master512CoPro.cc	/^	FLAG_OPS, LAHF, SAHF,                           \/\/ FLAG OPERATIONS$/;"	e	enum:__anon26	file:
SAMPLE_DRIVE_MOTOR	beebsound.h	/^#define SAMPLE_DRIVE_MOTOR /;"	d
SAMPLE_HEAD_LOAD	beebsound.h	/^#define SAMPLE_HEAD_LOAD /;"	d
SAMPLE_HEAD_LOAD_CYCLES	beebsound.h	/^#define SAMPLE_HEAD_LOAD_CYCLES /;"	d
SAMPLE_HEAD_SEEK	beebsound.h	/^#define SAMPLE_HEAD_SEEK /;"	d
SAMPLE_HEAD_SEEK_CYCLES_PER_TRACK	beebsound.h	/^#define SAMPLE_HEAD_SEEK_CYCLES_PER_TRACK /;"	d
SAMPLE_HEAD_STEP	beebsound.h	/^#define SAMPLE_HEAD_STEP /;"	d
SAMPLE_HEAD_STEP_CYCLES	beebsound.h	/^#define SAMPLE_HEAD_STEP_CYCLES /;"	d
SAMPLE_HEAD_UNLOAD	beebsound.h	/^#define SAMPLE_HEAD_UNLOAD /;"	d
SAMPLE_RELAY_OFF	beebsound.h	/^#define SAMPLE_RELAY_OFF /;"	d
SAMPLE_RELAY_ON	beebsound.h	/^#define SAMPLE_RELAY_ON /;"	d
SASIBusFree	sasi.cc	/^static void SASIBusFree(void)$/;"	f	file:
SASIClose	sasi.cc	/^void SASIClose()$/;"	f
SASICommand	sasi.cc	/^static void SASICommand(void)$/;"	f	file:
SASIControllerDiagnostics	sasi.cc	/^static void SASIControllerDiagnostics(void)$/;"	f	file:
SASIDisc	sasi.cc	/^FILE *SASIDisc[4] = {0};$/;"	v
SASIDiscFormat	sasi.cc	/^static bool SASIDiscFormat(unsigned char *buf)$/;"	f	file:
SASIDiscRequestSense	sasi.cc	/^static int SASIDiscRequestSense(unsigned char *cdb, unsigned char *buf)$/;"	f	file:
SASIDiscRezero	sasi.cc	/^static bool SASIDiscRezero(unsigned char *buf)$/;"	f	file:
SASIDiscTestUnitReady	sasi.cc	/^static bool SASIDiscTestUnitReady(unsigned char *buf)$/;"	f	file:
SASIExecute	sasi.cc	/^static void SASIExecute(void)$/;"	f	file:
SASIFormat	sasi.cc	/^static void SASIFormat(void)$/;"	f	file:
SASIMessage	sasi.cc	/^static void SASIMessage(void)$/;"	f	file:
SASIRamDiagnostics	sasi.cc	/^static void SASIRamDiagnostics(void)$/;"	f	file:
SASIRead	sasi.cc	/^static void SASIRead(void)$/;"	f	file:
SASIRead	sasi.cc	/^unsigned char SASIRead(int Address)$/;"	f
SASIReadData	sasi.cc	/^static int SASIReadData(void)$/;"	f	file:
SASIReadSector	sasi.cc	/^static int SASIReadSector(unsigned char *buf, int block)$/;"	f	file:
SASIRequestSense	sasi.cc	/^static void SASIRequestSense(void)$/;"	f	file:
SASIReset	sasi.cc	/^void SASIReset(void)$/;"	f
SASIRezero	sasi.cc	/^void SASIRezero(void)$/;"	f
SASISeek	sasi.cc	/^static void SASISeek(void)$/;"	f	file:
SASISelection	sasi.cc	/^static void SASISelection(int data)$/;"	f	file:
SASISetGeometory	sasi.cc	/^static void SASISetGeometory(void)$/;"	f	file:
SASIStatus	sasi.cc	/^static void SASIStatus(void)$/;"	f	file:
SASITestUnitReady	sasi.cc	/^static void SASITestUnitReady(void)$/;"	f	file:
SASIVerify	sasi.cc	/^static void SASIVerify(void)$/;"	f	file:
SASIWrite	sasi.cc	/^static void SASIWrite(void)$/;"	f	file:
SASIWrite	sasi.cc	/^void SASIWrite(int Address, int Value) $/;"	f
SASIWriteData	sasi.cc	/^static void SASIWriteData(int data)$/;"	f	file:
SASIWriteGeometory	sasi.cc	/^static bool SASIWriteGeometory(unsigned char *buf)$/;"	f	file:
SASIWriteSector	sasi.cc	/^static bool SASIWriteSector(unsigned char *buf, int block)$/;"	f	file:
SASI_HEADER	sasi.h	/^#define SASI_HEADER$/;"	d
SAVE_STATE	z80.cc	/^#define SAVE_STATE(/;"	d	file:
SBCInstrHandler	6502core.cc	/^INLINE static void SBCInstrHandler(int16 operand) {$/;"	f	file:
SBCInstrHandler	tube.cc	/^INLINE static void SBCInstrHandler(int16 operand) {$/;"	f	file:
SBSize	beebsound.cc	/^int SBSize=1;$/;"	v
SCAS16	Master512CoPro.cc	/^	SCAS16, REP_SCAS16_BASE, REP_SCAS16_COUNT,      \/\/ scas 16-BIT$/;"	e	enum:__anon26	file:
SCAS8	Master512CoPro.cc	/^	SCAS8, REP_SCAS8_BASE, REP_SCAS8_COUNT,         \/\/ scas 8-BIT$/;"	e	enum:__anon26	file:
SCSIClose	scsi.cc	/^void SCSIClose(void)$/;"	f
SCSIDisc	scsi.cc	/^FILE *SCSIDisc[4] = {nullptr, nullptr, nullptr, nullptr};$/;"	v
SCSIDriveEnabled	scsi.cc	/^bool SCSIDriveEnabled = false;$/;"	v
SCSIRead	scsi.cc	/^unsigned char SCSIRead(int Address)$/;"	f
SCSIReset	scsi.cc	/^void SCSIReset(void)$/;"	f
SCSISize	scsi.cc	/^int SCSISize[4];$/;"	v
SCSIWrite	scsi.cc	/^void SCSIWrite(int Address, int Value) $/;"	f
SCSI_HEADER	scsi.h	/^#define SCSI_HEADER$/;"	d
SERIAL_HEADER	serial.h	/^#define SERIAL_HEADER$/;"	d
SETFLAG	z80.h	/^#define SETFLAG(/;"	d
SETTLE_TIME	disc1770.cc	/^const int SETTLE_TIME    = 30000; \/\/ 30 milliseconds$/;"	v
SETTUBEINT	tube.cc	/^#define SETTUBEINT(/;"	d	file:
SF	Master512CoPro.cc	/^#define SF /;"	d	file:
SHL_BYTE	Master512CoPro.cc	/^inline void Master512CoPro::SHL_BYTE(uint8_t c)$/;"	f	class:Master512CoPro
SHL_WORD	Master512CoPro.cc	/^inline void Master512CoPro::SHL_WORD(uint8_t c)$/;"	f	class:Master512CoPro
SHRA_BYTE	Master512CoPro.cc	/^inline void Master512CoPro::SHRA_BYTE(uint8_t c)$/;"	f	class:Master512CoPro
SHRA_WORD	Master512CoPro.cc	/^inline void Master512CoPro::SHRA_WORD(uint8_t c)$/;"	f	class:Master512CoPro
SHR_BYTE	Master512CoPro.cc	/^inline void Master512CoPro::SHR_BYTE(uint8_t c)$/;"	f	class:Master512CoPro
SHR_WORD	Master512CoPro.cc	/^inline void Master512CoPro::SHR_WORD(uint8_t c)$/;"	f	class:Master512CoPro
SI	Master512CoPro.h	/^		enum WREGS { AX = 0, CX, DX, BX, SP, BP, SI, DI };$/;"	e	enum:Master512CoPro::WREGS
SIH	Master512CoPro.h	/^			SIH = NATIVE_ENDIAN_VALUE_LE_BE(0xd, 0xc),$/;"	e	enum:Master512CoPro::BREGS
SIL	Master512CoPro.h	/^			SIL = NATIVE_ENDIAN_VALUE_LE_BE(0xc, 0xd),$/;"	e	enum:Master512CoPro::BREGS
SOCKET	econet.cc	/^typedef int				SOCKET;$/;"	t	file:
SOCKET	serialdevices.cc	/^typedef int	SOCKET;$/;"	t	file:
SOCKET	teletext.cc	/^typedef int	SOCKET;$/;"	t	file:
SOCKET_ERROR	econet.cc	/^#define SOCKET_ERROR	/;"	d	file:
SOCKET_ERROR	serialdevices.cc	/^#define SOCKET_ERROR	/;"	d	file:
SOCKET_ERROR	teletext.cc	/^#define SOCKET_ERROR	/;"	d	file:
SOFTWARE_INTERRUPT_VECTOR	Arm.h	/^#define SOFTWARE_INTERRUPT_VECTOR	/;"	d
SOUNDSUPPORT	beebsound.h	/^#define SOUNDSUPPORT$/;"	d
SOUND_HEADER	beebsound.h	/^#define SOUND_HEADER$/;"	d
SP	Master512CoPro.h	/^		enum WREGS { AX = 0, CX, DX, BX, SP, BP, SI, DI };$/;"	e	enum:Master512CoPro::WREGS
SPECIAL_REG_DRIVE_CONTROL_INPUT_PORT	disc8271.cc	/^const unsigned char SPECIAL_REG_DRIVE_CONTROL_INPUT_PORT  = 0x22;$/;"	v
SPECIAL_REG_DRIVE_CONTROL_OUTPUT_PORT	disc8271.cc	/^const unsigned char SPECIAL_REG_DRIVE_CONTROL_OUTPUT_PORT = 0x23;$/;"	v
SPECIAL_REG_MODE_REGISTER	disc8271.cc	/^const unsigned char SPECIAL_REG_MODE_REGISTER             = 0x17;$/;"	v
SPECIAL_REG_SCAN_COUNT_LSB	disc8271.cc	/^const unsigned char SPECIAL_REG_SCAN_COUNT_LSB            = 0x13;$/;"	v
SPECIAL_REG_SCAN_COUNT_MSB	disc8271.cc	/^const unsigned char SPECIAL_REG_SCAN_COUNT_MSB            = 0x14;$/;"	v
SPECIAL_REG_SCAN_SECTOR_NUMBER	disc8271.cc	/^const unsigned char SPECIAL_REG_SCAN_SECTOR_NUMBER        = 0x06;$/;"	v
SPECIAL_REG_SURFACE_0_BAD_TRACK_1	disc8271.cc	/^const unsigned char SPECIAL_REG_SURFACE_0_BAD_TRACK_1     = 0x10;$/;"	v
SPECIAL_REG_SURFACE_0_BAD_TRACK_2	disc8271.cc	/^const unsigned char SPECIAL_REG_SURFACE_0_BAD_TRACK_2     = 0x11;$/;"	v
SPECIAL_REG_SURFACE_0_CURRENT_TRACK	disc8271.cc	/^const unsigned char SPECIAL_REG_SURFACE_0_CURRENT_TRACK   = 0x12;$/;"	v
SPECIAL_REG_SURFACE_1_BAD_TRACK_1	disc8271.cc	/^const unsigned char SPECIAL_REG_SURFACE_1_BAD_TRACK_1     = 0x18;$/;"	v
SPECIAL_REG_SURFACE_1_BAD_TRACK_2	disc8271.cc	/^const unsigned char SPECIAL_REG_SURFACE_1_BAD_TRACK_2     = 0x19;$/;"	v
SPECIAL_REG_SURFACE_1_CURRENT_TRACK	disc8271.cc	/^const unsigned char SPECIAL_REG_SURFACE_1_CURRENT_TRACK   = 0x1A;$/;"	v
SPH	Master512CoPro.h	/^			SPH = NATIVE_ENDIAN_VALUE_LE_BE(0x9, 0x8),$/;"	e	enum:Master512CoPro::BREGS
SPIN_DOWN_TIME	disc1770.cc	/^const int SPIN_DOWN_TIME = 4000000; \/\/ 2 seconds$/;"	v
SPIN_UP_TIME	disc1770.cc	/^const int SPIN_UP_TIME   = ONE_REV_TIME * 3; \/\/ Two Seconds$/;"	v
SPL	Master512CoPro.h	/^			SPL = NATIVE_ENDIAN_VALUE_LE_BE(0x8, 0x9),$/;"	e	enum:Master512CoPro::BREGS
SP_Control	serial.cc	/^unsigned char SP_Control; \/\/ SERPROC Control;$/;"	v
SRC_DECREMENT	Master512CoPro.cc	/^const uint16_t SRC_DECREMENT           = 0x0800;$/;"	v
SRC_INCDEC_MASK	Master512CoPro.cc	/^const uint16_t SRC_INCDEC_MASK         = SRC_DECREMENT | SRC_INCREMENT;$/;"	v
SRC_INCREMENT	Master512CoPro.cc	/^const uint16_t SRC_INCREMENT           = 0x0400;$/;"	v
SRC_MIO	Master512CoPro.cc	/^const uint16_t SRC_MIO                 = 0x1000;$/;"	v
SRC_NO_CHANGE	Master512CoPro.cc	/^const uint16_t SRC_NO_CHANGE           = SRC_DECREMENT | SRC_INCREMENT;$/;"	v
SRCount	sysvia.cc	/^unsigned char SRCount;$/;"	v
SRData	sysvia.cc	/^unsigned char SRData;$/;"	v
SREGS	Master512CoPro.h	/^		enum SREGS { ES = 0, CS, SS, DS };$/;"	g	class:Master512CoPro
SREnabled	sysvia.cc	/^unsigned char SREnabled;$/;"	v
SRMode	sysvia.cc	/^unsigned char SRMode;$/;"	v
SRMode	uservia.cc	/^static int SRMode = 0;$/;"	v	file:
SRPoll	uservia.cc	/^static void SRPoll()$/;"	f	file:
SRTrigger	uservia.cc	/^static int SRTrigger = 0;$/;"	v	file:
SS	Master512CoPro.h	/^		enum SREGS { ES = 0, CS, SS, DS };$/;"	e	enum:Master512CoPro::SREGS
SSD	disctype.h	/^	SSD  = 0,$/;"	m	class:DiscType
STATUS_REG_COMMAND_BUSY	disc8271.cc	/^const unsigned char STATUS_REG_COMMAND_BUSY       = 0x80;$/;"	v
STATUS_REG_COMMAND_FULL	disc8271.cc	/^const unsigned char STATUS_REG_COMMAND_FULL       = 0x40;$/;"	v
STATUS_REG_INTERRUPT_REQUEST	disc8271.cc	/^const unsigned char STATUS_REG_INTERRUPT_REQUEST  = 0x08;$/;"	v
STATUS_REG_NON_DMA_MODE	disc8271.cc	/^const unsigned char STATUS_REG_NON_DMA_MODE       = 0x04;$/;"	v
STATUS_REG_PARAMETER_FULL	disc8271.cc	/^const unsigned char STATUS_REG_PARAMETER_FULL     = 0x20;$/;"	v
STATUS_REG_RESULT_FULL	disc8271.cc	/^const unsigned char STATUS_REG_RESULT_FULL        = 0x10;$/;"	v
STOP	debug.cc	/^#define STOP /;"	d	file:
STOP	debug_org.cc	/^#define STOP /;"	d	file:
STOS16	Master512CoPro.cc	/^	STOS16, REP_STOS16_BASE, REP_STOS16_COUNT,      \/\/ stos 16-BIT$/;"	e	enum:__anon26	file:
STOS8	Master512CoPro.cc	/^	STOS8, REP_STOS8_BASE, REP_STOS8_COUNT,         \/\/ stos 8-BIT$/;"	e	enum:__anon26	file:
STR	z80dis.cc	/^typedef char * STR;$/;"	t	file:
STXInstrHandler	6502core.cc	/^INLINE static void STXInstrHandler(int16 address) {$/;"	f	file:
STXInstrHandler	tube.cc	/^INLINE static void STXInstrHandler(int16 address) {$/;"	f	file:
STYInstrHandler	6502core.cc	/^INLINE static void STYInstrHandler(int16 address) {$/;"	f	file:
STYInstrHandler	tube.cc	/^INLINE static void STYInstrHandler(int16 address) {$/;"	f	file:
ST_STOP	Master512CoPro.cc	/^const uint16_t ST_STOP = 0x0002;$/;"	v
SUBB	Master512CoPro.cc	/^inline uint32_t Master512CoPro::SUBB()$/;"	f	class:Master512CoPro
SUBX	Master512CoPro.cc	/^inline uint32_t Master512CoPro::SUBX()$/;"	f	class:Master512CoPro
SVC_MODE	Arm.h	/^#define SVC_MODE	/;"	d
SWRAMBoardEnabled	uservia.cc	/^bool SWRAMBoardEnabled = false;$/;"	v
SWRamState	beebstate.h	/^	unsigned char SWRamState[16384];$/;"	m	struct:__anon28
SYNC_DEST	Master512CoPro.cc	/^const uint16_t SYNC_DEST               = 0x0080;$/;"	v
SYNC_MASK	Master512CoPro.cc	/^const uint16_t SYNC_MASK               = 0x00C0;$/;"	v
SYNC_SOURCE	Master512CoPro.cc	/^const uint16_t SYNC_SOURCE             = 0x0040;$/;"	v
SYSVIA_HEADER	sysvia.h	/^#define SYSVIA_HEADER$/;"	d
Samples	beebsound.h	/^	int Samples; \/\/ Samples counted in current pattern till changepoint$/;"	m	struct:AudioType
Save1770UEF	disc1770.cc	/^void Save1770UEF(FILE *SUEF)$/;"	f
Save6502UEF	6502core.cc	/^void Save6502UEF(FILE *SUEF) {$/;"	f
Save65C02MemUEF	tube.cc	/^void Save65C02MemUEF(FILE *SUEF) {$/;"	f
Save65C02UEF	tube.cc	/^void Save65C02UEF(FILE *SUEF) {$/;"	f
Save8271UEF	disc8271.cc	/^void Save8271UEF(FILE *SUEF)$/;"	f
SaveAtoDUEF	atodconv.cc	/^void SaveAtoDUEF(FILE *SUEF) {$/;"	f
SaveCMOS	beebwin.cc	/^void BeebWin::SaveCMOS()$/;"	f	class:BeebWin
SaveEmuUEF	beebwin.cc	/^void SaveEmuUEF(FILE *SUEF) {$/;"	f
SaveFile	GetFile.cc	/^OSErr SaveFile(char *path, FSSpec *fs) $/;"	f
SaveFile	beebwin.cc	/^int SaveFile (const char *path, FSSpec *fs)$/;"	f
SaveFileMov	GetFile.cc	/^OSErr SaveFileMov(char *path, FSSpec *fs) $/;"	f
SaveMemUEF	beebmem.cc	/^void SaveMemUEF(FILE *SUEF) {$/;"	f
SavePreferences	beebwin.cc	/^void BeebWin::SavePreferences()$/;"	f	class:BeebWin
SaveSerialUEF	serial.cc	/^void SaveSerialUEF(FILE *SUEF)$/;"	f
SaveSoundUEF	beebsound.cc	/^void SaveSoundUEF(FILE *SUEF) {$/;"	f
SaveState	beebwin.cc	/^void BeebWin::SaveState()$/;"	f	class:BeebWin
SaveTrackImage	disc8271.cc	/^static bool SaveTrackImage(int DriveNum, int HeadNum, int TrackNum) {$/;"	f	file:
SaveTubeUEF	tube.cc	/^void SaveTubeUEF(FILE *SUEF) {$/;"	f
SaveUEFState	uefstate.cc	/^UEFStateResult SaveUEFState(const char *StateName) {$/;"	f
SaveUserKeyMap	beebwin.cc	/^void BeebWin::SaveUserKeyMap ()$/;"	f	class:BeebWin
SaveUserKeyboard	userkybd.cc	/^void SaveUserKeyboard( char *path )$/;"	f
SaveVIAUEF	via.cc	/^void SaveVIAUEF(FILE *SUEF) {$/;"	f
SaveVideoUEF	video.cc	/^void SaveVideoUEF(FILE *SUEF) {$/;"	f
ScaleMousestick	beebwin.cc	/^void BeebWin::ScaleMousestick(unsigned int x, unsigned int y)$/;"	f	class:BeebWin
ScoutAckReceived	econet.cc	/^    ScoutAckReceived = 2,$/;"	m	class:AUNType::FourWayStage	file:
ScoutAckSent	econet.cc	/^    ScoutAckSent = 12,$/;"	m	class:AUNType::FourWayStage	file:
ScoutReceived	econet.cc	/^    ScoutReceived = 11,$/;"	m	class:AUNType::FourWayStage	file:
ScoutSent	econet.cc	/^    ScoutSent = 1,$/;"	m	class:AUNType::FourWayStage	file:
ScreenAdjust	video.cc	/^long ScreenAdjust=0; \/\/ Mode 7 Defaults.$/;"	v
SecSize	disc1770.cc	/^static unsigned int SecSize[2];$/;"	v	file:
Sector	disc1770.cc	/^static unsigned char Sector;$/;"	v	file:
SectorLength	disc8271.cc	/^  int SectorLength; \/* In bytes *\/$/;"	m	struct:__anon20	file:
SectorType	disc8271.cc	/^} SectorType;$/;"	t	typeref:struct:__anon17	file:
Sectors	disc8271.cc	/^  SectorType *Sectors;$/;"	m	struct:__anon19	file:
SectorsToGo	disc8271.cc	/^  int SectorsToGo;$/;"	m	struct:__anon20	file:
SeekInterrupt	disc8271.cc	/^static void SeekInterrupt(void) {$/;"	f	file:
SelectedDensity	disc1770.cc	/^static bool SelectedDensity;$/;"	v	file:
Selection	scsi.cc	/^static void Selection(int data)$/;"	f	file:
Selects	disc8271.cc	/^static bool Selects[2]; \/* Drive selects *\/$/;"	v	file:
SendSocket	econet.cc	/^static SOCKET SendSocket = INVALID_SOCKET;$/;"	v	file:
SerialBuffer	serial.cc	/^unsigned int SerialBuffer = 0, SerialWriteBuffer = 0;$/;"	v
SerialChannel	serial.cc	/^unsigned char SerialChannel=CASSETTE; \/\/ Device in use$/;"	v
SerialPort	serial.cc	/^unsigned char SerialPort;$/;"	v
SerialPortEnabled	serial.cc	/^unsigned char SerialPortEnabled;$/;"	v
SerialPortGetChar	serialdevices.cc	/^unsigned char SerialPortGetChar(void)$/;"	f
SerialPortIsChar	serialdevices.cc	/^int SerialPortIsChar(void)$/;"	f
SerialPortOpen	serial.cc	/^unsigned char SerialPortOpen;$/;"	v
SerialPortWrite	serialdevices.cc	/^void SerialPortWrite(unsigned char TDR)$/;"	f
SerialWriteBuffer	serial.cc	/^unsigned int SerialBuffer = 0, SerialWriteBuffer = 0;$/;"	v
Serial_Poll	serial.cc	/^void Serial_Poll(void)$/;"	f
SetACIAStatus	serial.cc	/^void SetACIAStatus(unsigned char bit) {$/;"	f
SetAMXPosition	beebwin.cc	/^void BeebWin::SetAMXPosition(unsigned int x, unsigned int y)$/;"	f	class:BeebWin
SetBBCKeyForVKEY	userkybd.cc	/^void SetBBCKeyForVKEY( int Key )$/;"	f
SetBitKey	uservia.cc	/^void SetBitKey( int ctrlID )$/;"	f
SetCheckBoxValue	debug.cc	/^void SetCheckBoxValue(OSType box, int State)$/;"	f
SetDiscWriteProtects	beebwin.cc	/^void BeebWin::SetDiscWriteProtects(void)$/;"	f	class:BeebWin
SetDriveControl	beebwin.cc	/^void BeebWin::SetDriveControl(unsigned char value)$/;"	f	class:BeebWin
SetEPText	serialdevices.cc	/^void SetEPText(OSType box, char *text)$/;"	f
SetEPValue	serialdevices.cc	/^void SetEPValue(OSType box, int State)$/;"	f
SetFreq	beebsound.cc	/^static void SetFreq(int Channel, int freqval) {$/;"	f	file:
SetImageName	beebwin.cc	/^void BeebWin::SetImageName(const char *DiscName,int Drive,DiscType DType) {$/;"	f	class:BeebWin
SetMemoryBit	tube.cc	/^static void SetMemoryBit(int bit)$/;"	f	file:
SetMenuCommandIDCheck	beebwin.cc	/^void BeebWin::SetMenuCommandIDCheck(UInt32 commandID, bool check)$/;"	f	class:BeebWin
SetMode	Arm.cc	/^void CArm::SetMode(int mode)$/;"	f	class:CArm
SetMotor	disc1770.cc	/^static void SetMotor(int Drive, bool State) {$/;"	f	file:
SetMousestickButton	beebwin.cc	/^void BeebWin::SetMousestickButton(int index, bool button)$/;"	f	class:BeebWin
SetPSR	6502core.cc	/^INLINE static void SetPSR(int mask,int c,int z,int i,int d,int b, int v, int n) {$/;"	f	file:
SetPSR	tube.cc	/^INLINE static void SetPSR(int mask,int c,int z,int i,int d,int b, int v, int n) {$/;"	f	file:
SetPSRCZN	6502core.cc	/^INLINE static void SetPSRCZN(int c,int z, int n) {$/;"	f	file:
SetPSRCZN	tube.cc	/^INLINE static void SetPSRCZN(int c,int z, int n) {$/;"	f	file:
SetPSRZN	6502core.cc	/^INLINE static void SetPSRZN(const unsigned char in) {$/;"	f	file:
SetPSRZN	tube.cc	/^INLINE static void SetPSRZN(const unsigned char in) {$/;"	f	file:
SetRomMenu	beebwin.cc	/^void BeebWin::SetRomMenu(void)$/;"	f	class:BeebWin
SetRowCol	userkybd.cc	/^void SetRowCol( int ctrlID )$/;"	f
SetSerialPortBaud	serialdevices.cc	/^void SetSerialPortBaud(int Tx_Rate, int Rx_Rate)$/;"	f
SetSerialPortFormat	serialdevices.cc	/^void SetSerialPortFormat(int Data_Bits, int Stop_Bits, int Parity, int RTS)$/;"	f
SetSound	beebsound.cc	/^void SetSound(char State) {$/;"	f
SetSoundMenu	beebwin.cc	/^void BeebWin::SetSoundMenu(void) {$/;"	f	class:BeebWin
SetTapeSpeed	serial.cc	/^void SetTapeSpeed(int speed) {$/;"	f
SetTapeSpeedMenu	beebwin.cc	/^void BeebWin::SetTapeSpeedMenu(void)$/;"	f	class:BeebWin
SetTrigger	6502core.h	/^#define SetTrigger(/;"	d
SetUnlockTape	serial.cc	/^void SetUnlockTape(int unlock) {$/;"	f
SetValue	uservia.cc	/^void SetValue(OSType box, int State)$/;"	f
Sethreg	z80.h	/^#define Sethreg(/;"	d
Setlreg	z80.h	/^#define Setlreg(/;"	d
SetupClipboard	beebwin.cc	/^void BeebWin::SetupClipboard(void)$/;"	f	class:BeebWin
ShEn	beebmem.cc	/^int ShEn=0; \/* Shadow RAM Enable *\/$/;"	v
Sh_CPUE	beebmem.cc	/^unsigned char Sh_Display,Sh_CPUX,Sh_CPUE,PRAM,FRAM;$/;"	v
Sh_CPUX	beebmem.cc	/^unsigned char Sh_Display,Sh_CPUX,Sh_CPUE,PRAM,FRAM;$/;"	v
Sh_Display	beebmem.cc	/^unsigned char Sh_Display,Sh_CPUX,Sh_CPUE,PRAM,FRAM;$/;"	v
ShadowRAM	beebmem.cc	/^unsigned char ShadowRAM[32768]; \/\/ 20K Shadow RAM$/;"	v
ShadowRam	beebmem.cc	/^unsigned char ShadowRam[20480];$/;"	v
ShiftLock	beebwin.h	/^	bool ShiftLock;$/;"	m	struct:LEDType
ShorEeconetHeader	econet.cc	/^struct ShorEeconetHeader$/;"	s	class:AUNType::FourWayStage	file:
ShowBitKey	uservia.cc	/^void ShowBitKey(int key, int ctrlID)$/;"	f
ShowDisc	beebwin.h	/^	bool ShowDisc;$/;"	m	struct:LEDType
ShowInputs	uservia.cc	/^void ShowInputs(unsigned char data)$/;"	f
ShowKB	beebwin.h	/^	bool ShowKB;$/;"	m	struct:LEDType
ShowKey	userkybd.cc	/^void ShowKey(int key)$/;"	f
ShowOutputs	uservia.cc	/^void ShowOutputs(unsigned char data)$/;"	f
SignExtendByte	6502core.cc	/^INLINE int SignExtendByte(signed char in) {$/;"	f
Signal	beebsound.h	/^	char Signal; \/\/ Signal type: data, gap, or tone.$/;"	m	struct:AudioType
Signals	Arm.h	/^union Signals$/;"	u
SixteenUChars	beebwin.h	/^} SixteenUChars;$/;"	t	typeref:union:__anon11
SkipBadTracks	disc8271.cc	/^static int SkipBadTracks(int Unit, int trackin) {$/;"	f	file:
SlowDataBusRead	sysvia.cc	/^static int SlowDataBusRead(void) {$/;"	f	file:
SlowDataBusWrite	sysvia.cc	/^static void SlowDataBusWrite(unsigned char Value) {$/;"	f	file:
SlowDataBusWriteValue	sysvia.cc	/^static unsigned char SlowDataBusWriteValue=0;$/;"	v	file:
SoundAutoTriggerTime	beebsound.cc	/^int SoundAutoTriggerTime;$/;"	v
SoundBuf	beebsound.cc	/^static unsigned char SoundBuf[MAXBUFSIZE];$/;"	v	file:
SoundBufferSize	beebsound.cc	/^int SoundBufferSize,TotalBufferSize;$/;"	v
SoundChipEnabled	beebsound.cc	/^int SoundChipEnabled = 1;$/;"	v
SoundChipReset	beebsound.cc	/^void SoundChipReset(void) {$/;"	f
SoundDefault	beebsound.cc	/^int SoundDefault;$/;"	v
SoundEnabled	beebsound.cc	/^int SoundEnabled = 1;$/;"	v
SoundExponentialVolume	beebsound.cc	/^char SoundExponentialVolume = 1;$/;"	v
SoundInit	beebsound.cc	/^void SoundInit() {$/;"	f
SoundReset	beebsound.cc	/^void SoundReset(void) {$/;"	f
SoundSample	beebsound.cc	/^struct SoundSample$/;"	s	file:
SoundSampleRate	beebsound.cc	/^int SoundSampleRate = PREFSAMPLERATE;$/;"	v
SoundSamples	beebsound.cc	/^static SoundSample SoundSamples[] = {$/;"	v	file:
SoundSamplesLoaded	beebsound.cc	/^static bool SoundSamplesLoaded = false;$/;"	v	file:
SoundTrigger	beebsound.cc	/^int SoundTrigger; \/* Time to trigger a sound event *\/$/;"	v
SoundTrigger_Real	beebsound.cc	/^void SoundTrigger_Real(void) {$/;"	f
SoundTuning	beebsound.cc	/^double SoundTuning=0.0; \/\/ Tunning offset$/;"	v
SoundVolume	beebsound.cc	/^int SoundVolume = 3;$/;"	v
Sound_RegWrite	beebsound.cc	/^void Sound_RegWrite(int value) {$/;"	f
Sound_Trigger	beebsound.cc	/^void Sound_Trigger(int NCycles) {$/;"	f
Speech	beebsound.cc	/^int Speech[3];$/;"	v
SpeechBuf	beebsound.cc	/^unsigned char SpeechBuf[MAXBUFSIZE];$/;"	v
SpeechDefault	speech.cc	/^int SpeechDefault;$/;"	v
SpeechEnabled	speech.cc	/^int SpeechEnabled;$/;"	v
SpinDown	disc1770.cc	/^static int SpinDown[2]={0,0}; \/\/ Spin down delay per drive$/;"	v	file:
SpinUp	disc1770.cc	/^static bool SpinUp = false;$/;"	v	file:
StackReg	6502core.cc	/^static unsigned char StackReg,PSR;$/;"	v	file:
StackReg	tube.cc	/^static unsigned char StackReg,PSR;$/;"	v	file:
StartOfFrame	beebwin.cc	/^int BeebWin::StartOfFrame(void)$/;"	f	class:BeebWin
StartStop	scsi.cc	/^static void StartStop(void)$/;"	f	file:
Status	disc1770.cc	/^static unsigned char Status = 0;$/;"	v	file:
Status	scsi.cc	/^static void Status(void)$/;"	f	file:
StatusReg	disc8271.cc	/^static unsigned char StatusReg;$/;"	v	file:
StepRate	disc1770.cc	/^static int StepRate = StepRates[0];$/;"	v	file:
StepRate	disc8271.cc	/^static int StepRate; \/\/ In 2ms steps$/;"	v	file:
StepRates	disc1770.cc	/^static const int StepRates[4] = {6, 12, 20, 30}; \/\/ Milliseconds$/;"	v	file:
StopBits	csw.cc	/^    StopBits,$/;"	m	class:CSWDataState	file:
StopSoundSample	beebsound.cc	/^void StopSoundSample(int sample) {$/;"	f
Stop_Bits	serial.cc	/^unsigned char Parity,Stop_Bits,Data_Bits,RIE,TIE; \/\/ Receive Intterrupt Enable$/;"	v
StrobedData	beebmem.h	/^    unsigned char StrobedData;$/;"	m	struct:CMOSType
Success	csw.h	/^     Success,$/;"	m	class:CSWResult
Success	uefstate.h	/^    Success,$/;"	m	class:UEFStateResult
SwitchOnCycles	6502core.cc	/^int SwitchOnCycles=2000000; \/\/ Reset delay$/;"	v
SwitchOnSound	beebsound.cc	/^void SwitchOnSound(void) {$/;"	f
SyncIO	6502core.cc	/^void SyncIO(void)$/;"	f
SyncTubeProcessor	tube.cc	/^void SyncTubeProcessor(void) {$/;"	f
SysTime	sysvia.cc	/^time_t SysTime;$/;"	v
SysVIARead	sysvia.cc	/^unsigned char SysVIARead(int Address)$/;"	f
SysVIAReset	sysvia.cc	/^void SysVIAReset(void) {$/;"	f
SysVIAState	beebstate.h	/^	unsigned char SysVIAState[32];$/;"	m	struct:__anon28
SysVIAState	sysvia.cc	/^VIAState SysVIAState;$/;"	v
SysVIATriggerCA1Int	sysvia.cc	/^void SysVIATriggerCA1Int(int value) {$/;"	f
SysVIAWrite	sysvia.cc	/^void SysVIAWrite(int Address, int Value) {$/;"	f
SysVIA_poll	sysvia.cc	/^void SysVIA_poll(unsigned int ncycles) {$/;"	f
SysVIA_poll_real	sysvia.cc	/^void SysVIA_poll_real(void) {$/;"	f
SysViaKbdState	sysvia.cc	/^static char SysViaKbdState[KBD_COLS][KBD_ROWS]; \/* Col,row *\/$/;"	v	file:
TAPECYCLES	serial.cc	/^#define TAPECYCLES /;"	d	file:
TAPECYCLES	serial.h	/^#define TAPECYCLES /;"	d
TARGET_API_MAC_CARBON	GetFile.h	/^  #define TARGET_API_MAC_CARBON /;"	d
TARMAC_GLOBALS_H	TarmacGlobals.h	/^#define TARMAC_GLOBALS_H$/;"	d
TCWindowCommandHandler	serial.cc	/^OSStatus TCWindowCommandHandler(UInt32 cmdID)$/;"	f
TDR	serial.cc	/^unsigned char RDR,TDR; \/\/ Receive and Transmit Data Registers$/;"	v
TDSR	serial.cc	/^unsigned char RDSR,TDSR; \/\/ Receive and Transmit Data Shift Registers (buffers)$/;"	v
TERMINATE_ON_ZERO	Master512CoPro.cc	/^const uint16_t TERMINATE_ON_ZERO       = 0x0200;$/;"	v
THalfMode	video.cc	/^int THalfMode=0; \/\/ 1 if to use half-mode (TeletextStyle=1 all the time)$/;"	v
TIE	serial.cc	/^unsigned char Parity,Stop_Bits,Data_Bits,RIE,TIE; \/\/ Receive Intterrupt Enable$/;"	v
TIMEBETWEENBYTES	disc8271.cc	/^#define TIMEBETWEENBYTES /;"	d	file:
TIMER_DRQ	Master512CoPro.cc	/^const uint16_t TIMER_DRQ               = 0x0010;$/;"	v
TRACKSPERDRIVE	disc8271.cc	/^#define TRACKSPERDRIVE /;"	d	file:
TRBInstrHandler	6502core.cc	/^INLINE static void TRBInstrHandler(int16 address) {$/;"	f	file:
TRBInstrHandler	tube.cc	/^INLINE static void TRBInstrHandler(int16 address) {$/;"	f	file:
TRUE	TarmacGlobals.h	/^#define TRUE	/;"	d
TRUE	common.h	/^#define TRUE /;"	d
TRUE	z80_support.cc	/^#define TRUE /;"	d	file:
TSBInstrHandler	6502core.cc	/^INLINE static void TSBInstrHandler(int16 address) {$/;"	f	file:
TSBInstrHandler	tube.cc	/^INLINE static void TSBInstrHandler(int16 address) {$/;"	f	file:
TSTFLAG	z80.h	/^#define TSTFLAG(/;"	d
TS_BUFF_SIZE	serialdevices.cc	/^#define TS_BUFF_SIZE	/;"	d	file:
TS_DELAY	serialdevices.cc	/^#define TS_DELAY	/;"	d	file:
TUBE6502_HEADER	tube.h	/^#define TUBE6502_HEADER$/;"	d
TUBEFASTWRITE	tube.cc	/^#define TUBEFASTWRITE(/;"	d	file:
TUBEREADMEM_FAST	tube.cc	/^#define TUBEREADMEM_FAST(/;"	d	file:
TUBEWRITEMEM_DIRECT	tube.cc	/^#define TUBEWRITEMEM_DIRECT(/;"	d	file:
TUBEWRITEMEM_FAST	tube.cc	/^#define TUBEWRITEMEM_FAST(/;"	d	file:
Tag	beebstate.h	/^	char Tag[16];$/;"	m	struct:__anon28
TapeAudio	beebsound.cc	/^struct AudioType TapeAudio;$/;"	v	typeref:struct:AudioType
TapeClock	serial.cc	/^int TapeClock=0,OldClock=0;$/;"	v
TapeClockSpeed	serial.cc	/^int TapeClockSpeed = 5600;$/;"	v
TapeControlCloseDialog	serial.cc	/^void TapeControlCloseDialog()$/;"	f
TapeControlEnabled	serial.cc	/^bool TapeControlEnabled = false;$/;"	v
TapeControlOpenDialog	serial.cc	/^void TapeControlOpenDialog()$/;"	f
TapeControlOpenFile	serial.cc	/^void TapeControlOpenFile(char *UEFName)$/;"	f
TapeControlStopRecording	serial.cc	/^void TapeControlStopRecording(bool RefreshControl)$/;"	f
TapeControlUpdateCounter	serial.cc	/^void TapeControlUpdateCounter(int tape_time)$/;"	f
TapePlaying	serial.cc	/^bool TapePlaying = true;$/;"	v
TapeRecording	serial.cc	/^bool TapeRecording = false;$/;"	v
TapeSoundEnabled	beebsound.cc	/^bool TapeSoundEnabled;$/;"	v
TapeTrigger	serial.cc	/^CycleCountT TapeTrigger=CycleCountTMax;$/;"	v
TeleTextAdapterEnabled	teletext.cc	/^char TeleTextAdapterEnabled = 0;$/;"	v
TeleTextData	teletext.cc	/^char TeleTextData = 0;$/;"	v
TeleTextInit	teletext.cc	/^void TeleTextInit(void)$/;"	f
TeleTextInts	teletext.cc	/^bool TeleTextInts = false;$/;"	v
TeleTextLog	teletext.cc	/^void TeleTextLog(const char *text, ...)$/;"	f
TeleTextPoll	teletext.cc	/^void TeleTextPoll(void)$/;"	f
TeleTextRead	teletext.cc	/^int TeleTextRead(int Address)$/;"	f
TeleTextServer	teletext.cc	/^char TeleTextServer = 0;$/;"	v
TeleTextStatus	teletext.cc	/^int TeleTextStatus = 0xef;$/;"	v
TeleTextWrite	teletext.cc	/^void TeleTextWrite(int Address, int Value) $/;"	f
TeletextEnabled	video.cc	/^unsigned char TeletextEnabled;$/;"	v
TeletextStyle	video.cc	/^char TeletextStyle=1; \/\/ Defines wether teletext will skip intermediate lines in order to speed up$/;"	v
TestUnitReady	scsi.cc	/^void TestUnitReady(void)$/;"	f
ThisCommand	disc8271.cc	/^static int ThisCommand;$/;"	v	file:
TimeBetweenBytes	econet.cc	/^static unsigned int TimeBetweenBytes = 128;$/;"	v	file:
Timing	Master512CoPro.cc	/^static const uint8_t Timing[] =$/;"	v	file:
ToCall	disc8271.cc	/^  CommandFunc ToCall; \/* Called after all paameters have arrived *\/$/;"	m	struct:__anon21	file:
TogglePrinter	beebwin.cc	/^void BeebWin::TogglePrinter()$/;"	f	class:BeebWin
ToggleWriteProtect	beebwin.cc	/^void BeebWin::ToggleWriteProtect(int Drive)$/;"	f	class:BeebWin
Tone	csw.h	/^    Tone,$/;"	m	class:CSWState
ToneFreq	beebsound.cc	/^	unsigned int ToneFreq[4];$/;"	m	struct:BeebState76489_S	file:
ToneVolume	beebsound.cc	/^	unsigned int ToneVolume[4]; \/* In units of \/dev\/dsp *\/$/;"	m	struct:BeebState76489_S	file:
TorchTube	z80_support.cc	/^int TorchTube = 0;$/;"	v
TorchTubeActive	tube.cc	/^static bool TorchTubeActive = false;$/;"	v	file:
TorchZ80	tube.h	/^    TorchZ80,$/;"	m	class:Tube
TotalBufferSize	beebsound.cc	/^int SoundBufferSize,TotalBufferSize;$/;"	v
TotalCycles	6502core.cc	/^CycleCountT TotalCycles=0;$/;"	v
TotalTubeCycles	tube.cc	/^CycleCountT TotalTubeCycles=0;  $/;"	v
TouchScreenClose	serialdevices.cc	/^void TouchScreenClose(void)$/;"	f
TouchScreenEnabled	serialdevices.cc	/^unsigned char TouchScreenEnabled;$/;"	v
TouchScreenOpen	serialdevices.cc	/^void TouchScreenOpen(void)$/;"	f
TouchScreenPoll	serialdevices.cc	/^bool TouchScreenPoll(void)$/;"	f
TouchScreenRead	serialdevices.cc	/^unsigned char TouchScreenRead(void)$/;"	f
TouchScreenReadScreen	serialdevices.cc	/^void TouchScreenReadScreen(bool check)$/;"	f
TouchScreenStore	serialdevices.cc	/^void TouchScreenStore(unsigned char data)$/;"	f
TouchScreenWrite	serialdevices.cc	/^void TouchScreenWrite(unsigned char data)$/;"	f
Track	disc1770.cc	/^static unsigned char Track = 0;$/;"	v	file:
TrackAddr	disc8271.cc	/^  int TrackAddr;$/;"	m	struct:__anon20	file:
TrackType	disc8271.cc	/^} TrackType;$/;"	t	typeref:struct:__anon19	file:
Translate	scsi.cc	/^static void Translate(void)$/;"	f	file:
TranslateAMX	beebwin.cc	/^void BeebWin::TranslateAMX(void)$/;"	f	class:BeebWin
TranslateCapture	beebwin.cc	/^void BeebWin::TranslateCapture(void)$/;"	f	class:BeebWin
TranslateFDC	beebwin.cc	/^void BeebWin::TranslateFDC(void)$/;"	f	class:BeebWin
TranslateKey	beebwin.cc	/^int BeebWin::TranslateKey(int vkey, int keyUp, int &row, int &col)$/;"	f	class:BeebWin
TranslateKeyMapping	beebwin.cc	/^void BeebWin::TranslateKeyMapping(void)$/;"	f	class:BeebWin
TranslatePrinterPort	beebwin.cc	/^void BeebWin::TranslatePrinterPort()$/;"	f	class:BeebWin
TranslateSampleRate	beebwin.cc	/^void BeebWin::TranslateSampleRate(void)$/;"	f	class:BeebWin
TranslateTiming	beebwin.cc	/^void BeebWin::TranslateTiming(int id)$/;"	f	class:BeebWin
TranslateVolume	beebwin.cc	/^void BeebWin::TranslateVolume(void)$/;"	f	class:BeebWin
TranslateWindowSize	beebwin.cc	/^void BeebWin::TranslateWindowSize(int size)$/;"	f	class:BeebWin
TrkLen	disc1770.cc	/^static unsigned int TrkLen[2]; \/\/ Track Length in bytes$/;"	v	file:
Tube	tube.h	/^enum class Tube : unsigned char {$/;"	c
Tube186Enabled	tube.cc	/^unsigned char TubeEnabled,Tube186Enabled,AcornZ80,EnableTube;$/;"	v
TubeBufferLength	tube.h	/^const int TubeBufferLength = 24;$/;"	v
TubeCycles	tube.cc	/^unsigned int TubeCycles;$/;"	v
TubeCyclesTable	tube.cc	/^static const int TubeCyclesTable[] = {$/;"	v	file:
TubeDataAv	tube.cc	/^	TubeDataAv=128   \/\/ Data available (read only)$/;"	e	enum:TubeFlags	file:
TubeEnabled	tube.cc	/^unsigned char TubeEnabled,Tube186Enabled,AcornZ80,EnableTube;$/;"	v
TubeFlags	tube.cc	/^enum TubeFlags {$/;"	g	file:
TubeI	tube.cc	/^	TubeI=2,         \/\/ Parasite IRQ from reg 1$/;"	e	enum:TubeFlags	file:
TubeIRQ	tube.h	/^enum TubeIRQ {$/;"	g
TubeJ	tube.cc	/^	TubeJ=4,         \/\/ Parasite IRQ from reg 4$/;"	e	enum:TubeFlags	file:
TubeM	tube.cc	/^	TubeM=8,         \/\/ Parasite NMI from reg 3$/;"	e	enum:TubeFlags	file:
TubeMachineType	tube.cc	/^unsigned char TubeMachineType=3;$/;"	v
TubeNMI	tube.h	/^enum TubeNMI {$/;"	g
TubeNMILock	tube.cc	/^static bool TubeNMILock = false; \/\/ Well I think NMI's are maskable - to stop repeated NMI's - the lock is released when an RTI is done $/;"	v	file:
TubeNMIStatus	tube.cc	/^unsigned char TubeNMIStatus=0; \/\/ bit set (nums in NMI_Nums) if NMI being caused *\/$/;"	v
TubeNotFull	tube.cc	/^	TubeNotFull=64,  \/\/ Reg not full (read only)$/;"	e	enum:TubeFlags	file:
TubeP	tube.cc	/^	TubeP=32,        \/\/ Parasite processor reset$/;"	e	enum:TubeFlags	file:
TubeProgramCounter	tube.cc	/^int TubeProgramCounter;$/;"	v
TubeQ	tube.cc	/^	TubeQ=1,         \/\/ Host IRQ from reg 4$/;"	e	enum:TubeFlags	file:
TubeRam	tube.cc	/^unsigned char TubeRam[65536];$/;"	v
TubeReadMem	tube.cc	/^unsigned char TubeReadMem(unsigned int IOAddr) {$/;"	f
TubeS	tube.cc	/^	TubeS=128,       \/\/ Set control flags mask (write only)$/;"	e	enum:TubeFlags	file:
TubeT	tube.cc	/^	TubeT=64,        \/\/ Tube reset (write only)$/;"	e	enum:TubeFlags	file:
TubeType	tube.cc	/^Tube TubeType;$/;"	v
TubeV	tube.cc	/^	TubeV=16,        \/\/ Two byte op for reg 3$/;"	e	enum:TubeFlags	file:
TubeWriteMem	tube.cc	/^void TubeWriteMem(unsigned int IOAddr,unsigned char IOData) {$/;"	f
TubeintStatus	tube.cc	/^unsigned char TubeintStatus=0; \/\/ bit set (nums in IRQ_Nums) if interrupt being caused *\/$/;"	v
TxD	serial.cc	/^unsigned char TxD,RxD; \/\/ Transmit and Receive destinations (data or shift register)$/;"	v
Tx_Rate	serial.cc	/^unsigned int Tx_Rate=1200,Rx_Rate=1200; \/\/ Recieve and Transmit baud rates.$/;"	v
TypeListPtr	GetFile.h	/^typedef const OSTypePtr TypeListPtr;$/;"	t
UBYTE	z80dis.cc	/^typedef unsigned char UBYTE;$/;"	t	file:
UEF	beebwin.cc	/^extern "C" enum FileFilter { DISC, UEF, IFD, KEYBOARD };$/;"	e	enum:FileFilter	file:
UEFFilterProc	GetFile.cc	/^unsigned pascal char UEFFilterProc(AEDesc *theItem, void *info, void *callBackUD, NavFilterModes FilterMode)$/;"	f
UEFOpen	serial.cc	/^unsigned char UEFOpen=0;$/;"	v
UEFRES_10BIT	uef.h	/^#define UEFRES_10BIT(/;"	d
UEFRES_BYTE	uef.h	/^#define UEFRES_BYTE(/;"	d
UEFRES_STARTBIT	uef.h	/^#define UEFRES_STARTBIT(/;"	d
UEFRES_STOPBIT	uef.h	/^#define UEFRES_STOPBIT(/;"	d
UEFRES_TYPE	uef.h	/^#define UEFRES_TYPE(/;"	d
UEFSTATE_HEADER	uefstate.h	/^#define UEFSTATE_HEADER$/;"	d
UEFState	uefstate.cc	/^FILE *UEFState;$/;"	v
UEFStateResult	uefstate.h	/^enum class UEFStateResult {$/;"	c
UEFTapeName	serial.cc	/^char UEFTapeName[256]; \/\/ Filename of current tape file$/;"	v
UEF_BUF	serial.cc	/^int UEF_BUF=0,NEW_UEF_BUF=0;$/;"	v
UEF_BYTEMASK	uef.h	/^#define UEF_BYTEMASK	/;"	d
UEF_DATA	uef.h	/^#define UEF_DATA	/;"	d
UEF_EOF	uef.h	/^#define UEF_EOF	/;"	d
UEF_GAP	uef.h	/^#define UEF_GAP	/;"	d
UEF_HTONE	uef.h	/^#define UEF_HTONE	/;"	d
UEF_MMASK	uef.h	/^#define UEF_MMASK	/;"	d
UEF_OK	uef.h	/^#define UEF_OK	/;"	d
UEF_OPEN_MEMERR	uef.h	/^#define UEF_OPEN_MEMERR	/;"	d
UEF_OPEN_NOFILE	uef.h	/^#define UEF_OPEN_NOFILE	/;"	d
UEF_OPEN_NOTTAPE	uef.h	/^#define UEF_OPEN_NOTTAPE	/;"	d
UEF_OPEN_NOTUEF	uef.h	/^#define UEF_OPEN_NOTUEF	/;"	d
UEF_STARTBIT	uef.h	/^#define UEF_STARTBIT	/;"	d
UEF_STOPBIT	uef.h	/^#define UEF_STOPBIT	/;"	d
UINT16	osd_cpu.h	/^typedef unsigned short						UINT16;$/;"	t
UINT16	speech.h	/^#define UINT16	/;"	d
UINT32	osd_cpu.h	/^typedef unsigned int						UINT32;$/;"	t
UINT32	speech.h	/^#define UINT32	/;"	d
UINT64	osd_cpu.h	/^__extension__ typedef unsigned long long	UINT64;$/;"	t
UINT64	osd_cpu.h	/^typedef unsigned __int64					UINT64;$/;"	t
UINT8	osd_cpu.h	/^typedef unsigned char						UINT8;$/;"	t
UINT8	speech.h	/^#define UINT8	/;"	d
UKWindowCommandHandler	userkybd.cc	/^OSStatus UKWindowCommandHandler(EventHandlerCallRef nextHandler, EventRef event, void *userData)$/;"	f
UNDEFINED_INSTRUCTION_VECTOR	Arm.h	/^#define UNDEFINED_INSTRUCTION_VECTOR	/;"	d
UNMUTED	beebsound.h	/^#define UNMUTED /;"	d
UPDATENMISTATUS	disc8271.cc	/^#define UPDATENMISTATUS /;"	d	file:
USERKYBD_HEADER	userkybd.h	/^#define USERKYBD_HEADER$/;"	d
USERVIA_HEADER	uservia.h	/^#define USERVIA_HEADER$/;"	d
USR_MODE	Arm.h	/^#define USR_MODE	/;"	d
Unicast	econet.cc	/^    Unicast = 2,$/;"	m	class:AUNType	file:
UnlockTape	serial.cc	/^int UnlockTape=1;$/;"	v
UnusedState	beebstate.h	/^	unsigned char UnusedState[80]; \/* For future use *\/$/;"	m	struct:__anon28
UpdateAMXMenu	beebwin.cc	/^void BeebWin::UpdateAMXMenu(void)$/;"	f	class:BeebWin
UpdateEconetMenu	beebwin.cc	/^void BeebWin::UpdateEconetMenu(void)$/;"	f	class:BeebWin
UpdateHostR4Interrupt	tube.cc	/^void UpdateHostR4Interrupt(void) {$/;"	f
UpdateIFRTopBit	sysvia.cc	/^static void UpdateIFRTopBit(void) {$/;"	f	file:
UpdateIFRTopBit	uservia.cc	/^static void UpdateIFRTopBit(void) {$/;"	f	file:
UpdateInterrupts	tube.cc	/^void UpdateInterrupts()$/;"	f
UpdateLEDMenu	beebwin.cc	/^void BeebWin::UpdateLEDMenu(void)$/;"	f	class:BeebWin
UpdateModelType	beebwin.cc	/^void BeebWin::UpdateModelType(void)$/;"	f	class:BeebWin
UpdateMonitorMenu	beebwin.cc	/^void BeebWin::UpdateMonitorMenu(void)$/;"	f	class:BeebWin
UpdateMotionBlurMenu	beebwin.cc	/^void BeebWin::UpdateMotionBlurMenu(void)$/;"	f	class:BeebWin
UpdatePalette	beebwin.cc	/^void BeebWin::UpdatePalette(PaletteType NewPal)$/;"	f	class:BeebWin
UpdateR1Interrupt	tube.cc	/^void UpdateR1Interrupt(void) {$/;"	f
UpdateR3Interrupt	tube.cc	/^void UpdateR3Interrupt(void) {$/;"	f
UpdateR4Interrupt	tube.cc	/^void UpdateR4Interrupt(void) {$/;"	f
UpdateSRState	uservia.cc	/^static void UpdateSRState(bool SRrw)$/;"	f	file:
UpdateTR00Status	disc1770.cc	/^static void UpdateTR00Status(void)$/;"	f	file:
UpdateTiming	beebwin.cc	/^bool BeebWin::UpdateTiming(void)$/;"	f	class:BeebWin
UpdateTrack	disc1770.cc	/^static bool UpdateTrack = false;$/;"	v	file:
UserKeymap	userkybd.cc	/^int UserKeymap[256][2]={$/;"	v
UserVIARead	uservia.cc	/^unsigned char UserVIARead(int Address)$/;"	f
UserVIAReset	uservia.cc	/^void UserVIAReset(void) {$/;"	f
UserVIAState	beebstate.h	/^	unsigned char UserVIAState[32];$/;"	m	struct:__anon28
UserVIAState	uservia.cc	/^VIAState UserVIAState;$/;"	v
UserVIATriggerCA1Int	uservia.cc	/^void UserVIATriggerCA1Int(void) {$/;"	f
UserVIAWrite	uservia.cc	/^void UserVIAWrite(int Address, int Value) {$/;"	f
UserVIA_poll	uservia.cc	/^void UserVIA_poll(unsigned int ncycles) {$/;"	f
UserVIA_poll_real	uservia.cc	/^void UserVIA_poll_real(void) {$/;"	f
VERIFY_TIME	disc1770.cc	/^#define VERIFY_TIME /;"	d	file:
VIAReset	via.cc	/^void VIAReset(VIAState *ToReset) {$/;"	f
VIAState	viastate.h	/^} VIAState;$/;"	t	typeref:struct:__anon24
VIA_HEADER	via.cc	/^#define VIA_HEADER$/;"	d	file:
VIA_HEADER	via.h	/^#define VIA_HEADER$/;"	d
VIDEO_CODEC	beebwin.cc	/^#define VIDEO_CODEC /;"	d	file:
VIDEO_HEADER	video.h	/^#define VIDEO_HEADER$/;"	d
VIDEO_QUALITY	beebwin.cc	/^#define VIDEO_QUALITY /;"	d	file:
VOLMAG	beebsound.cc	/^#define VOLMAG /;"	d	file:
VS_HEADER	viastate.h	/^#define VS_HEADER$/;"	d
VScreenAdjust	video.cc	/^long VScreenAdjust=0;$/;"	v
VStart	video.cc	/^int VStart,HStart;$/;"	v
VSyncState	video.cc	/^  int VSyncState; \/\/ Cannot =0 in MSVC $NRM; \/* When >0 VSync is high *\/$/;"	m	struct:__anon4	file:
V_FLAG	Arm.h	/^#define V_FLAG	/;"	d
ValidateSector	disc8271.cc	/^static bool ValidateSector(const SectorType *Sector, int Track, int SecLength) {$/;"	f	file:
Verify	disc1770.cc	/^static bool Verify = false;$/;"	v	file:
Verify	scsi.cc	/^static void Verify(void)$/;"	f	file:
VerifyInterrupt	disc8271.cc	/^static void VerifyInterrupt(void) {$/;"	f	file:
Version	main.cc	/^const char *Version="5.0a";$/;"	v
VersionDate	main.cc	/^const char *VersionDate="25th June 2020";$/;"	v
ViaCycles	6502core.cc	/^unsigned int ViaCycles;$/;"	v
VideoAddCursor	video.cc	/^static void VideoAddCursor(void) {$/;"	f	file:
VideoAddLEDs	video.cc	/^void VideoAddLEDs(void) {$/;"	f
VideoDoScanLine	video.cc	/^void VideoDoScanLine(void) {$/;"	f
VideoInit	video.cc	/^void VideoInit(void) {$/;"	f
VideoPoll	video.h	/^#define VideoPoll(/;"	d
VideoStartOfFrame	video.cc	/^static void VideoStartOfFrame(void) {$/;"	f	file:
VideoState	beebstate.h	/^	unsigned char VideoState[64];$/;"	m	struct:__anon28
VideoState	video.cc	/^static  VideoStateT VideoState;$/;"	v	file:
VideoStateT	video.cc	/^} VideoStateT;$/;"	t	typeref:struct:__anon4	file:
VideoTriggerCount	video.cc	/^int VideoTriggerCount=9999; \/* Number of cycles before next scanline service *\/$/;"	v
VideoULARead	video.cc	/^int VideoULARead(int Address) {$/;"	f
VideoULAWrite	video.cc	/^void VideoULAWrite(int Address, int Value) {$/;"	f
VideoULA_ControlReg	video.cc	/^unsigned char VideoULA_ControlReg=0x9c;$/;"	v
VideoULA_Palette	video.cc	/^unsigned char VideoULA_Palette[16];$/;"	v
Video_RefreshFrequency	video.cc	/^int Video_RefreshFrequency=1;$/;"	v
Vol	beebsound.cc	/^		unsigned int Vol:4;$/;"	m	struct:BeebState76489_S::__anon27	file:
WAIT	Master512CoPro.cc	/^	HLT, LOAD_PTR, LEA, NOP, WAIT, XLAT,            \/\/ MISC$/;"	e	enum:__anon26	file:
WD1770_CMD_FLAGS_ADD_DELAY	disc1770.cc	/^const int WD1770_CMD_FLAGS_ADD_DELAY             = 0x04; \/\/ Type II commands$/;"	v
WD1770_CMD_FLAGS_DISABLE_SPIN_UP	disc1770.cc	/^const int WD1770_CMD_FLAGS_DISABLE_SPIN_UP       = 0x08; \/\/ Type II commands$/;"	v
WD1770_CMD_FLAGS_MULTIPLE_SECTORS	disc1770.cc	/^const int WD1770_CMD_FLAGS_MULTIPLE_SECTORS      = 0x10; \/\/ Type II commands$/;"	v
WD1770_CMD_FLAGS_STEP_RATE	disc1770.cc	/^const int WD1770_CMD_FLAGS_STEP_RATE             = 0x03; \/\/ Type I commands$/;"	v
WD1770_CMD_FLAGS_UPDATE_TRACK_REGISTER	disc1770.cc	/^const int WD1770_CMD_FLAGS_UPDATE_TRACK_REGISTER = 0x10; \/\/ Type I commands$/;"	v
WD1770_CMD_FLAGS_VERIFY	disc1770.cc	/^const int WD1770_CMD_FLAGS_VERIFY                = 0x04; \/\/ Type I commands$/;"	v
WD1770_COMMAND_FORCE_INTERRUPT	disc1770.cc	/^const int WD1770_COMMAND_FORCE_INTERRUPT = 0xd0; \/\/ Type IV$/;"	v
WD1770_COMMAND_READ_ADDRESS	disc1770.cc	/^const int WD1770_COMMAND_READ_ADDRESS    = 0xc0; \/\/ Type III$/;"	v
WD1770_COMMAND_READ_SECTOR	disc1770.cc	/^const int WD1770_COMMAND_READ_SECTOR     = 0x80; \/\/ Type II$/;"	v
WD1770_COMMAND_READ_TRACK	disc1770.cc	/^const int WD1770_COMMAND_READ_TRACK      = 0xe0; \/\/ Type III$/;"	v
WD1770_COMMAND_RESTORE	disc1770.cc	/^const int WD1770_COMMAND_RESTORE         = 0x00; \/\/ Type I$/;"	v
WD1770_COMMAND_SEEK	disc1770.cc	/^const int WD1770_COMMAND_SEEK            = 0x10; \/\/ Type I$/;"	v
WD1770_COMMAND_STEP	disc1770.cc	/^const int WD1770_COMMAND_STEP            = 0x20; \/\/ Type I$/;"	v
WD1770_COMMAND_STEP_IN	disc1770.cc	/^const int WD1770_COMMAND_STEP_IN         = 0x40; \/\/ Type I$/;"	v
WD1770_COMMAND_STEP_OUT	disc1770.cc	/^const int WD1770_COMMAND_STEP_OUT        = 0x60; \/\/ Type I$/;"	v
WD1770_COMMAND_WRITE_SECTOR	disc1770.cc	/^const int WD1770_COMMAND_WRITE_SECTOR    = 0xa0; \/\/ Type II$/;"	v
WD1770_COMMAND_WRITE_TRACK	disc1770.cc	/^const int WD1770_COMMAND_WRITE_TRACK     = 0xf0; \/\/ Type III$/;"	v
WD1770_CONTROL_REGISTER	disc1770.cc	/^const unsigned char WD1770_CONTROL_REGISTER = 0;$/;"	v
WD1770_DATA_REGISTER	disc1770.cc	/^const unsigned char WD1770_DATA_REGISTER    = 3;$/;"	v
WD1770_SECTOR_REGISTER	disc1770.cc	/^const unsigned char WD1770_SECTOR_REGISTER  = 2;$/;"	v
WD1770_STATUS_BUSY	disc1770.cc	/^const unsigned char WD1770_STATUS_BUSY             = 0x01;$/;"	v
WD1770_STATUS_CRC_ERROR	disc1770.cc	/^const unsigned char WD1770_STATUS_CRC_ERROR        = 0x08;$/;"	v
WD1770_STATUS_DATA_REQUEST	disc1770.cc	/^const unsigned char WD1770_STATUS_DATA_REQUEST     = 0x02;$/;"	v
WD1770_STATUS_DELETED_DATA	disc1770.cc	/^const unsigned char WD1770_STATUS_DELETED_DATA     = 0x20; \/\/ Type II and III commands$/;"	v
WD1770_STATUS_INDEX	disc1770.cc	/^const unsigned char WD1770_STATUS_INDEX            = 0x02; \/\/ Type I commands$/;"	v
WD1770_STATUS_LOST_DATA	disc1770.cc	/^const unsigned char WD1770_STATUS_LOST_DATA        = 0x04;$/;"	v
WD1770_STATUS_MOTOR_ON	disc1770.cc	/^const unsigned char WD1770_STATUS_MOTOR_ON         = 0x80;$/;"	v
WD1770_STATUS_NOT_TRACK0	disc1770.cc	/^const unsigned char WD1770_STATUS_NOT_TRACK0       = 0x04; \/\/ Type I commands$/;"	v
WD1770_STATUS_RECORD_NOT_FOUND	disc1770.cc	/^const unsigned char WD1770_STATUS_RECORD_NOT_FOUND = 0x10;$/;"	v
WD1770_STATUS_REGISTER	disc1770.cc	/^const unsigned char WD1770_STATUS_REGISTER  = 0;$/;"	v
WD1770_STATUS_SPIN_UP_COMPLETE	disc1770.cc	/^const unsigned char WD1770_STATUS_SPIN_UP_COMPLETE = 0x20; \/\/ Type I commands$/;"	v
WD1770_STATUS_WRITE_PROTECT	disc1770.cc	/^const unsigned char WD1770_STATUS_WRITE_PROTECT    = 0x40;$/;"	v
WD1770_TRACK_REGISTER	disc1770.cc	/^const unsigned char WD1770_TRACK_REGISTER   = 1;$/;"	v
WECycles	sysvia.cc	/^char WECycles=0;$/;"	v
WEState	sysvia.cc	/^char WEState=0;$/;"	v
WORD	osd_cpu.h	/^typedef unsigned short WORD;$/;"	t
WORD	z80.h	/^typedef unsigned short WORD;$/;"	t
WORD	z80mem.h	/^typedef unsigned short	WORD;$/;"	t
WREGS	Master512CoPro.h	/^		enum WREGS { AX = 0, CX, DX, BX, SP, BP, SI, DI };$/;"	g	class:Master512CoPro
WaitForIdle	econet.cc	/^    WaitForIdle = 4,$/;"	m	class:AUNType::FourWayStage	file:
WaitingForTone	csw.h	/^    WaitingForTone,$/;"	m	class:CSWState
WholeRam	beebmem.cc	/^unsigned char WholeRam[65536];$/;"	v
WindowPos	beebwin.cc	/^long WindowPos[4];$/;"	v
WindowReference	GetFile.h	/^  typedef WindowPtr      WindowReference;$/;"	t
WindowTitle	beebwin.cc	/^static const char *WindowTitle = "BeebEm - BBC Model B \/ Master 128 Emulator";$/;"	v	file:
Word	Arm.h	/^typedef unsigned int Word;$/;"	t
WrapAddr	beebmem.cc	/^static unsigned int WrapAddr(int in) {$/;"	f	file:
WrapAddrMo7	beebmem.cc	/^static unsigned int WrapAddrMo7(int in) {$/;"	f	file:
WrapTubeCycles	tube.cc	/^void WrapTubeCycles(void) {$/;"	f
Write1770Register	disc1770.cc	/^void Write1770Register(unsigned char Register, unsigned char Value) {$/;"	f
Write6	scsi.cc	/^static void Write6(void)$/;"	f	file:
WriteData	scsi.cc	/^static void WriteData(int data)$/;"	f	file:
WriteEconetRegister	econet.cc	/^void WriteEconetRegister(unsigned char Register, unsigned char Value) {$/;"	f	class:AUNType::FourWayStage	file:
WriteFDCControlReg	disc1770.cc	/^void WriteFDCControlReg(unsigned char Value) {$/;"	f
WriteFailed	uefstate.h	/^    WriteFailed,$/;"	m	class:UEFStateResult
WriteGeometory	scsi.cc	/^bool WriteGeometory(unsigned char *buf)$/;"	f
WriteInterrupt	disc8271.cc	/^static void WriteInterrupt(void) {$/;"	f	file:
WriteLog	log.cc	/^void WriteLog(char *fmt, ...)$/;"	f
WriteLog	main.cc	/^void WriteLog(const char *fmt, ...)$/;"	f
WriteMyPropertyListToFile	plist.cc	/^void WriteMyPropertyListToFile( CFPropertyListRef propertyList,$/;"	f
WriteOffset	beebsound.cc	/^int WriteOffset=0;$/;"	v
WritePaged	6502core.cc	/^#define WritePaged(/;"	d	file:
WriteSector	scsi.cc	/^static bool WriteSector(unsigned char *buf, int block)$/;"	f	file:
WriteTorchTubeFromHostSide	tube.cc	/^void WriteTorchTubeFromHostSide(unsigned char IOAddr,unsigned char IOData) $/;"	f
WriteTorchTubeFromParasiteSide	tube.cc	/^void WriteTorchTubeFromParasiteSide(unsigned char IOAddr,unsigned char IOData) $/;"	f
WriteTubeFromHostSide	tube.cc	/^void WriteTubeFromHostSide(unsigned char IOAddr,unsigned char IOData) {$/;"	f
WriteTubeFromParasiteSide	tube.cc	/^void WriteTubeFromParasiteSide(unsigned char IOAddr,unsigned char IOData) $/;"	f
WriteZ80Mem	z80_support.cc	/^void WriteZ80Mem(int pc, unsigned char data)$/;"	f
Write_ACIA_Control	serial.cc	/^void Write_ACIA_Control(unsigned char CReg) {$/;"	f
Write_ACIA_Tx_Data	serial.cc	/^void Write_ACIA_Tx_Data(unsigned char Data) {$/;"	f
Write_SERPROC	serial.cc	/^void Write_SERPROC(unsigned char Data) {$/;"	f
Writeable	disc8271.cc	/^static bool Writeable[2]={false,false}; \/* True if the drives are writeable *\/$/;"	v	file:
XCHG_AR16	Master512CoPro.cc	/^	XCHG_RR16, XCHG_RM16, XCHG_AR16,                \/\/ EXCHANGE, 16-BIT$/;"	e	enum:__anon26	file:
XCHG_RM16	Master512CoPro.cc	/^	XCHG_RR16, XCHG_RM16, XCHG_AR16,                \/\/ EXCHANGE, 16-BIT$/;"	e	enum:__anon26	file:
XCHG_RM8	Master512CoPro.cc	/^	XCHG_RR8, XCHG_RM8,                             \/\/ EXCHANGE, 8-BIT$/;"	e	enum:__anon26	file:
XCHG_RR16	Master512CoPro.cc	/^	XCHG_RR16, XCHG_RM16, XCHG_AR16,                \/\/ EXCHANGE, 16-BIT$/;"	e	enum:__anon26	file:
XCHG_RR8	Master512CoPro.cc	/^	XCHG_RR8, XCHG_RM8,                             \/\/ EXCHANGE, 8-BIT$/;"	e	enum:__anon26	file:
XLAT	Master512CoPro.cc	/^	HLT, LOAD_PTR, LEA, NOP, WAIT, XLAT,            \/\/ MISC$/;"	e	enum:__anon26	file:
XORB	Master512CoPro.cc	/^inline void Master512CoPro::XORB()$/;"	f	class:Master512CoPro
XORW	Master512CoPro.cc	/^inline void Master512CoPro::XORW()$/;"	f	class:Master512CoPro
XReg	6502core.cc	/^static int Accumulator,XReg,YReg;$/;"	v	file:
XReg	tube.cc	/^static int Accumulator,XReg,YReg;$/;"	v	file:
XchgAXReg	Master512CoPro.cc	/^inline void Master512CoPro::XchgAXReg(uint8_t reg)$/;"	f	class:Master512CoPro
YReg	6502core.cc	/^static int Accumulator,XReg,YReg;$/;"	v	file:
YReg	tube.cc	/^static int Accumulator,XReg,YReg;$/;"	v	file:
Z80_Disassemble	z80dis.cc	/^int Z80_Disassemble(int adr, char *s)$/;"	f
ZF	Master512CoPro.cc	/^#define ZF /;"	d	file:
ZPG	debug.cc	/^#define ZPG /;"	d	file:
ZPG	debug_org.cc	/^#define ZPG /;"	d	file:
ZPIndAddrModeHandler_Address	6502core.cc	/^INLINE static int16 ZPIndAddrModeHandler_Address(void) {$/;"	f	file:
ZPIndAddrModeHandler_Address	tube.cc	/^INLINE static int16 ZPIndAddrModeHandler_Address(void) {$/;"	f	file:
ZPIndAddrModeHandler_Data	6502core.cc	/^INLINE static int16 ZPIndAddrModeHandler_Data(void) {$/;"	f	file:
ZPIndAddrModeHandler_Data	tube.cc	/^INLINE static int16 ZPIndAddrModeHandler_Data(void) {$/;"	f	file:
ZPX	debug.cc	/^#define ZPX /;"	d	file:
ZPX	debug_org.cc	/^#define ZPX /;"	d	file:
ZPY	debug.cc	/^#define ZPY /;"	d	file:
ZPY	debug_org.cc	/^#define ZPY /;"	d	file:
Z_FLAG	Arm.h	/^#define Z_FLAG	/;"	d
ZeroPgAddrModeHandler_Address	6502core.cc	/^INLINE static int16 ZeroPgAddrModeHandler_Address(void) {$/;"	f	file:
ZeroPgAddrModeHandler_Address	tube.cc	/^INLINE static int16 ZeroPgAddrModeHandler_Address(void) {$/;"	f	file:
ZeroPgXAddrModeHandler_Address	6502core.cc	/^INLINE static int16 ZeroPgXAddrModeHandler_Address(void) {$/;"	f	file:
ZeroPgXAddrModeHandler_Address	tube.cc	/^INLINE static int16 ZeroPgXAddrModeHandler_Address(void) {$/;"	f	file:
ZeroPgXAddrModeHandler_Data	6502core.cc	/^INLINE static int16 ZeroPgXAddrModeHandler_Data(void) {$/;"	f	file:
ZeroPgXAddrModeHandler_Data	tube.cc	/^INLINE static int16 ZeroPgXAddrModeHandler_Data(void) {$/;"	f	file:
ZeroPgYAddrModeHandler_Address	6502core.cc	/^INLINE static int16 ZeroPgYAddrModeHandler_Address(void) {$/;"	f	file:
ZeroPgYAddrModeHandler_Address	tube.cc	/^INLINE static int16 ZeroPgYAddrModeHandler_Address(void) {$/;"	f	file:
ZeroPgYAddrModeHandler_Data	6502core.cc	/^INLINE static int16 ZeroPgYAddrModeHandler_Data(void) {$/;"	f	file:
ZeroPgYAddrModeHandler_Data	tube.cc	/^INLINE static int16 ZeroPgYAddrModeHandler_Data(void) {$/;"	f	file:
_DISCEDIT_H	discedit.h	/^#define _DISCEDIT_H$/;"	d
_MAX_PATH	discedit.h	/^#define _MAX_PATH /;"	d
_UEF_H	uef.h	/^#define _UEF_H$/;"	d
__VIDEO_FRAME_TO_GWORLD__	GetFile.h	/^  #define __VIDEO_FRAME_TO_GWORLD__$/;"	d
a	main.h	/^    unsigned char a;$/;"	m	struct:CColour
acr	viastate.h	/^  unsigned char acr,pcr;$/;"	m	struct:__anon24
adcOperator	Arm.cc	/^inline uint32 CArm::adcOperator(uint32 operand1, uint32 operand2)$/;"	f	class:CArm
adcOperatorS	Arm.cc	/^inline uint32 CArm::adcOperatorS(uint32 operand1, uint32 operand2)$/;"	f	class:CArm
addOperator	Arm.cc	/^inline uint32 CArm::addOperator(uint32 operand1, uint32 operand2)$/;"	f	class:CArm
addOperatorS	Arm.cc	/^inline uint32 CArm::addOperatorS(uint32 operand1, uint32 operand2)$/;"	f	class:CArm
af	z80.cc	/^WORD af[2];			\/* accumulator and flags (2 banks) *\/$/;"	v
af_sel	z80.cc	/^int af_sel;			\/* bank select for af *\/$/;"	v
ah	econet.cc	/^        AUNHeader ah;$/;"	m	union:AUNType::FourWayStage::EthernetPacket::__anon1	file:
all	Arm.h	/^	uint32 all;$/;"	m	union:Signals
andOperator	Arm.cc	/^inline uint32 CArm::andOperator(uint32 operand1, uint32 operand2)$/;"	f	class:CArm
andOperatorS	Arm.cc	/^inline uint32 CArm::andOperatorS(uint32 operand1, uint32 operand2)$/;"	f	class:CArm
arm	beebwin.cc	/^CArm *arm = NULL;$/;"	v
asrOperator	TarmacGlobals.h	/^inline uint32 asrOperator(uint32 value, uint shiftAmount)$/;"	f
audev_close_device	audev-macosx.cc	/^void audev_close_device()$/;"	f
audev_get_framesperbuf	audev-macosx.cc	/^long audev_get_framesperbuf()$/;"	f
audev_get_soundrate	audev-macosx.cc	/^long audev_get_soundrate()$/;"	f
audev_init_device	audev-macosx.cc	/^int audev_init_device(char *dummydevname, long ratewanted, int verbose, extraopt_t *extra)$/;"	f
audev_loop	audev-macosx.cc	/^int audev_loop(mix_func_t mixfunc, generate_func_t genfunc, void *rock)$/;"	f
audev_play_buff	audev-macosx.cc	/^void audev_play_buff(unsigned char *buff, int len)$/;"	f
audev_play_full_buff	audev-macosx.cc	/^int audev_play_full_buff(unsigned char *buff)$/;"	f
audevice	audev-macosx.cc	/^static AudioDeviceID audevice = kAudioDeviceUnknown;$/;"	v	file:
aunnet	econet.cc	/^static AUNTAB aunnet[AUN_TABLE_LENGTH]; \/\/ AUNMap file for guess mode.$/;"	m	class:AUNType::FourWayStage	file:
aunnetp	econet.cc	/^static unsigned int aunnetp = 0;                \/\/ now many networks do i know about$/;"	m	class:AUNType::FourWayStage	file:
b	Master512CoPro.h	/^				int b[256];$/;"	m	struct:Master512CoPro::__anon14::__anon15
b	Master512CoPro.h	/^				int b[256];$/;"	m	struct:Master512CoPro::__anon14::__anon16
b	Master512CoPro.h	/^			uint8_t  b[16];$/;"	m	union:Master512CoPro::__anon12
b	ea.h	/^		BREGS b[256];$/;"	m	struct:__anon5::__anon6
b	ea.h	/^		BREGS b[256];$/;"	m	struct:__anon5::__anon7
b	main.h	/^    unsigned char b;$/;"	m	struct:CColour
bDoSound	beebsound.cc	/^volatile bool bDoSound=true;$/;"	v
bReRead	beebsound.cc	/^bool bReRead=false;$/;"	v
bailing	audev-macosx.cc	/^static int bailing;$/;"	v	file:
bc	z80.h	/^	WORD bc;$/;"	m	struct:ddregs
beeb_HandleCommand	beebwin.cc	/^extern "C" int beeb_HandleCommand(unsigned int cmdID)$/;"	f
beeb_nextupdate	beebwin.cc	/^void beeb_nextupdate(long microseconds)$/;"	f
beeb_now	beebwin.cc	/^long beeb_now() \/\/ milliseconds$/;"	f
beeb_usleep	beebwin.cc	/^void beeb_usleep(long microseconds)$/;"	f
beebmem_dumpstate	beebmem.cc	/^void beebmem_dumpstate(void) {$/;"	f
bit_count	csw.cc	/^static int bit_count;$/;"	v	file:
blocks	sasi.cc	/^	int blocks;$/;"	m	struct:__anon9	file:
blocks	scsi.cc	/^	int blocks;$/;"	m	struct:scsi_t	file:
bootOpts	discedit.h	/^	int bootOpts;$/;"	m	struct:__anon23
bsy	sasi.cc	/^	bool bsy;$/;"	m	struct:__anon9	file:
bsy	scsi.cc	/^	bool bsy;$/;"	m	struct:scsi_t	file:
buf	audev-macosx.cc	/^  float *buf;$/;"	m	struct:buffer_struct	file:
bufcount	audev-macosx.cc	/^static int bufcount = 8;$/;"	v	file:
buff	econet.cc	/^        unsigned char buff[ETHERNET_BUFFER_SIZE + 12];$/;"	m	union:AUNType::FourWayStage::EconetPacket::__anon3	file:
buff	econet.cc	/^        unsigned char buff[ETHERNET_BUFFER_SIZE];$/;"	m	union:AUNType::FourWayStage::EthernetPacket::__anon2	file:
buffer	sasi.cc	/^	unsigned char buffer[0x800];$/;"	m	struct:__anon9	file:
buffer	scsi.cc	/^	unsigned char buffer[0x800];$/;"	m	struct:scsi_t	file:
buffer_empty	speech.h	/^	UINT8 buffer_empty;		\/* FIFO is empty*\/$/;"	m	struct:tms5220
buffer_low	speech.h	/^	UINT8 buffer_low;		\/* FIFO has less than 8 bytes in it *\/$/;"	m	struct:tms5220
buffer_struct	audev-macosx.cc	/^typedef struct buffer_struct {$/;"	s	file:
buffer_t	audev-macosx.cc	/^} buffer_t;$/;"	t	typeref:struct:buffer_struct	file:
bufptr	beebsound.cc	/^static int bufptr=0;$/;"	v	file:
busfree	sasi.cc	/^	busfree,$/;"	e	enum:phase_s	file:
busfree	scsi.cc	/^	busfree,$/;"	e	enum:phase_t	file:
c6502	debug.cc	/^	int  c6502;$/;"	m	struct:InstInfo	file:
c6502	debug_org.cc	/^	int  c6502;$/;"	m	struct:InstInfo	file:
ca2	viastate.h	/^  bool ca2;$/;"	m	struct:__anon24
calc_addr	Master512CoPro.cc	/^inline uint32_t Master512CoPro::calc_addr(int seg, uint16_t offset, int size, int op, bool override)$/;"	f	class:Master512CoPro
cb	econet.cc	/^    unsigned char cb;        \/\/ flag$/;"	m	struct:AUNType::AUNHeader	file:
cb	econet.cc	/^    unsigned char cb;$/;"	m	struct:AUNType::FourWayStage::LongEconetPacket	file:
cb2	viastate.h	/^  bool cb2;$/;"	m	struct:__anon24
cd	sasi.cc	/^	bool cd;$/;"	m	struct:__anon9	file:
cd	scsi.cc	/^	bool cd;$/;"	m	struct:scsi_t	file:
check_buffer_low	speech.cc	/^static void check_buffer_low(struct tms5220 *tms)$/;"	f	file:
chip	speech.h	/^	struct tms5220 *chip;$/;"	m	struct:tms5220_info	typeref:struct:tms5220_info::tms5220
chirptable	speech.cc	/^static char chirptable[41]={$/;"	v	file:
clearConditionFlags	Arm.cc	/^inline void CArm::clearConditionFlags(uint32 flagValue)$/;"	f	class:CArm
clearTrans	Arm.cc	/^inline void CArm::clearTrans()$/;"	f	class:CArm
clock	speech.h	/^	int clock;$/;"	m	struct:tms5220_info
closesocket	econet.cc	/^void closesocket(SOCKET socket)$/;"	f	class:AUNType::FourWayStage	file:
cmd	sasi.cc	/^	unsigned char cmd[10];$/;"	m	struct:__anon9	file:
cmd	scsi.cc	/^	unsigned char cmd[10];$/;"	m	struct:scsi_t	file:
code	sasi.cc	/^	int code;$/;"	m	struct:__anon9	file:
code	scsi.cc	/^	int code;$/;"	m	struct:scsi_t	file:
colPtr	teletext.cc	/^int colPtr = 0x00;$/;"	v
cols	beebwin.h	/^	unsigned char cols[256]; \/* Beeb colour lookup *\/$/;"	m	class:BeebWin
command	sasi.cc	/^	command,$/;"	e	enum:phase_s	file:
command	scsi.cc	/^	command,$/;"	e	enum:phase_t	file:
common_op	Master512CoPro.cc	/^bool Master512CoPro::common_op(uint8_t op)$/;"	f	class:Master512CoPro
cond	audev-macosx.cc	/^  pthread_cond_t cond;$/;"	m	struct:buffer_struct	file:
conditionFlags	Arm.h	/^	uint conditionFlags;			\/\/ store NZCV flags in bits 0-3$/;"	m	class:CArm
confAUNmode	econet.cc	/^static bool confAUNmode = false;      \/\/ Use AUN style networking$/;"	v	file:
confLEARN	econet.cc	/^static bool confLEARN = false;        \/\/ Add receipts from unknown hosts to network table$/;"	v	file:
confSTRICT	econet.cc	/^static bool confSTRICT = false;       \/\/ Assume network ip=stn number when sending to unknown hosts$/;"	v	file:
confSingleSocket	econet.cc	/^static bool confSingleSocket = true;  \/\/ use same socket for Send and receive$/;"	v	file:
control	Master512CoPro.h	/^			uint16_t control;$/;"	m	struct:Master512CoPro::dma_state
control1	econet.h	/^	unsigned char control1;$/;"	m	struct:MC6854
control2	econet.h	/^	unsigned char control2;$/;"	m	struct:MC6854
control3	econet.h	/^	unsigned char control3;$/;"	m	struct:MC6854
control4	econet.h	/^	unsigned char control4;$/;"	m	struct:MC6854
coprocessorDataOperation	Arm.cc	/^inline bool CArm::coprocessorDataOperation()$/;"	f	class:CArm
coprocessorDataTransferLoad	Arm.cc	/^inline bool CArm::coprocessorDataTransferLoad(uint32 address)$/;"	f	class:CArm
coprocessorDataTransferOffset	Arm.cc	/^inline uint32 CArm::coprocessorDataTransferOffset()$/;"	f	class:CArm
coprocessorDataTransferStore	Arm.cc	/^inline bool CArm::coprocessorDataTransferStore(uint32 address)$/;"	f	class:CArm
coprocessorRegisterTransferRead	Arm.cc	/^inline bool CArm::coprocessorRegisterTransferRead()$/;"	f	class:CArm
coprocessorRegisterTransferWrite	Arm.cc	/^inline bool CArm::coprocessorRegisterTransferWrite()$/;"	f	class:CArm
core_dumpstate	6502core.cc	/^void core_dumpstate(void) {$/;"	f
count	Master512CoPro.h	/^			uint16_t count;$/;"	m	struct:Master512CoPro::dma_state
countSetBits	TarmacGlobals.h	/^inline uint countSetBits(uint32 value)$/;"	f
crc	uef.cc	/^	int crc;$/;"	m	struct:uef_chunk_info	file:
crtclog	video.cc	/^FILE *crtclog;$/;"	v
csw_bit	csw.cc	/^int csw_bit;$/;"	v
csw_buff	csw.cc	/^static unsigned char *csw_buff;$/;"	v	file:
csw_bufflen	csw.cc	/^unsigned long csw_bufflen;$/;"	v
csw_byte	csw.cc	/^static int csw_byte;$/;"	v	file:
csw_data	csw.cc	/^int csw_data(void)$/;"	f
csw_datastate	csw.cc	/^static CSWDataState csw_datastate;$/;"	v	file:
csw_file	csw.cc	/^static FILE *csw_file;$/;"	v	file:
csw_poll	csw.cc	/^int csw_poll(int clock)$/;"	f
csw_ptr	csw.cc	/^int csw_ptr;$/;"	v
csw_pulsecount	csw.cc	/^int csw_pulsecount;$/;"	v
csw_pulselen	csw.cc	/^int csw_pulselen;$/;"	v
csw_state	csw.cc	/^CSWState csw_state;$/;"	v
csw_tonecount	csw.cc	/^int csw_tonecount;$/;"	v
cts	econet.h	/^	bool cts;		\/\/ signal up$/;"	m	struct:MC6854
curR	Arm.h	/^	uint32	*curR[4];				\/\/ pointer to current mode's registers$/;"	m	class:CArm
curr_sample	speech.h	/^	int last_sample, curr_sample;$/;"	m	struct:tms5220_info
currentInstruction	Arm.h	/^	uint32	currentInstruction;$/;"	m	class:CArm
current_energy	speech.h	/^	UINT16 current_energy;$/;"	m	struct:tms5220
current_k	speech.h	/^	int current_k[10];$/;"	m	struct:tms5220
current_pc	Arm.cc	/^Word CArm::current_pc()$/;"	f	class:CArm
current_pitch	speech.h	/^	UINT16 current_pitch;$/;"	m	struct:tms5220
dByteCount	disc1770.cc	/^static int dByteCount = 0;$/;"	v	file:
data	beebwin.h	/^	unsigned char data[16];$/;"	m	union:__anon11
data	beebwin.h	/^	unsigned char data[8];$/;"	m	union:__anon10
data	uef.cc	/^	unsigned char *data;$/;"	m	struct:uef_chunk_info	file:
data_register	speech.h	/^	UINT8 data_register;				\/* data register, used by read command *\/$/;"	m	struct:tms5220
datalatch	atodconv.cc	/^	unsigned char datalatch;$/;"	m	struct:AtoDStateT	file:
ddra	viastate.h	/^  unsigned char ddra,ddrb;$/;"	m	struct:__anon24
ddrb	viastate.h	/^  unsigned char ddra,ddrb;$/;"	m	struct:__anon24
ddregs	z80.h	/^extern struct ddregs {$/;"	s
de	z80.h	/^	WORD de;$/;"	m	struct:ddregs
debugADLCprint	econet.cc	/^void debugADLCprint(void) {$/;"	f	class:AUNType::FourWayStage	file:
debug_lines	debug.cc	/^int debug_lines;$/;"	v
debug_log	debug.cc	/^char debug_log[MAX_LINES][101];$/;"	v
debug_z80	z80_support.cc	/^int debug_z80 = 0;$/;"	v
decodeBlockDTPostIndex	ArmDisassembler.cc	/^char *decodeBlockDTPostIndex(uint32 address, uint32 instruction, char *buff)$/;"	f
decodeBlockDTPreIndex	ArmDisassembler.cc	/^char *decodeBlockDTPreIndex(uint32 address, uint32 instruction, char *buff)$/;"	f
decodeBranch	ArmDisassembler.cc	/^char *decodeBranch(uint32 address, uint32 instruction, char *buff)$/;"	f
decodeBranchWithLink	ArmDisassembler.cc	/^char *decodeBranchWithLink(uint32 address, uint32 instruction, char *buff)$/;"	f
decodeCoProDTPostIndex	ArmDisassembler.cc	/^char *decodeCoProDTPostIndex(uint32 address, uint32 instruction, char *buff)$/;"	f
decodeCoProDTPreIndex	ArmDisassembler.cc	/^char *decodeCoProDTPreIndex(uint32 address, uint32 instruction, char *buff)$/;"	f
decodeCoProRegTransferOrDataOperation	ArmDisassembler.cc	/^char *decodeCoProRegTransferOrDataOperation(uint32 address, uint32 instruction, char *buff)$/;"	f
decodeConditionCode	ArmDisassembler.cc	/^const char *decodeConditionCode(uint32 instruction)$/;"	f
decodeDataProcessing	ArmDisassembler.cc	/^char *decodeDataProcessing(uint32 address, uint32 instruction, char *buff)$/;"	f
decodeMultiply	ArmDisassembler.cc	/^char *decodeMultiply(uint32 address, uint32 instruction, char *buff)$/;"	f
decodeMultiplyOrDataProcessing	ArmDisassembler.cc	/^char *decodeMultiplyOrDataProcessing(uint32 address, uint32 instruction, char *buff)$/;"	f
decodeRegisterList	ArmDisassembler.cc	/^char *decodeRegisterList(uint32 instruction)$/;"	f
decodeSingleDTImmOffsetPostIndex	ArmDisassembler.cc	/^char *decodeSingleDTImmOffsetPostIndex(uint32 address, uint32 instruction, char *buff)$/;"	f
decodeSingleDTImmOffsetPreIndex	ArmDisassembler.cc	/^char *decodeSingleDTImmOffsetPreIndex(uint32 address, uint32 instruction, char *buff)$/;"	f
decodeSingleDTRegOffsetPostIndex	ArmDisassembler.cc	/^char *decodeSingleDTRegOffsetPostIndex(uint32 address, uint32 instruction, char *buff)$/;"	f
decodeSingleDTRegOffsetPreIndex	ArmDisassembler.cc	/^char *decodeSingleDTRegOffsetPreIndex(uint32 address, uint32 instruction, char *buff)$/;"	f
decodeSingleDataSwap	ArmDisassembler.cc	/^char *decodeSingleDataSwap(uint32 address, uint32 instruction, char *buff)$/;"	f
decodeSingleDataSwapOrDataProcessing	ArmDisassembler.cc	/^char *decodeSingleDataSwapOrDataProcessing(uint32 address, uint32 instruction, char *buff)$/;"	f
decodeSoftwareInterrupt	ArmDisassembler.cc	/^char *decodeSoftwareInterrupt(uint32 address, uint32 instruction, char *buff)$/;"	f
dest	Master512CoPro.h	/^			uint32_t dest;$/;"	m	struct:Master512CoPro::dma_state
destnet	econet.cc	/^    unsigned char destnet;$/;"	m	struct:AUNType::FourWayStage::LongEconetPacket	file:
destnet	econet.cc	/^    unsigned char destnet;$/;"	m	struct:AUNType::FourWayStage::ShorEeconetHeader	file:
destnet	econet.cc	/^    unsigned int destnet;$/;"	m	struct:AUNType::FourWayStage::EthernetPacket	file:
deststn	econet.cc	/^    unsigned char deststn;$/;"	m	struct:AUNType::FourWayStage::LongEconetPacket	file:
deststn	econet.cc	/^    unsigned char deststn;$/;"	m	struct:AUNType::FourWayStage::ShorEeconetHeader	file:
deststn	econet.cc	/^    unsigned int deststn;$/;"	m	struct:AUNType::FourWayStage::EthernetPacket	file:
dfsCat	beebwin.cc	/^static DFS_DISC_CATALOGUE dfsCat;$/;"	v	file:
dfs_export_file	discedit.cc	/^bool dfs_export_file(const char *szDiscFile, int numSides, int side, DFS_DISC_CATALOGUE *dfsCat,$/;"	f
dfs_get_catalogue	discedit.cc	/^bool dfs_get_catalogue($/;"	f
dfs_get_files_from_cat	discedit.cc	/^static void dfs_get_files_from_cat($/;"	f	file:
dfs_import_file	discedit.cc	/^bool dfs_import_file(const char *szDiscFile, int numSides, int side, DFS_DISC_CATALOGUE *dfsCat,$/;"	f
dfs_write_files_to_cat	discedit.cc	/^static void dfs_write_files_to_cat($/;"	f	file:
directory	discedit.h	/^	char directory;$/;"	m	struct:__anon22
disc8271_dumpstate	disc8271.cc	/^void disc8271_dumpstate()$/;"	f
disp_regs	z80_support.cc	/^void disp_regs()$/;"	f
dma_state	Master512CoPro.h	/^		struct dma_state$/;"	s	class:Master512CoPro
doCopy	beebwin.cc	/^void BeebWin::doCopy()$/;"	f	class:BeebWin
doHorizLine	beebwin.cc	/^void BeebWin::doHorizLine(unsigned long Col, int y, int sx, int width) $/;"	f	class:BeebWin
doInvHorizLine	beebwin.cc	/^void BeebWin::doInvHorizLine(unsigned long Col, int y, int sx, int width) $/;"	f	class:BeebWin
doLED	beebwin.cc	/^void BeebWin::doLED(int sx,bool on) {$/;"	f	class:BeebWin
doPaste	beebwin.cc	/^void BeebWin::doPaste()$/;"	f	class:BeebWin
doUHorizLine	beebwin.cc	/^void BeebWin::doUHorizLine(unsigned long Col, int y, int sx, int width) $/;"	f	class:BeebWin
drq_state	Master512CoPro.h	/^			bool drq_state;$/;"	m	struct:Master512CoPro::dma_state
ec_sequence	econet.cc	/^static unsigned long ec_sequence = 0;$/;"	m	class:AUNType	file:
eh	econet.cc	/^        LongEconetPacket eh;$/;"	m	union:AUNType::FourWayStage::EconetPacket::__anon3	file:
eh	econet.cc	/^        ShorEeconetHeader eh;$/;"	m	union:AUNType::FourWayStage::EthernetPacket::__anon2	file:
eightbyte	beebwin.h	/^  EightByteType eightbyte;$/;"	m	union:__anon10
eightbytes	beebwin.h	/^  EightByteType eightbytes[2];$/;"	m	union:__anon11
emptying	audev-macosx.cc	/^static int filling, emptying;$/;"	v	file:
end	debug.cc	/^	int end;$/;"	m	struct:Breakpoint	file:
end	debug_org.cc	/^	int end;$/;"	m	struct:Breakpoint	file:
end_time	uef.cc	/^	int end_time;$/;"	m	struct:uef_chunk_info	file:
endianness_t	Master512CoPro.h	/^enum endianness_t$/;"	g
energytable	speech.cc	/^const static unsigned short energytable[0x10]={$/;"	v	file:
eorOperator	Arm.cc	/^inline uint32 CArm::eorOperator(uint32 operand1, uint32 operand2)$/;"	f	class:CArm
eorOperatorS	Arm.cc	/^inline uint32 CArm::eorOperatorS(uint32 operand1, uint32 operand2)$/;"	f	class:CArm
errstr	disc1770.cc	/^char errstr[250];$/;"	v
exceptionAddress	Arm.cc	/^inline void CArm::exceptionAddress()$/;"	f	class:CArm
exceptionDataAbort	Arm.cc	/^inline void CArm::exceptionDataAbort()$/;"	f	class:CArm
exceptionFastInterruptRequest	Arm.cc	/^inline void CArm::exceptionFastInterruptRequest()$/;"	f	class:CArm
exceptionInterruptRequest	Arm.cc	/^inline void CArm::exceptionInterruptRequest()$/;"	f	class:CArm
exceptionPrefetchAbort	Arm.cc	/^inline void CArm::exceptionPrefetchAbort()$/;"	f	class:CArm
exceptionReset	Arm.cc	/^inline void CArm::exceptionReset()$/;"	f	class:CArm
exceptionSoftwareInterrupt	Arm.cc	/^inline void CArm::exceptionSoftwareInterrupt()$/;"	f	class:CArm
exceptionUndefinedInstruction	Arm.cc	/^inline void CArm::exceptionUndefinedInstruction()$/;"	f	class:CArm
exec	Arm.cc	/^void CArm::exec(int count)$/;"	f	class:CArm
execAddr	discedit.h	/^	int execAddr;$/;"	m	struct:__anon22
execute	sasi.cc	/^	execute,$/;"	e	enum:phase_s	file:
execute	scsi.cc	/^	execute,$/;"	e	enum:phase_t	file:
executeConditionally	Arm.cc	/^inline bool CArm::executeConditionally(uint32 instruction)$/;"	f	class:CArm
execute_set_input	Master512CoPro.cc	/^void Master512CoPro::execute_set_input(int inptnum, int state)$/;"	f	class:Master512CoPro
executionCount	Arm.h	/^	uint32 executionCount;$/;"	m	class:CArm
extract_bits	speech.cc	/^static int extract_bits(struct tms5220 *tms, int count)$/;"	f	file:
extraopt_struct	common.h	/^typedef struct extraopt_struct {$/;"	s
extraopt_t	common.h	/^} extraopt_t;$/;"	t	typeref:struct:extraopt_struct
fastInterruptDisableFlag	Arm.h	/^	uint fastInterruptDisableFlag;	\/\/ in bit 27$/;"	m	class:CArm
fast_interrupt	Arm.h	/^		uint8 fast_interrupt;		\/\/ fast interrupt may have occurred$/;"	m	struct:Signals::__anon8
fetch	Master512CoPro.h	/^		uint8_t fetch()$/;"	f	class:Master512CoPro
fetch_op	Master512CoPro.h	/^		uint8_t fetch_op() { return fetch(); }$/;"	f	class:Master512CoPro
fetch_word	Master512CoPro.h	/^		uint16_t fetch_word()$/;"	f	class:Master512CoPro
fget16	uefstate.cc	/^unsigned int fget16(FILE *fileptr) {$/;"	f
fget32	uefstate.cc	/^unsigned int fget32(FILE *fileptr) {$/;"	f
fget8	uefstate.cc	/^unsigned char fget8(FILE *fileptr)$/;"	f
fgetbool	uefstate.cc	/^bool fgetbool(FILE *fileptr)$/;"	f
fifo	speech.h	/^	UINT8 fifo[FIFO_SIZE];$/;"	m	struct:tms5220
fifo_bits_taken	speech.h	/^	UINT8 fifo_bits_taken;$/;"	m	struct:tms5220
fifo_count	speech.h	/^	UINT8 fifo_count;$/;"	m	struct:tms5220
fifo_head	speech.h	/^	UINT8 fifo_head;$/;"	m	struct:tms5220
fifo_tail	speech.h	/^	UINT8 fifo_tail;$/;"	m	struct:tms5220
fileAttrs	discedit.h	/^	DFS_FILE_ATTR fileAttrs[DFS_MAX_CAT_SIZE];$/;"	m	struct:__anon23
file_buf	csw.cc	/^static unsigned char file_buf[BUFFER_LEN];$/;"	v	file:
filename	discedit.h	/^	char filename[DFS_MAX_NAME_LEN+1];$/;"	m	struct:__anon22
filling	audev-macosx.cc	/^static int filling, emptying;$/;"	v	file:
fiqR	Arm.h	/^	uint32	fiqR[16];				\/\/ fast interrupt mode registers$/;"	m	class:CArm
first_frame	speech.h	/^	UINT8 first_frame;		\/* we have just started speaking, and we are to parse the first frame *\/$/;"	m	struct:tms5220
flag	debug.cc	/^	int  flag;$/;"	m	struct:InstInfo	file:
flag	debug_org.cc	/^	int  flag;$/;"	m	struct:InstInfo	file:
fourwaystage	econet.cc	/^static FourWayStage fourwaystage;$/;"	m	class:AUNType::FourWayStage	file:
fput16	uefstate.cc	/^void fput16(unsigned int word16,FILE *fileptr) {$/;"	f
fput32	uefstate.cc	/^void fput32(unsigned int word32,FILE *fileptr) {$/;"	f
framesperbuf	audev-macosx.cc	/^static long framesperbuf = 0;$/;"	v	file:
full	audev-macosx.cc	/^  int full;$/;"	m	struct:buffer_struct	file:
g	main.h	/^    unsigned char g;$/;"	m	struct:CColour
gOriginalTTYAttrs	serialdevices.cc	/^struct termios gOriginalTTYAttrs;$/;"	v	typeref:struct:termios
generate_func_t	common.h	/^typedef int (*generate_func_t)(long curtime, void *rock);$/;"	t
getBit	TarmacGlobals.h	/^inline uint32 getBit(uint32 w, uint32 b)$/;"	f
getConditionFlag	Arm.cc	/^inline uint CArm::getConditionFlag(uint32 flagValue)$/;"	f	class:CArm
getDataProcessingImmediateOperand1	Arm.cc	/^inline uint32 CArm::getDataProcessingImmediateOperand1()$/;"	f	class:CArm
getDataProcessingImmediateOperand2	Arm.cc	/^inline uint32 CArm::getDataProcessingImmediateOperand2()$/;"	f	class:CArm
getDataProcessingImmediateOperand2S	Arm.cc	/^inline uint32 CArm::getDataProcessingImmediateOperand2S()$/;"	f	class:CArm
getDataProcessingRegisterOperand1	Arm.cc	/^inline uint32 CArm::getDataProcessingRegisterOperand1()$/;"	f	class:CArm
getDataProcessingRegisterOperand2	Arm.cc	/^inline uint32 CArm::getDataProcessingRegisterOperand2()$/;"	f	class:CArm
getDataProcessingRegisterOperand2S	Arm.cc	/^inline uint32 CArm::getDataProcessingRegisterOperand2S()$/;"	f	class:CArm
getDataTransferValueImmediate	Arm.cc	/^inline uint32 CArm::getDataTransferValueImmediate()$/;"	f	class:CArm
getDataTransferValueRegister	Arm.cc	/^inline uint32 CArm::getDataTransferValueRegister()$/;"	f	class:CArm
getField	TarmacGlobals.h	/^inline uint32 getField(uint32 w, uint32 s, uint32 e)$/;"	f
getNegative	Arm.cc	/^inline bool CArm::getNegative(uint32 value)$/;"	f	class:CArm
getPositive	Arm.cc	/^inline bool CArm::getPositive(uint32 value)$/;"	f	class:CArm
getProcessorStatusRegister	Arm.cc	/^inline uint32 CArm::getProcessorStatusRegister()$/;"	f	class:CArm
getProgramCounter	Arm.cc	/^inline uint32 CArm::getProgramCounter()$/;"	f	class:CArm
getRegister	Arm.cc	/^inline uint32 CArm::getRegister(uint regNumber)$/;"	f	class:CArm
getRegisterWithPSR	Arm.cc	/^inline uint32 CArm::getRegisterWithPSR(uint regNumber)$/;"	f	class:CArm
getRegisterWithPSRAndPipelining	Arm.cc	/^inline uint32 CArm::getRegisterWithPSRAndPipelining(uint regNumber)$/;"	f	class:CArm
getRegisterWithPipelining	Arm.cc	/^inline uint32 CArm::getRegisterWithPipelining(uint regNumber)$/;"	f	class:CArm
get_ea	Master512CoPro.cc	/^uint32_t Master512CoPro::get_ea(int size, int op)$/;"	f	class:Master512CoPro
gzget16	uef.cc	/^static int gzget16(gzFile f)$/;"	f	file:
gzget32	uef.cc	/^static int gzget32(gzFile f)$/;"	f	file:
gzput16	uef.cc	/^static void gzput16(gzFile f, int b)$/;"	f	file:
gzput32	uef.cc	/^static void gzput32(gzFile f, int b)$/;"	f	file:
handle	econet.cc	/^    unsigned long handle;    \/\/ 4 byte sequence little-endian.$/;"	m	struct:AUNType::AUNHeader	file:
hdc	6502core.h	/^  hdc,$/;"	e	enum:IRQ_Nums
hdig	z80.h	/^#define hdig(/;"	d
high	atodconv.cc	/^	unsigned char high;$/;"	m	struct:AtoDStateT	file:
hl	z80.h	/^	WORD hl;$/;"	m	struct:ddregs
hreg	z80.h	/^#define hreg(/;"	d
i_cmpsb	Master512CoPro.cc	/^inline void Master512CoPro::i_cmpsb()$/;"	f	class:Master512CoPro
i_cmpsw	Master512CoPro.cc	/^inline void Master512CoPro::i_cmpsw()$/;"	f	class:Master512CoPro
i_insb	Master512CoPro.cc	/^inline void Master512CoPro::i_insb()$/;"	f	class:Master512CoPro
i_insw	Master512CoPro.cc	/^inline void Master512CoPro::i_insw()$/;"	f	class:Master512CoPro
i_lodsb	Master512CoPro.cc	/^inline void Master512CoPro::i_lodsb()$/;"	f	class:Master512CoPro
i_lodsw	Master512CoPro.cc	/^inline void Master512CoPro::i_lodsw()$/;"	f	class:Master512CoPro
i_movsb	Master512CoPro.cc	/^inline void Master512CoPro::i_movsb()$/;"	f	class:Master512CoPro
i_movsw	Master512CoPro.cc	/^inline void Master512CoPro::i_movsw()$/;"	f	class:Master512CoPro
i_outsb	Master512CoPro.cc	/^inline void Master512CoPro::i_outsb()$/;"	f	class:Master512CoPro
i_outsw	Master512CoPro.cc	/^inline void Master512CoPro::i_outsw()$/;"	f	class:Master512CoPro
i_popf	Master512CoPro.cc	/^inline void Master512CoPro::i_popf()$/;"	f	class:Master512CoPro
i_scasb	Master512CoPro.cc	/^inline void Master512CoPro::i_scasb()$/;"	f	class:Master512CoPro
i_scasw	Master512CoPro.cc	/^inline void Master512CoPro::i_scasw()$/;"	f	class:Master512CoPro
i_stosb	Master512CoPro.cc	/^inline void Master512CoPro::i_stosb()$/;"	f	class:Master512CoPro
i_stosw	Master512CoPro.cc	/^inline void Master512CoPro::i_stosw()$/;"	f	class:Master512CoPro
idle	econet.h	/^	bool idle;$/;"	m	struct:MC6854
ier	viastate.h	/^  unsigned char ifr,ier;$/;"	m	struct:__anon24
ifr	viastate.h	/^  unsigned char ifr,ier;$/;"	m	struct:__anon24
immediateCarry	Arm.h	/^	uint32 immediateCarry[4096];$/;"	m	class:CArm
immediateValue	Arm.h	/^	uint32 immediateValue[4096];$/;"	m	class:CArm
in	z80_support.cc	/^unsigned char in(unsigned int addr)$/;"	f
inROM	z80_support.cc	/^int inROM = 1;$/;"	v
inet_addr	econet.cc	/^    unsigned long inet_addr;$/;"	m	struct:AUNType::FourWayStage::AUNTAB	file:
inet_addr	econet.cc	/^    unsigned long inet_addr;$/;"	m	struct:AUNType::FourWayStage::ECOLAN	file:
inet_addr	econet.cc	/^    unsigned long inet_addr;$/;"	m	struct:AUNType::FourWayStage::EthernetPacket	file:
init_z80	z80_support.cc	/^void init_z80()$/;"	f
inmask	econet.cc	/^static int inmask, outmask;$/;"	v	file:
instr_count	Arm.h	/^	int instr_count;$/;"	m	class:CArm
int16	6502core.cc	/^typedef int int16;$/;"	t	file:
int16	tube.cc	/^#define int16 /;"	d	file:
int32	TarmacGlobals.h	/^typedef	signed int int32;$/;"	t
int8	TarmacGlobals.h	/^typedef	signed char int8;$/;"	t
int8	tube.cc	/^#define int8 /;"	d	file:
intStatus	6502core.cc	/^unsigned char intStatus=0; \/* bit set (nums in IRQ_Nums) if interrupt being caused *\/$/;"	v
interp_coeff	speech.cc	/^static char interp_coeff[8] = {$/;"	v	file:
interp_count	speech.h	/^	UINT8 interp_count;		\/* number of interp periods (0-7) *\/$/;"	m	struct:tms5220
interrupt	Arm.h	/^		uint8 interrupt;			\/\/ interrupt may have occurred$/;"	m	struct:Signals::__anon8
interrupt	Master512CoPro.cc	/^void Master512CoPro::interrupt(int int_num, int trap)$/;"	f	class:Master512CoPro
interruptDisableFlag	Arm.h	/^	uint interruptDisableFlag;		\/\/ in bit 26$/;"	m	class:CArm
io	sasi.cc	/^	bool io;$/;"	m	struct:__anon9	file:
io	scsi.cc	/^	bool io;$/;"	m	struct:scsi_t	file:
io_read_byte_8	Master512CoPro.cc	/^uint8_t Master512CoPro::io_read_byte_8(uint16_t address)$/;"	f	class:Master512CoPro
io_write_byte_8	Master512CoPro.cc	/^void Master512CoPro::io_write_byte_8(uint16_t address, uint8_t data)$/;"	f	class:Master512CoPro
iocounter	Arm.h	/^	int iocounter;$/;"	m	class:CArm
ir	z80.cc	/^WORD ir;			\/* other Z80 registers *\/$/;"	v
ira	viastate.h	/^  unsigned char ira,irb;$/;"	m	struct:__anon24
irb	viastate.h	/^  unsigned char ira,irb;$/;"	m	struct:__anon24
irq	sasi.cc	/^	bool irq;$/;"	m	struct:__anon9	file:
irq	scsi.cc	/^	bool irq;$/;"	m	struct:scsi_t	file:
irqR	Arm.h	/^	uint32	irqR[16];				\/\/ interrupt mode registers$/;"	m	class:CArm
irq_pin	speech.h	/^	UINT8 irq_pin;			\/* state of the IRQ pin (output) *\/$/;"	m	struct:tms5220
irqcause	econet.cc	/^static unsigned char irqcause;                    \/\/ flagto indicate cause of irq sr1b7$/;"	m	class:AUNType::FourWayStage	file:
isExtendedInstruction	Arm.cc	/^inline bool CArm::isExtendedInstruction(uint32 instruction)$/;"	f	class:CArm
isValidAddress	Arm.cc	/^inline bool CArm::isValidAddress(uint32 address)$/;"	f	class:CArm
ix	z80.cc	/^WORD ix;$/;"	v
iy	z80.cc	/^WORD iy;$/;"	v
k10table	speech.cc	/^const static short k10table   [0x08]={$/;"	v	file:
k1table	speech.cc	/^const static short k1table  [0x20]={$/;"	v	file:
k2table	speech.cc	/^const static short k2table    [0x20]={$/;"	v	file:
k3table	speech.cc	/^const static short k3table    [0x10]={$/;"	v	file:
k4table	speech.cc	/^const static short k4table    [0x10]={$/;"	v	file:
k5table	speech.cc	/^const static short k5table    [0x10]={$/;"	v	file:
k6table	speech.cc	/^const static short k6table    [0x10]={$/;"	v	file:
k7table	speech.cc	/^const static short k7table    [0x10]={$/;"	v	file:
k8table	speech.cc	/^const static short k8table    [0x08]={$/;"	v	file:
k9table	speech.cc	/^const static short k9table    [0x08]={$/;"	v	file:
keepRunning	Arm.h	/^	bool keepRunning;				\/\/ keep calling run()$/;"	m	class:CArm
key	common.h	/^  char *key;$/;"	m	struct:extraopt_struct
keyCodeForKeyString	userkybd.cc	/^int keyCodeForKeyString(char * keyString)$/;"	f
l1	uef.cc	/^	int l1;$/;"	m	struct:uef_chunk_info	file:
l2	uef.cc	/^	int l2;$/;"	m	struct:uef_chunk_info	file:
lastCopro	Arm.h	/^	uint32 lastCopro;				\/\/ num of instructions executed since last copro instruction profiled$/;"	m	class:CArm
last_frame	speech.h	/^	UINT8 last_frame;		\/* we are doing the frame of sound *\/$/;"	m	struct:tms5220
last_sample	speech.h	/^	int last_sample, curr_sample;$/;"	m	struct:tms5220_info
lastwrite	sasi.cc	/^	int lastwrite;$/;"	m	struct:__anon9	file:
lastwrite	scsi.cc	/^	int lastwrite;$/;"	m	struct:scsi_t	file:
ldig	z80.h	/^#define ldig(/;"	d
len	beebsound.cc	/^	long len;$/;"	m	struct:SoundSample	file:
len	uef.cc	/^	int len;$/;"	m	struct:uef_chunk_info	file:
length	discedit.h	/^	int length;$/;"	m	struct:__anon22
length	sasi.cc	/^	int length;$/;"	m	struct:__anon9	file:
length	scsi.cc	/^	int length;$/;"	m	struct:scsi_t	file:
loadAddr	discedit.h	/^	int loadAddr;$/;"	m	struct:__anon22
locked	discedit.h	/^	bool locked;$/;"	m	struct:__anon22
logerror	speech.cc	/^void logerror(const char *text, ...)$/;"	f
long_time	beebmem.cc	/^time_t long_time; \/\/ Define Clock for Computech Integra-B$/;"	v
low	atodconv.cc	/^	unsigned char low;$/;"	m	struct:AtoDStateT	file:
lreg	z80.h	/^#define lreg(/;"	d
lslOperator	TarmacGlobals.h	/^inline uint32 lslOperator(uint32 value, uint shiftAmount)$/;"	f
lsrOperator	TarmacGlobals.h	/^inline uint32 lsrOperator(uint32 value, uint shiftAmount)$/;"	f
lun	sasi.cc	/^	int lun;$/;"	m	struct:__anon9	file:
lun	scsi.cc	/^	int lun;$/;"	m	struct:scsi_t	file:
mBSDName	serialdevices.cc	/^char mBSDName[20][100];$/;"	v
mBitMap	beebwin.h	/^	PixMap mBitMap;$/;"	m	class:BeebWin
mBreakOutWindow	uservia.cc	/^WindowRef mBreakOutWindow = NULL; $/;"	v
mCT	beebwin.h	/^	CTabPtr mCT;$/;"	m	class:BeebWin
mDebugWindow	debug.cc	/^WindowRef mDebugWindow = NULL; $/;"	v
mEthernetHandle	serialdevices.cc	/^SOCKET	mEthernetHandle = 0;$/;"	v
mEthernetPortReadTaskID	serialdevices.cc	/^MPTaskID mEthernetPortReadTaskID = NULL;$/;"	v
mEthernetPortStatusTaskID	serialdevices.cc	/^MPTaskID mEthernetPortStatusTaskID = NULL;$/;"	v
mEthernetPortWindow	serialdevices.cc	/^WindowRef mEthernetPortWindow = NULL; $/;"	v
mIP	serialdevices.cc	/^char mIP[64] = {"127.0.0.1"};$/;"	v
mListenHandle	serialdevices.cc	/^SOCKET	mListenHandle = 0;$/;"	v
mListenTaskID	serialdevices.cc	/^MPTaskID mListenTaskID = NULL;$/;"	v
mMode	serialdevices.cc	/^bool mMode = true;$/;"	v
mPopup	serialdevices.cc	/^ControlRef mPopup = NULL;$/;"	v
mPort	serialdevices.cc	/^char mPort[64] = {"23"};$/;"	v
mPortName	serialdevices.cc	/^char mPortName[20][100];$/;"	v
mSerialHandle	serialdevices.cc	/^int mSerialHandle = -1;$/;"	v
mSerialPortWindow	serialdevices.cc	/^WindowRef mSerialPortWindow = NULL; $/;"	v
mSerialReadTaskID	serialdevices.cc	/^MPTaskID mSerialReadTaskID = NULL;$/;"	v
mSerialStatusTaskID	serialdevices.cc	/^MPTaskID mSerialStatusTaskID = NULL;$/;"	v
mServer	serialdevices.cc	/^sockaddr_in mServer;$/;"	v
mStartAgain	serialdevices.cc	/^bool mStartAgain = false;$/;"	v
mTCWindow	serial.cc	/^WindowRef mTCWindow = NULL; $/;"	v
mUKWindow	userkybd.cc	/^WindowRef mUKWindow = NULL; $/;"	v
mWindow	beebwin.h	/^	WindowRef mWindow; $/;"	m	class:BeebWin
m_AMXAdjust	beebwin.h	/^	int			m_AMXAdjust;$/;"	m	class:BeebWin
m_AMXXSize	beebwin.h	/^	int			m_AMXXSize;$/;"	m	class:BeebWin
m_AMXYSize	beebwin.h	/^	int			m_AMXYSize;$/;"	m	class:BeebWin
m_AppPath	beebwin.h	/^	char		m_AppPath[256];$/;"	m	class:BeebWin
m_AuxVal	Master512CoPro.h	/^		uint32_t m_AuxVal; \/\/ 0 or non-0 valued flags$/;"	m	class:Master512CoPro
m_BlurIntensities	beebwin.h	/^	char		m_BlurIntensities[8];$/;"	m	class:BeebWin
m_CarryVal	Master512CoPro.h	/^		uint32_t m_CarryVal;$/;"	m	class:Master512CoPro
m_CopyToClip	beebwin.h	/^	bool		m_CopyToClip;$/;"	m	class:BeebWin
m_CycleBase	beebwin.h	/^	long		m_CycleBase;$/;"	m	class:BeebWin
m_DF	Master512CoPro.h	/^		uint8_t m_TF, m_IF, m_DF; \/\/ 0 or 1 valued flags$/;"	m	class:Master512CoPro
m_DiscTypeSelection	beebwin.h	/^	int			m_DiscTypeSelection;$/;"	m	class:BeebWin
m_FPSTarget	beebwin.h	/^	int			m_FPSTarget;$/;"	m	class:BeebWin
m_FramesPerSecond	beebwin.h	/^	double		m_FramesPerSecond;$/;"	m	class:BeebWin
m_FreezeWhenInactive	beebwin.h	/^	bool		m_FreezeWhenInactive;$/;"	m	class:BeebWin
m_FullScreen	beebwin.h	/^	bool		m_FullScreen;$/;"	m	class:BeebWin
m_FullScreenWindow	beebwin.h	/^	WindowPtr	m_FullScreenWindow;$/;"	m	class:BeebWin
m_HideCursor	beebwin.h	/^	bool		m_HideCursor;$/;"	m	class:BeebWin
m_IF	Master512CoPro.h	/^		uint8_t m_TF, m_IF, m_DF; \/\/ 0 or 1 valued flags$/;"	m	class:Master512CoPro
m_IOPL	Master512CoPro.h	/^		uint8_t m_IOPL, m_NT, m_MF;$/;"	m	class:Master512CoPro
m_Invert	beebwin.h	/^	bool		m_Invert;$/;"	m	class:BeebWin
m_KeyMapAS	beebwin.h	/^	int			m_KeyMapAS;$/;"	m	class:BeebWin
m_KeyMapFunc	beebwin.h	/^	int			m_KeyMapFunc;$/;"	m	class:BeebWin
m_LastFPSCount	beebwin.h	/^	long		m_LastFPSCount;$/;"	m	class:BeebWin
m_LastStatsTickCount	beebwin.h	/^	long		m_LastStatsTickCount;$/;"	m	class:BeebWin
m_LastStatsTotalCycles	beebwin.h	/^	long		m_LastStatsTotalCycles;$/;"	m	class:BeebWin
m_LastTickCount	beebwin.h	/^	long		m_LastTickCount;$/;"	m	class:BeebWin
m_LastTotalCycles	beebwin.h	/^	long		m_LastTotalCycles;$/;"	m	class:BeebWin
m_MF	Master512CoPro.h	/^		uint8_t m_IOPL, m_NT, m_MF;$/;"	m	class:Master512CoPro
m_Memory	Master512CoPro.h	/^		unsigned char* m_Memory;$/;"	m	class:Master512CoPro
m_MenuIdAMXAdjust	beebwin.h	/^	int			m_MenuIdAMXAdjust;$/;"	m	class:BeebWin
m_MenuIdAMXSize	beebwin.h	/^	int			m_MenuIdAMXSize;$/;"	m	class:BeebWin
m_MenuIdKeyMapping	beebwin.h	/^	int			m_MenuIdKeyMapping;$/;"	m	class:BeebWin
m_MenuIdPrinterPort	beebwin.h	/^	int			m_MenuIdPrinterPort;$/;"	m	class:BeebWin
m_MenuIdSampleRate	beebwin.h	/^	int			m_MenuIdSampleRate;$/;"	m	class:BeebWin
m_MenuIdSticks	beebwin.h	/^	int			m_MenuIdSticks;$/;"	m	class:BeebWin
m_MenuIdTiming	beebwin.h	/^	int			m_MenuIdTiming;$/;"	m	class:BeebWin
m_MenuIdVolume	beebwin.h	/^	int			m_MenuIdVolume;$/;"	m	class:BeebWin
m_MenuIdWinSize	beebwin.h	/^	int			m_MenuIdWinSize;$/;"	m	class:BeebWin
m_MinFrameCount	beebwin.h	/^	long		m_MinFrameCount;$/;"	m	class:BeebWin
m_Mod_RM	Master512CoPro.h	/^		} m_Mod_RM;$/;"	m	class:Master512CoPro	typeref:struct:Master512CoPro::__anon14
m_Motion_Blur	beebwin.h	/^	int			m_Motion_Blur;$/;"	m	class:BeebWin
m_NT	Master512CoPro.h	/^		uint8_t m_IOPL, m_NT, m_MF;$/;"	m	class:Master512CoPro
m_OSRDCH	beebwin.h	/^	int m_OSRDCH;$/;"	m	class:BeebWin
m_OverVal	Master512CoPro.h	/^		uint32_t m_OverVal;$/;"	m	class:Master512CoPro
m_PageFlipping	beebwin.cc	/^bool m_PageFlipping=0;$/;"	v
m_ParityVal	Master512CoPro.h	/^		uint32_t m_ParityVal;$/;"	m	class:Master512CoPro
m_PicNum	beebwin.h	/^	int			m_PicNum;$/;"	m	class:BeebWin
m_PrintScreen	beebwin.h	/^	bool		m_PrintScreen;$/;"	m	class:BeebWin
m_PrintToPDF	beebwin.h	/^	bool		m_PrintToPDF;$/;"	m	class:BeebWin
m_PrinterDevice	beebwin.h	/^	char		m_PrinterDevice[256];$/;"	m	class:BeebWin
m_PrinterFileName	beebwin.h	/^	char		m_PrinterFileName[256];$/;"	m	class:BeebWin
m_RGB16	beebwin.h	/^	int_fast16_t m_RGB16[256];$/;"	m	class:BeebWin
m_RGB32	beebwin.h	/^	int_fast32_t m_RGB32[256];$/;"	m	class:BeebWin
m_RealTimeTarget	beebwin.h	/^	double		m_RealTimeTarget;$/;"	m	class:BeebWin
m_RelativeSpeed	beebwin.h	/^	double		m_RelativeSpeed;$/;"	m	class:BeebWin
m_RestoreState	beebwin.h	/^	Ptr			m_RestoreState;$/;"	m	class:BeebWin
m_ScreenRefreshCount	beebwin.h	/^	int			m_ScreenRefreshCount;$/;"	m	class:BeebWin
m_ShiftBooted	beebwin.h	/^	int			m_ShiftBooted;$/;"	m	class:BeebWin
m_ShiftPressed	beebwin.h	/^	int			m_ShiftPressed;$/;"	m	class:BeebWin
m_ShowSpeedAndFPS	beebwin.h	/^	bool		m_ShowSpeedAndFPS;$/;"	m	class:BeebWin
m_SignVal	Master512CoPro.h	/^		int32_t m_SignVal;$/;"	m	class:Master512CoPro
m_TF	Master512CoPro.h	/^		uint8_t m_TF, m_IF, m_DF; \/\/ 0 or 1 valued flags$/;"	m	class:Master512CoPro
m_TickBase	beebwin.h	/^	long		m_TickBase;$/;"	m	class:BeebWin
m_WriteProtectDisc	beebwin.h	/^	bool		m_WriteProtectDisc[2];$/;"	m	class:BeebWin
m_WriteProtectOnLoad	beebwin.h	/^	bool		m_WriteProtectOnLoad;$/;"	m	class:BeebWin
m_XWinPos	beebwin.h	/^	int			m_XWinPos;$/;"	m	class:BeebWin
m_XWinSize	beebwin.h	/^	int			m_XWinSize;$/;"	m	class:BeebWin
m_YWinPos	beebwin.h	/^	int			m_YWinPos;$/;"	m	class:BeebWin
m_YWinSize	beebwin.h	/^	int			m_YWinSize;$/;"	m	class:BeebWin
m_ZeroVal	Master512CoPro.h	/^		uint32_t m_ZeroVal;$/;"	m	class:Master512CoPro
m_captureresolution	beebwin.h	/^	int	m_captureresolution;$/;"	m	class:BeebWin
m_clipboard	beebwin.h	/^	char m_clipboard[32768];$/;"	m	class:BeebWin
m_clipboardlen	beebwin.h	/^	int m_clipboardlen;$/;"	m	class:BeebWin
m_clipboardptr	beebwin.h	/^	int	m_clipboardptr;$/;"	m	class:BeebWin
m_dma	Master512CoPro.h	/^		dma_state m_dma[2];$/;"	m	class:Master512CoPro
m_dst	Master512CoPro.h	/^		uint32_t m_dst;$/;"	m	class:Master512CoPro
m_ea	Master512CoPro.h	/^		uint32_t m_ea;$/;"	m	class:Master512CoPro
m_easeg	Master512CoPro.h	/^		int m_easeg;$/;"	m	class:Master512CoPro
m_eo	Master512CoPro.h	/^		uint16_t m_eo; \/\/ Effective offset of the address (before segment is added)$/;"	m	class:Master512CoPro
m_fire_trap	Master512CoPro.h	/^		uint8_t m_fire_trap;$/;"	m	class:Master512CoPro
m_frozen	beebwin.h	/^	bool		m_frozen;$/;"	m	class:BeebWin
m_halt	Master512CoPro.h	/^		bool m_halt;$/;"	m	class:Master512CoPro
m_icount	Master512CoPro.h	/^		int m_icount;$/;"	m	class:Master512CoPro
m_ip	Master512CoPro.h	/^		uint16_t m_ip;$/;"	m	class:Master512CoPro
m_irq_state	Master512CoPro.h	/^		uint32_t m_irq_state;$/;"	m	class:Master512CoPro
m_isFullScreen	beebwin.h	/^	bool		m_isFullScreen;$/;"	m	class:BeebWin
m_last_dma	Master512CoPro.h	/^		bool m_last_dma;$/;"	m	class:Master512CoPro
m_maintainAspectRatio	beebwin.h	/^	bool		m_maintainAspectRatio;$/;"	m	class:BeebWin
m_modrm	Master512CoPro.h	/^		uint8_t m_modrm;$/;"	m	class:Master512CoPro
m_nmi_state	Master512CoPro.h	/^		uint32_t m_nmi_state;$/;"	m	class:Master512CoPro
m_no_interrupt	Master512CoPro.h	/^		uint8_t m_no_interrupt;$/;"	m	class:Master512CoPro
m_parity_table	Master512CoPro.h	/^		uint8_t m_parity_table[256];$/;"	m	class:Master512CoPro
m_pc	Master512CoPro.h	/^		uint32_t m_pc;$/;"	m	class:Master512CoPro
m_pending_irq	Master512CoPro.h	/^		uint32_t m_pending_irq;$/;"	m	class:Master512CoPro
m_prefix_seg	Master512CoPro.h	/^		uint32_t m_prefix_seg; \/\/ the latest prefix segment$/;"	m	class:Master512CoPro
m_prev_ip	Master512CoPro.h	/^		uint16_t m_prev_ip;$/;"	m	class:Master512CoPro
m_printerbuffer	beebwin.h	/^	char m_printerbuffer[1024 * 1024];$/;"	m	class:BeebWin
m_printerbufferlen	beebwin.h	/^	int m_printerbufferlen;$/;"	m	class:BeebWin
m_regs	Master512CoPro.h	/^		} m_regs;$/;"	m	class:Master512CoPro	typeref:union:Master512CoPro::__anon12
m_screen	beebwin.h	/^	char *m_screen;$/;"	m	class:BeebWin
m_screen_blur	beebwin.h	/^	char *m_screen_blur;$/;"	m	class:BeebWin
m_seg_prefix	Master512CoPro.h	/^		bool m_seg_prefix; \/\/ prefix segment indicator$/;"	m	class:Master512CoPro
m_seg_prefix_next	Master512CoPro.h	/^		bool m_seg_prefix_next; \/\/ prefix segment for next instruction$/;"	m	class:Master512CoPro
m_skip	beebwin.h	/^	int	m_skip;$/;"	m	class:BeebWin
m_src	Master512CoPro.h	/^		uint32_t m_src;$/;"	m	class:Master512CoPro
m_sregs	Master512CoPro.h	/^		uint16_t  m_sregs[4];$/;"	m	class:Master512CoPro
m_szTitle	beebwin.h	/^	char		m_szTitle[100];$/;"	m	class:BeebWin
m_test_state	Master512CoPro.h	/^		uint8_t m_test_state;$/;"	m	class:Master512CoPro
m_vkeyPressed	beebwin.h	/^	int			m_vkeyPressed[256][2][2];$/;"	m	class:BeebWin
mainWin	main.cc	/^BeebWin *mainWin;$/;"	v
map_csw_file	csw.cc	/^void map_csw_file(void)$/;"	f
map_desc	serial.cc	/^char map_desc[MAX_MAP_LINES][40];$/;"	v
map_file	serial.cc	/^bool map_file(char *file_name)$/;"	f
map_lines	serial.cc	/^int map_lines;$/;"	v
map_time	serial.cc	/^int map_time[MAX_MAP_LINES];$/;"	v
master512CoPro	Master512CoPro.cc	/^Master512CoPro master512CoPro;$/;"	v
message	sasi.cc	/^	int message;$/;"	m	struct:__anon9	file:
message	sasi.cc	/^	message$/;"	e	enum:phase_s	file:
message	scsi.cc	/^	int message;$/;"	m	struct:scsi_t	file:
message	scsi.cc	/^	message$/;"	e	enum:phase_t	file:
mix_func_t	common.h	/^typedef int (*mix_func_t)(long *buffer, generate_func_t genfunc, void *rock);$/;"	t
mm_PutBYTE	z80mem.h	/^#define mm_PutBYTE(/;"	d
modeCounter	Arm.h	/^	uint32 modeCounter;$/;"	m	class:CArm
modeTotal	Arm.h	/^	uint32 modeTotal[4];$/;"	m	class:CArm
mon	log.cc	/^static const char* const mon[] = {$/;"	v	file:
msg	sasi.cc	/^	bool msg;$/;"	m	struct:__anon9	file:
msg	scsi.cc	/^	bool msg;$/;"	m	struct:scsi_t	file:
mutex	audev-macosx.cc	/^  pthread_mutex_t mutex;$/;"	m	struct:buffer_struct	file:
my_irq	speech.cc	/^void my_irq(int state)$/;"	f
my_load_address	speech.cc	/^void my_load_address(int data)$/;"	f
my_read	speech.cc	/^int my_read(int count)$/;"	f
my_read_and_branch	speech.cc	/^void my_read_and_branch(void)$/;"	f
myaunnet	econet.cc	/^static unsigned int myaunnet = 0;                \/\/ aunnet table entry that I match. should be -1 as 0 is valid..$/;"	m	class:AUNType::FourWayStage	file:
nb	debug.cc	/^	int  nb;$/;"	m	struct:InstInfo	file:
nb	debug_org.cc	/^	int  nb;$/;"	m	struct:InstInfo	file:
network	econet.cc	/^    unsigned char network;$/;"	m	struct:AUNType::FourWayStage::AUNTAB	file:
network	econet.cc	/^    unsigned char network;$/;"	m	struct:AUNType::FourWayStage::ECOLAN	file:
network	econet.cc	/^static ECOLAN network[NETWORK_TABLE_LENGTH]; \/\/ list of my friends! :-)$/;"	m	class:AUNType::FourWayStage	file:
networkp	econet.cc	/^static unsigned int networkp = 0;                \/\/ how many friends do I have?$/;"	m	class:AUNType::FourWayStage	file:
new_energy	speech.h	/^	UINT16 new_energy;$/;"	m	struct:tms5220
new_k	speech.h	/^	int new_k[10];$/;"	m	struct:tms5220
new_pitch	speech.h	/^	UINT16 new_pitch;$/;"	m	struct:tms5220
next	sasi.cc	/^	int next;$/;"	m	struct:__anon9	file:
next	scsi.cc	/^	int next;$/;"	m	struct:scsi_t	file:
nmi_econet	6502core.h	/^	nmi_econet,$/;"	e	enum:NMI_Nums
nmi_floppy	6502core.h	/^	nmi_floppy,$/;"	e	enum:NMI_Nums
note_t	common.h	/^typedef struct note_struct note_t;$/;"	t	typeref:struct:note_struct
numFiles	discedit.h	/^	int numFiles;$/;"	m	struct:__anon23
numSectors	discedit.h	/^	int numSectors;$/;"	m	struct:__anon23
numWrites	discedit.h	/^	int numWrites;$/;"	m	struct:__anon23
offs_t	osd_cpu.h	/^typedef UINT32			offs_t;$/;"	t
offset	sasi.cc	/^	int offset;$/;"	m	struct:__anon9	file:
offset	scsi.cc	/^	int offset;$/;"	m	struct:scsi_t	file:
old_energy	speech.h	/^	UINT16 old_energy;$/;"	m	struct:tms5220
old_k	speech.h	/^	int old_k[10];$/;"	m	struct:tms5220
old_pitch	speech.h	/^	UINT16 old_pitch;$/;"	m	struct:tms5220
old_readHIOAddr	tube.cc	/^unsigned char old_readHIOAddr = 0;$/;"	v
old_readHTmpData	tube.cc	/^unsigned char old_readHTmpData = 0;$/;"	v
old_readPIOAddr	tube.cc	/^unsigned char old_readPIOAddr = 0;$/;"	v
old_readPTmpData	tube.cc	/^unsigned char old_readPTmpData = 0;$/;"	v
old_writeHIOAddr	tube.cc	/^unsigned char old_writeHIOAddr = 0;$/;"	v
old_writeHTmpData	tube.cc	/^unsigned char old_writeHTmpData = 0;$/;"	v
old_writePIOAddr	tube.cc	/^unsigned char old_writePIOAddr = 0;$/;"	v
old_writePTmpData	tube.cc	/^unsigned char old_writePTmpData = 0;$/;"	v
opn	debug.cc	/^	char opn[4];$/;"	m	struct:InstInfo	file:
opn	debug_org.cc	/^	char opn[4];$/;"	m	struct:InstInfo	file:
optable	debug.cc	/^InstInfo optable[256] =$/;"	v
optable	debug_org.cc	/^InstInfo optable[256] =$/;"	v
ora	viastate.h	/^  unsigned char ora,orb;$/;"	m	struct:__anon24
orb	viastate.h	/^  unsigned char ora,orb;$/;"	m	struct:__anon24
orrOperator	Arm.cc	/^inline uint32 CArm::orrOperator(uint32 operand1, uint32 operand2)$/;"	f	class:CArm
orrOperatorS	Arm.cc	/^inline uint32 CArm::orrOperatorS(uint32 operand1, uint32 operand2)$/;"	f	class:CArm
osclilog	6502core.cc	/^FILE *osclilog; \/\/=fopen("\/oscli.log","wt");$/;"	v
out	z80_support.cc	/^void out(unsigned int addr, unsigned char value)$/;"	f
outmask	econet.cc	/^static int inmask, outmask;$/;"	v	file:
ova	video.cc	/^int ova,ovn; \/\/ mem ptr buffers$/;"	v
ovn	video.cc	/^int ova,ovn; \/\/ mem ptr buffers$/;"	v
pBuf	beebsound.cc	/^	unsigned char *pBuf;$/;"	m	struct:SoundSample	file:
pFilename	beebsound.cc	/^	const char *pFilename;$/;"	m	struct:SoundSample	file:
pad	econet.cc	/^    unsigned char pad;        \/\/ retrans$/;"	m	struct:AUNType::AUNHeader	file:
palette_type	beebwin.h	/^	enum PaletteType { RGB, BW, AMBER, GREEN } palette_type;$/;"	m	class:BeebWin	typeref:enum:BeebWin::PaletteType
parity	z80.cc	/^#define parity(/;"	d	file:
parse_frame	speech.cc	/^static int parse_frame(struct tms5220 *tms, int the_first_frame)$/;"	f	file:
partab	z80.cc	/^static const unsigned char partab[256] = {$/;"	v	file:
pc	Arm.h	/^	uint32 pc;$/;"	m	class:CArm
pc	z80.cc	/^WORD pc;$/;"	v
pcr	viastate.h	/^  unsigned char acr,pcr;$/;"	m	struct:__anon24
pending_fast_interrupt	Arm.h	/^	bool pending_fast_interrupt;$/;"	m	class:CArm
pending_interrupt	Arm.h	/^	bool pending_interrupt;$/;"	m	class:CArm
performBlockDataTransferLoad	Arm.cc	/^inline bool CArm::performBlockDataTransferLoad(uint rn, uint32 initialAddress, uint32 finalAddress)$/;"	f	class:CArm
performBlockDataTransferLoadS	Arm.cc	/^inline bool CArm::performBlockDataTransferLoadS(uint rn, uint32 initialAddress, uint32 finalAddress)$/;"	f	class:CArm
performBlockDataTransferStore	Arm.cc	/^inline bool CArm::performBlockDataTransferStore(uint rn, uint32 initialAddress, uint32 finalAddress)$/;"	f	class:CArm
performBlockDataTransferStoreS	Arm.cc	/^inline bool CArm::performBlockDataTransferStoreS(uint rn, uint32 initialAddress, uint32 finalAddress)$/;"	f	class:CArm
performBranch	Arm.cc	/^inline void CArm::performBranch()$/;"	f	class:CArm
performDataTransferLoadByte	Arm.cc	/^inline bool CArm::performDataTransferLoadByte(uint32 address, uint8 &location)$/;"	f	class:CArm
performDataTransferLoadWord	Arm.cc	/^inline bool CArm::performDataTransferLoadWord(uint32 address, uint32 &destination)$/;"	f	class:CArm
performDataTransferStoreByte	Arm.cc	/^inline bool CArm::performDataTransferStoreByte(uint32 address, uint8 value)$/;"	f	class:CArm
performDataTransferStoreWord	Arm.cc	/^inline bool CArm::performDataTransferStoreWord(uint32 address, uint32 data)$/;"	f	class:CArm
performMla	Arm.cc	/^inline void CArm::performMla()$/;"	f	class:CArm
performMlaS	Arm.cc	/^inline void CArm::performMlaS()$/;"	f	class:CArm
performMul	Arm.cc	/^inline void CArm::performMul()$/;"	f	class:CArm
performMulS	Arm.cc	/^inline void CArm::performMulS()$/;"	f	class:CArm
performSingleDataSwapByte	Arm.cc	/^inline void CArm::performSingleDataSwapByte()$/;"	f	class:CArm
performSingleDataSwapWord	Arm.cc	/^inline void CArm::performSingleDataSwapWord()$/;"	f	class:CArm
perl_params	z80.cc	/^const char *perl_params =$/;"	v
phase	sasi.cc	/^	phase_s phase;$/;"	m	struct:__anon9	file:
phase	scsi.cc	/^	phase_t phase;$/;"	m	struct:scsi_t	file:
phase_s	sasi.cc	/^enum phase_s {$/;"	g	file:
phase_t	scsi.cc	/^enum phase_t {$/;"	g	file:
phrom_address	speech.h	/^	int phrom_address;$/;"	m	struct:tms5220
phrom_bits_taken	speech.h	/^	UINT8 phrom_bits_taken;$/;"	m	struct:tms5220
phrom_rom	speech.cc	/^unsigned char phrom_rom[16][16384];$/;"	v
pitch_count	speech.h	/^	int pitch_count;$/;"	m	struct:tms5220
pitchtable	speech.cc	/^const static unsigned short pitchtable [0x40]={$/;"	v	file:
playing	beebsound.cc	/^	bool playing;$/;"	m	struct:SoundSample	file:
port	econet.cc	/^    unsigned char port;        \/\/ dest port$/;"	m	struct:AUNType::AUNHeader	file:
port	econet.cc	/^    unsigned char port;$/;"	m	struct:AUNType::FourWayStage::LongEconetPacket	file:
port	econet.cc	/^    unsigned int port;$/;"	m	struct:AUNType::FourWayStage::ECOLAN	file:
port	econet.cc	/^    unsigned int port;$/;"	m	struct:AUNType::FourWayStage::EthernetPacket	file:
pos	beebsound.cc	/^	int pos;$/;"	m	struct:SoundSample	file:
powers	econet.cc	/^static const unsigned char powers[4] = { 1, 2, 4, 8 };$/;"	v	file:
prefetchInstruction	Arm.h	/^	uint32	prefetchInstruction;$/;"	m	class:CArm
prefetchInvalid	Arm.h	/^	bool	prefetchInvalid;$/;"	m	class:CArm
previousProcessorMode	Arm.h	/^	uint32 previousProcessorMode;$/;"	m	class:CArm
process_command	speech.cc	/^static void process_command(struct tms5220 *tms)$/;"	f	file:
processorMode	Arm.h	/^	uint processorMode;				\/\/ in bits 0-1$/;"	m	class:CArm
program_read_byte_8	Master512CoPro.cc	/^uint8_t Master512CoPro::program_read_byte_8(uint32_t address)$/;"	f	class:Master512CoPro
program_write_byte_8	Master512CoPro.cc	/^void Master512CoPro::program_write_byte_8(uint32_t address, uint8_t data)$/;"	f	class:Master512CoPro
quitNow	main.cc	/^Boolean quitNow;$/;"	v
r	Arm.h	/^	uint32	r[16];					\/\/ current bank of registers$/;"	m	class:CArm
r	main.h	/^    unsigned char r;$/;"	m	struct:CColour
ramMemory	Arm.h	/^	uint8 ramMemory[0x400000];		\/\/ 4 MBytes of ram memory$/;"	m	class:CArm
randbit	speech.h	/^	INT8 randbit;$/;"	m	struct:tms5220
raw	econet.cc	/^        unsigned char raw[8];$/;"	m	union:AUNType::FourWayStage::EthernetPacket::__anon1	file:
rawbuffer	audev-macosx.cc	/^static buffer_t *rawbuffer;$/;"	v	file:
readByte	Arm.cc	/^inline bool CArm::readByte(uint32 address, uint8 &destination)$/;"	f	class:CArm
readWord	Arm.cc	/^inline bool CArm::readWord(uint32 address, uint32& destination)$/;"	f	class:CArm
read_byte	Master512CoPro.cc	/^uint8_t Master512CoPro::read_byte(uint32_t addr)$/;"	f	class:Master512CoPro
read_port_byte	Master512CoPro.cc	/^uint8_t Master512CoPro::read_port_byte(uint16_t port)$/;"	f	class:Master512CoPro
read_port_word	Master512CoPro.cc	/^uint16_t Master512CoPro::read_port_word(uint16_t port)$/;"	f	class:Master512CoPro
read_word	Master512CoPro.cc	/^uint16_t Master512CoPro::read_word(uint32_t addr)$/;"	f	class:Master512CoPro
reg	Master512CoPro.h	/^			} reg;$/;"	m	struct:Master512CoPro::__anon14	typeref:struct:Master512CoPro::__anon14::__anon15
reg	ea.h	/^	} reg;$/;"	m	struct:__anon5	typeref:struct:__anon5::__anon6
registerList	ArmDisassembler.cc	/^char registerList[128];$/;"	v
regs	z80.cc	/^struct ddregs regs[2];		\/* bc,de,hl *\/$/;"	v	typeref:struct:ddregs
regs_sel	z80.cc	/^int regs_sel;			\/* bank select for ddregs *\/$/;"	v
repeat	beebsound.cc	/^	bool repeat;$/;"	m	struct:SoundSample	file:
repx_op	Master512CoPro.cc	/^uint8_t Master512CoPro::repx_op()$/;"	f	class:Master512CoPro
req	sasi.cc	/^	bool req;$/;"	m	struct:__anon9	file:
req	scsi.cc	/^	bool req;$/;"	m	struct:scsi_t	file:
reset	Arm.cc	/^void CArm::reset()$/;"	f	class:CArm
romMemory	Arm.h	/^	uint8 romMemory[0x4000];		\/\/ 16 KBytes of rom memory$/;"	m	class:CArm
rorOperator	TarmacGlobals.h	/^inline uint32 rorOperator(uint32 value, uint shiftAmount)$/;"	f
row	teletext.cc	/^unsigned char row[16][43];$/;"	v
rowPtr	teletext.cc	/^int rowPtr = 0x00;$/;"	v
rowPtrOffset	teletext.cc	/^int rowPtrOffset = 0x00;$/;"	v
rrxOperator	Arm.cc	/^inline uint32 CArm::rrxOperator(uint32 value)$/;"	f	class:CArm
run	Arm.cc	/^void CArm::run()$/;"	f	class:CArm
rxap	econet.h	/^	unsigned char rxap;			\/\/ rx fifo ap flags. (bits relate to subscripts)$/;"	m	struct:MC6854
rxffc	econet.h	/^	unsigned char rxffc;		\/\/ rx fifo fc flags bitss$/;"	m	struct:MC6854
rxfifo	econet.h	/^	unsigned char rxfifo[3];$/;"	m	struct:MC6854
rxfptr	econet.h	/^	unsigned char rxfptr;		\/\/ first empty byte in fifo$/;"	m	struct:MC6854
s_read	sasi.cc	/^	s_read,$/;"	e	enum:phase_s	file:
s_read	scsi.cc	/^	s_read,$/;"	e	enum:phase_t	file:
s_write	sasi.cc	/^	s_write,$/;"	e	enum:phase_s	file:
s_write	scsi.cc	/^	s_write,$/;"	e	enum:phase_t	file:
sample_count	speech.h	/^	UINT8 sample_count;		\/* sample number within interp (0-24) *\/$/;"	m	struct:tms5220
sample_t	common.h	/^typedef struct sample_struct sample_t;$/;"	t	typeref:struct:sample_struct
samplerate	beebsound.cc	/^static unsigned int samplerate;$/;"	v	file:
samplesperbuf	audev-macosx.cc	/^static long samplesperbuf = 0;$/;"	v	file:
sasi	sasi.cc	/^sasi_t sasi;$/;"	v
sasi_t	sasi.cc	/^} sasi_t;$/;"	t	typeref:struct:__anon9	file:
sbcOperator	Arm.cc	/^inline uint32 CArm::sbcOperator(uint32 operand1, uint32 operand2)$/;"	f	class:CArm
sbcOperatorS	Arm.cc	/^inline uint32 CArm::sbcOperatorS(uint32 operand1, uint32 operand2)$/;"	f	class:CArm
scsi	scsi.cc	/^scsi_t scsi;$/;"	v
scsi_t	scsi.cc	/^struct scsi_t {$/;"	s	file:
sector	sasi.cc	/^	int sector;$/;"	m	struct:__anon9	file:
sector	scsi.cc	/^	int sector;$/;"	m	struct:scsi_t	file:
sel	sasi.cc	/^	bool sel;$/;"	m	struct:__anon9	file:
sel	scsi.cc	/^	bool sel;$/;"	m	struct:scsi_t	file:
selection	sasi.cc	/^	selection,$/;"	e	enum:phase_s	file:
selection	scsi.cc	/^	selection,$/;"	e	enum:phase_t	file:
serial	6502core.h	/^  serial,$/;"	e	enum:IRQ_Nums
serlog	serial.cc	/^FILE *serlog;$/;"	v
setConditionFlags	Arm.cc	/^inline void CArm::setConditionFlags(uint32 flagValue)$/;"	f	class:CArm
setDestination	Arm.cc	/^inline void CArm::setDestination(uint32 value)$/;"	f	class:CArm
setDestinationS	Arm.cc	/^inline void CArm::setDestinationS(uint32 value)$/;"	f	class:CArm
setProcessorMode	Arm.cc	/^inline void CArm::setProcessorMode(uint newMode)$/;"	f	class:CArm
setProcessorStatusFlags	Arm.cc	/^inline void CArm::setProcessorStatusFlags(uint32 mask, uint32 value)$/;"	f	class:CArm
setProcessorStatusRegister	Arm.cc	/^inline void CArm::setProcessorStatusRegister(uint32 value)$/;"	f	class:CArm
setRegister	Arm.cc	/^inline void CArm::setRegister(uint regNumber, uint32 value)$/;"	f	class:CArm
setRegisterWithPrefetch	Arm.cc	/^inline void CArm::setRegisterWithPrefetch(uint regNumber, uint32 value)$/;"	f	class:CArm
setTrans	Arm.cc	/^inline void CArm::setTrans()$/;"	f	class:CArm
set_AF	Master512CoPro.cc	/^inline void Master512CoPro::set_AF(uint32_t x, uint32_t y, uint32_t z)$/;"	f	class:Master512CoPro
set_CFB	Master512CoPro.cc	/^inline void Master512CoPro::set_CFB(uint32_t x)$/;"	f	class:Master512CoPro
set_CFW	Master512CoPro.cc	/^inline void Master512CoPro::set_CFW(uint32_t x)$/;"	f	class:Master512CoPro
set_OFB_Add	Master512CoPro.cc	/^inline void Master512CoPro::set_OFB_Add(uint32_t x, uint32_t y, uint32_t z)$/;"	f	class:Master512CoPro
set_OFB_Sub	Master512CoPro.cc	/^inline void Master512CoPro::set_OFB_Sub(uint32_t x, uint32_t y, uint32_t z)$/;"	f	class:Master512CoPro
set_OFW_Add	Master512CoPro.cc	/^inline void Master512CoPro::set_OFW_Add(uint32_t x, uint32_t y, uint32_t z)$/;"	f	class:Master512CoPro
set_OFW_Sub	Master512CoPro.cc	/^inline void Master512CoPro::set_OFW_Sub(uint32_t x, uint32_t y, uint32_t z)$/;"	f	class:Master512CoPro
set_PF	Master512CoPro.cc	/^inline void Master512CoPro::set_PF(uint32_t x)$/;"	f	class:Master512CoPro
set_SF	Master512CoPro.cc	/^inline void Master512CoPro::set_SF(uint32_t x)$/;"	f	class:Master512CoPro
set_SZPF_Byte	Master512CoPro.cc	/^inline void Master512CoPro::set_SZPF_Byte(uint32_t x)$/;"	f	class:Master512CoPro
set_SZPF_Word	Master512CoPro.cc	/^inline void Master512CoPro::set_SZPF_Word(uint32_t x)$/;"	f	class:Master512CoPro
set_Z80_irq_line	z80.cc	/^void set_Z80_irq_line(bool state)$/;"	f
set_Z80_nmi_line	z80.cc	/^void set_Z80_nmi_line(bool state)$/;"	f
set_ZF	Master512CoPro.cc	/^inline void Master512CoPro::set_ZF(uint32_t x)$/;"	f	class:Master512CoPro
set_interrupt_state	speech.cc	/^static void set_interrupt_state(struct tms5220 *tms, int state)$/;"	f	file:
set_stepping	Arm.cc	/^void CArm::set_stepping(bool state)$/;"	f	class:CArm
sgn	uservia.cc	/^int sgn(int number)$/;"	f
signal_fast_interrupt	Arm.cc	/^void CArm::signal_fast_interrupt(bool state)$/;"	f	class:CArm
signal_interrupt	Arm.cc	/^void CArm::signal_interrupt(bool state)$/;"	f	class:CArm
signals	Arm.h	/^	Signals signals;$/;"	m	class:CArm
simz80	z80.cc	/^FASTWORK simz80(FASTREG PC)$/;"	f
sndlog	beebsound.cc	/^FILE *sndlog=NULL;$/;"	v
sound_buffersize	audev-macosx.cc	/^static long sound_buffersize = 0; \/* bytes *\/$/;"	v	file:
sound_channels	audev-macosx.cc	/^static int sound_channels = 0;$/;"	v	file:
sound_rate	audev-macosx.cc	/^static long sound_rate = 0; \/* frames per second *\/$/;"	v	file:
source	Master512CoPro.h	/^			uint32_t source;$/;"	m	struct:Master512CoPro::dma_state
source_pos	speech.h	/^	unsigned int source_pos;$/;"	m	struct:tms5220_info
source_step	speech.h	/^	unsigned int source_step;$/;"	m	struct:tms5220_info
sourcebuff	csw.cc	/^static unsigned char *sourcebuff;$/;"	v	file:
sp	z80.cc	/^WORD sp;$/;"	v
speak_external	speech.h	/^	UINT8 speak_external;	\/* Speak External command in progress *\/$/;"	m	struct:tms5220
sr	viastate.h	/^  unsigned char sr;$/;"	m	struct:__anon24
sr1b2cause	econet.cc	/^static unsigned char sr1b2cause;                  \/\/ flagto indicate cause of irq sr1b2$/;"	m	class:AUNType::FourWayStage	file:
sr2pse	econet.h	/^	int sr2pse;					\/\/ PSE level for SR2 rx bits$/;"	m	struct:MC6854
srcnet	econet.cc	/^    unsigned char srcnet;$/;"	m	struct:AUNType::FourWayStage::LongEconetPacket	file:
srcnet	econet.cc	/^    unsigned char srcnet;$/;"	m	struct:AUNType::FourWayStage::ShorEeconetHeader	file:
srcstn	econet.cc	/^    unsigned char srcstn;$/;"	m	struct:AUNType::FourWayStage::LongEconetPacket	file:
srcstn	econet.cc	/^    unsigned char srcstn;$/;"	m	struct:AUNType::FourWayStage::ShorEeconetHeader	file:
start	debug.cc	/^	int start;$/;"	m	struct:Breakpoint	file:
start	debug_org.cc	/^	int start;$/;"	m	struct:Breakpoint	file:
startSector	discedit.h	/^	int startSector;$/;"	m	struct:__anon22
start_time	uef.cc	/^	int start_time;$/;"	m	struct:uef_chunk_info	file:
station	econet.cc	/^    unsigned char station;$/;"	m	struct:AUNType::FourWayStage::ECOLAN	file:
status	atodconv.cc	/^	unsigned char status;$/;"	m	struct:AtoDStateT	file:
status	sasi.cc	/^	int status;$/;"	m	struct:__anon9	file:
status	sasi.cc	/^	status,$/;"	e	enum:phase_s	file:
status	scsi.cc	/^	int status;$/;"	m	struct:scsi_t	file:
status	scsi.cc	/^	status,$/;"	e	enum:phase_t	file:
status1	econet.h	/^	unsigned char status1;$/;"	m	struct:MC6854
status2	econet.h	/^	unsigned char status2;$/;"	m	struct:MC6854
step_once	Arm.h	/^		uint8 step_once;			\/\/ UI wants to stop$/;"	m	struct:Signals::__anon8
stop_address	Arm.h	/^	Word stop_address;$/;"	m	class:CArm
stop_at	Arm.cc	/^void CArm::stop_at(Word address)$/;"	f	class:CArm
stopsim	z80.cc	/^volatile int stopsim;$/;"	v
strip_trailing_spaces	discedit.cc	/^static void strip_trailing_spaces(char *str)$/;"	f	file:
subOperator	Arm.cc	/^inline uint32 CArm::subOperator(uint32 operand1, uint32 operand2)$/;"	f	class:CArm
subOperatorS	Arm.cc	/^inline uint32 CArm::subOperatorS(uint32 operand1, uint32 operand2)$/;"	f	class:CArm
svcR	Arm.h	/^	uint32	svcR[16];				\/\/ supervisor mode registers$/;"	m	class:CArm
sysVia	6502core.h	/^  sysVia,$/;"	e	enum:IRQ_Nums
sysvia_dumpstate	sysvia.cc	/^void sysvia_dumpstate(void) {$/;"	f
tSignExtendByte	tube.cc	/^INLINE int tSignExtendByte(signed char in) {$/;"	f
talk_status	speech.h	/^	UINT8 talk_status; 		\/* tms5220 is really currently speaking *\/$/;"	m	struct:tms5220
target_energy	speech.h	/^	UINT16 target_energy;$/;"	m	struct:tms5220
target_k	speech.h	/^	int target_k[10];$/;"	m	struct:tms5220
target_pitch	speech.h	/^	UINT16 target_pitch;$/;"	m	struct:tms5220
teletext	6502core.h	/^  teletext,$/;"	e	enum:IRQ_Nums
timer1adjust	viastate.h	/^  int timer1adjust; \/\/ Adjustment for 1.5 cycle counts, every other interrupt, it becomes 2 cycles instead of one$/;"	m	struct:__anon24
timer1c	viastate.h	/^  int timer1c,timer2c; \/* NOTE: Timers descrement at 2MHz and values are *\/$/;"	m	struct:__anon24
timer1hasshot	viastate.h	/^  bool timer1hasshot; \/* True if we have already caused an interrupt for one shot mode *\/$/;"	m	struct:__anon24
timer1l	viastate.h	/^  int timer1l,timer2l; \/*   fixed up on read\/write - latches hold 1MHz values*\/$/;"	m	struct:__anon24
timer2adjust	viastate.h	/^  int timer2adjust; \/\/ Adjustment for 1.5 cycle counts, every other interrupt, it becomes 2 cycles instead of one$/;"	m	struct:__anon24
timer2c	viastate.h	/^  int timer1c,timer2c; \/* NOTE: Timers descrement at 2MHz and values are *\/$/;"	m	struct:__anon24
timer2hasshot	viastate.h	/^  bool timer2hasshot; \/* True if we have already caused an interrupt for one shot mode *\/$/;"	m	struct:__anon24
timer2l	viastate.h	/^  int timer1l,timer2l; \/*   fixed up on read\/write - latches hold 1MHz values*\/$/;"	m	struct:__anon24
title	discedit.h	/^	char title[DFS_MAX_TITLE_LEN+1];$/;"	m	struct:__anon23
tlog	log.cc	/^static FILE *tlog = nullptr;$/;"	v	file:
tlog	main.cc	/^FILE *tlog;$/;"	v
tms5220	speech.cc	/^struct tms5220_info *tms5220;$/;"	v	typeref:struct:tms5220_info
tms5220	speech.h	/^struct tms5220$/;"	s
tms5220_create	speech.cc	/^struct tms5220 *tms5220_create(void)$/;"	f
tms5220_data_w	speech.cc	/^void tms5220_data_w( int data )$/;"	f
tms5220_data_write	speech.cc	/^void tms5220_data_write(struct tms5220 *chip, int data)$/;"	f
tms5220_destroy	speech.cc	/^void tms5220_destroy(struct tms5220 *chip)$/;"	f
tms5220_info	speech.h	/^struct tms5220_info$/;"	s
tms5220_int_r	speech.cc	/^int tms5220_int_r(void)$/;"	f
tms5220_int_read	speech.cc	/^int tms5220_int_read(struct tms5220 *chip)$/;"	f
tms5220_process	speech.cc	/^void tms5220_process(struct tms5220 *chip, INT16 *buffer, unsigned int size)$/;"	f
tms5220_ready_r	speech.cc	/^int tms5220_ready_r(void)$/;"	f
tms5220_ready_read	speech.cc	/^int tms5220_ready_read(struct tms5220 *chip)$/;"	f
tms5220_reset_chip	speech.cc	/^void tms5220_reset_chip(struct tms5220 *chip)$/;"	f
tms5220_set_frequency	speech.cc	/^void tms5220_set_frequency(int frequency)$/;"	f
tms5220_speaking	speech.h	/^	UINT8 tms5220_speaking;	\/* Speak or Speak External command in progress *\/$/;"	m	struct:tms5220
tms5220_start	speech.cc	/^void tms5220_start(void)$/;"	f
tms5220_status_r	speech.cc	/^int tms5220_status_r( void )$/;"	f
tms5220_status_read	speech.cc	/^int tms5220_status_read(struct tms5220 *chip)$/;"	f
tms5220_stop	speech.cc	/^void tms5220_stop(void)$/;"	f
tms5220_update	speech.cc	/^void tms5220_update(unsigned char *buff, int length)$/;"	f
trace	Arm.h	/^	uint trace;$/;"	m	class:CArm
trace	main.cc	/^int trace;$/;"	v
trace_z80	z80_support.cc	/^int trace_z80 = 0;$/;"	v
transTable	beebwin.cc	/^int (*transTable)[2] = transTable1;$/;"	v
transTable1	beebwin.cc	/^int transTable1[256][2]={$/;"	v
ts_delay	serialdevices.cc	/^int ts_delay;$/;"	v
ts_inbuff	serialdevices.cc	/^unsigned char ts_inbuff[TS_BUFF_SIZE];$/;"	v
ts_inhead	serialdevices.cc	/^int ts_inhead, ts_intail, ts_inlen;$/;"	v
ts_inlen	serialdevices.cc	/^int ts_inhead, ts_intail, ts_inlen;$/;"	v
ts_intail	serialdevices.cc	/^int ts_inhead, ts_intail, ts_inlen;$/;"	v
ts_outbuff	serialdevices.cc	/^unsigned char ts_outbuff[TS_BUFF_SIZE];$/;"	v
ts_outhead	serialdevices.cc	/^int ts_outhead, ts_outtail, ts_outlen;$/;"	v
ts_outlen	serialdevices.cc	/^int ts_outhead, ts_outtail, ts_outlen;$/;"	v
ts_outtail	serialdevices.cc	/^int ts_outhead, ts_outtail, ts_outlen;$/;"	v
tube	6502core.h	/^  tube,$/;"	e	enum:IRQ_Nums
txfifo	econet.h	/^	unsigned char txfifo[3];$/;"	m	struct:MC6854
txfptr	econet.h	/^	unsigned char txfptr;		\/\/ first empty byte in fifo$/;"	m	struct:MC6854
txftl	econet.h	/^	unsigned char txftl;		\/\/ tx fifo tx lst flags. (bits relate to subscripts)$/;"	m	struct:MC6854
txtChnl	teletext.cc	/^int txtChnl = 0;$/;"	v
txtCurFrame	teletext.cc	/^long txtCurFrame = 0;$/;"	v
txtFile	teletext.cc	/^FILE *txtFile = NULL;$/;"	v
txtFrames	teletext.cc	/^long txtFrames = 0;$/;"	v
txtListenSocket	teletext.cc	/^SOCKET txtListenSocket = 0;		\/\/ Listen socket$/;"	v
txtServer	teletext.cc	/^sockaddr_in txtServer;$/;"	v
type	econet.cc	/^    AUNType type; \/\/ AUN magic protocol byte$/;"	m	struct:AUNType::AUNHeader	file:
type	uef.cc	/^	int type;$/;"	m	struct:uef_chunk_info	file:
u	speech.h	/^	int u[11];$/;"	m	struct:tms5220
uef_chunk	uef.cc	/^static uef_chunk_info *uef_chunk = NULL;$/;"	v	file:
uef_chunk_info	uef.cc	/^struct uef_chunk_info$/;"	s	file:
uef_chunks	uef.cc	/^static int uef_chunks = 0;$/;"	v	file:
uef_clock_speed	uef.cc	/^static int uef_clock_speed = 5600;$/;"	v	file:
uef_close	uef.cc	/^void uef_close(void)$/;"	f
uef_create	uef.cc	/^bool uef_create(const char *name)$/;"	f
uef_decode_float	uef.cc	/^static float uef_decode_float(unsigned char *Float)$/;"	f	file:
uef_errno	uef.cc	/^int uef_errno;$/;"	v
uef_file_name	uef.cc	/^static char uef_file_name[256];$/;"	v	file:
uef_getdata	uef.cc	/^int uef_getdata(int time)$/;"	f
uef_last_chunk	uef.cc	/^static uef_chunk_info *uef_last_chunk = NULL;$/;"	v	file:
uef_last_put_data	uef.cc	/^static int uef_last_put_data=UEF_EOF;$/;"	v	file:
uef_open	uef.cc	/^bool uef_open(const char *name)$/;"	f
uef_put_chunk	uef.cc	/^static uef_chunk_info uef_put_chunk;$/;"	v	file:
uef_putdata	uef.cc	/^bool uef_putdata(int data, int time)$/;"	f
uef_setclock	uef.cc	/^void uef_setclock(int beats)$/;"	f
uef_setunlock	uef.cc	/^void uef_setunlock(bool unlock)$/;"	f
uef_unlock	uef.cc	/^static bool uef_unlock = false;$/;"	v	file:
uef_unlock_offset_and_crc	uef.cc	/^static void uef_unlock_offset_and_crc(uef_chunk_info *ch)$/;"	f	file:
uef_write_chunk	uef.cc	/^static bool uef_write_chunk(void)$/;"	f	file:
uint	TarmacGlobals.h	/^typedef unsigned int uint;			\/\/ assume any unsigned int larger than 8 bits$/;"	t
uint16	TarmacGlobals.h	/^typedef	unsigned short uint16;$/;"	t
uint32	TarmacGlobals.h	/^typedef	unsigned int uint32;$/;"	t
uint8	TarmacGlobals.h	/^typedef	unsigned char uint8;$/;"	t
unlock_offset	uef.cc	/^	int unlock_offset;$/;"	m	struct:uef_chunk_info	file:
unused	Arm.h	/^		uint8 unused;			$/;"	m	struct:Signals::__anon8
updateAddFlags	Arm.cc	/^inline void CArm::updateAddFlags(uint32 operand1, uint32 operand2, uint32 result)$/;"	f	class:CArm
updateLines	beebwin.cc	/^void BeebWin::updateLines(int starty, int nlines)$/;"	f	class:BeebWin
updateNZFlags	Arm.cc	/^inline void CArm::updateNZFlags(uint32 value)$/;"	f	class:CArm
updateSubFlags	Arm.cc	/^inline void CArm::updateSubFlags(uint32 operand1, uint32 operand2, uint32 result)$/;"	f	class:CArm
update_pc	Master512CoPro.h	/^		uint32_t update_pc() { return m_pc = (m_sregs[CS] << 4) + m_ip; }$/;"	f	class:Master512CoPro
userVia	6502core.h	/^  userVia,$/;"	e	enum:IRQ_Nums
uservia_dumpstate	uservia.cc	/^void uservia_dumpstate(void) {$/;"	f
usrR	Arm.h	/^	uint32	usrR[16];				\/\/ user mode registers$/;"	m	class:CArm
val	common.h	/^  char *val;$/;"	m	struct:extraopt_struct
valbuffer	audev-macosx.cc	/^static long *valbuffer = NULL; \/* samplesperbuf longs *\/$/;"	v	file:
value_t	common.h	/^typedef signed short value_t; $/;"	t
via_dumpstate	via.cc	/^void via_dumpstate(VIAState *ToDump) {$/;"	f
vialog	sysvia.cc	/^FILE *vialog;$/;"	v
video_dumpstate	video.cc	/^void video_dumpstate(void) {$/;"	f
w	Master512CoPro.h	/^				int w[256];$/;"	m	struct:Master512CoPro::__anon14::__anon15
w	Master512CoPro.h	/^				int w[256];$/;"	m	struct:Master512CoPro::__anon14::__anon16
w	Master512CoPro.h	/^			uint16_t w[8];$/;"	m	union:Master512CoPro::__anon12
w	ea.h	/^		WREGS w[256];$/;"	m	struct:__anon5::__anon6
w	ea.h	/^		WREGS w[256];$/;"	m	struct:__anon5::__anon7
watford62	discedit.h	/^	bool watford62;$/;"	m	struct:__anon23
writeByte	Arm.cc	/^inline bool CArm::writeByte(uint32 address, uint8 value)$/;"	f	class:CArm
writeWord	Arm.cc	/^inline bool CArm::writeWord(uint32 address, uint32 data)$/;"	f	class:CArm
write_byte	Master512CoPro.cc	/^void Master512CoPro::write_byte(uint32_t addr, uint8_t data)$/;"	f	class:Master512CoPro
write_port_byte	Master512CoPro.cc	/^void Master512CoPro::write_port_byte(uint16_t port, uint8_t data)$/;"	f	class:Master512CoPro
write_port_byte_al	Master512CoPro.cc	/^void Master512CoPro::write_port_byte_al(uint16_t port)$/;"	f	class:Master512CoPro
write_port_word	Master512CoPro.cc	/^void Master512CoPro::write_port_word(uint16_t port, uint16_t data)$/;"	f	class:Master512CoPro
write_word	Master512CoPro.cc	/^void Master512CoPro::write_word(uint32_t addr, uint16_t data)$/;"	f	class:Master512CoPro
x	speech.h	/^	int x[10];$/;"	m	struct:tms5220
z80_IRQ_Interrupt	z80.cc	/^void z80_IRQ_Interrupt(void)$/;"	f
z80_NMI_Interrupt	z80.cc	/^void z80_NMI_Interrupt(void)$/;"	f
z80_execute	z80_support.cc	/^void z80_execute()$/;"	f
z80_ram	z80_support.cc	/^unsigned char z80_ram[65536L];$/;"	v
z80_rom	z80_support.cc	/^unsigned char z80_rom[65536L];$/;"	v
~BeebWin	beebwin.cc	/^BeebWin::~BeebWin() $/;"	f	class:BeebWin
~CArm	Arm.cc	/^CArm::~CArm()$/;"	f	class:CArm
~Master512CoPro	Master512CoPro.cc	/^Master512CoPro::~Master512CoPro()$/;"	f	class:Master512CoPro
